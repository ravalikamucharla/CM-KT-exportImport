*---------------------------------------------------------------------*
* Program Name        :  ZCM_RZ10_UPD_PROFILEPARA_UPD                 *
* Title               :  Update parameter values for all input passed *
* Purpose             :  To update parameter values for all  profiles *
*                        passed as input                              *
*---------------------------------------------------------------------*
* Related Transaction OR Standard Program References                  *
* RZ10                                                                *
*---------------------------------------------------------------------*
* Tables              :   SELECT    UPDATE      INSERT      DELETE    *
* TPHFT                     X                                         *
*---------------------------------------------------------------------*
* Program Change History                                              *
*---------------------------------------------------------------------*
*Date        Version   Author       TR#/Local     Description         *
*---------------------------------------------------------------------*
*06-20-2022  Initial   Soumya Ray   Local   To update parameter values*
*                                           for profile               *
*---------------------------------------------------------------------*
REPORT zcm_rz10_upd_profilepara_upd.

FORM get_config
               TABLES lt_input  STRUCTURE tab512
                      lt_output STRUCTURE tab512.

  CONSTANTS: lc_sep           TYPE c VALUE '|'               LENGTH 1,
             lc_update        TYPE c VALUE 'U'               LENGTH 1,
             lc_insert        TYPE c VALUE 'I'               LENGTH 1,
             lc_nodate        TYPE sy-datum  VALUE '        ',
             lc_notime        TYPE sy-uzeit  VALUE '      ',
             lc_nprofileread  TYPE c VALUE
             'Issue in reading data of active parameter profil.'
             LENGTH 50,
             lc_noauthority   TYPE c VALUE
             'No authorization to change profiles.'           LENGTH 40,
             lc_noprofstore   TYPE c VALUE
             'Profile data not stored in database.'           LENGTH 40,
             lc_profactivated TYPE c VALUE
             'Profile saved and activated'                    LENGTH 30,
             lc_noexistance   TYPE c VALUE
             'of profile does not exist'                      LENGTH 30,
             lc_version       TYPE c VALUE 'Version'          LENGTH 7,
             lc_profempty     TYPE c VALUE
             'Profile is empty (no parameter data available)' LENGTH 50,
             lc_errorfile     TYPE c VALUE
             'Error opening file'                             LENGTH 18,
             lc_noupdate      TYPE c VALUE
             'Could not update management data of profile'    LENGTH 50,
             lc_wrongversion  TYPE c VALUE
 'Only the most recent version of a profile can be activated' LENGTH 60,
             lc_unknownerror  TYPE c VALUE
             'Unknown error activating profile'               LENGTH 50,
             lc_parametername TYPE spfl_parameter_name
             VALUE 'rdisp/myname',
             lc_opsys_ascs    TYPE c VALUE 'ASCS'             LENGTH 4,
             lc_nodata        TYPE c VALUE 'No data found'    LENGTH 30,
             lc_title         TYPE c VALUE
             'Profile parameter update details'               LENGTH 50,
             lc_profilename   TYPE c VALUE 'Profile name'     LENGTH 12,
             lc_updatemsg     TYPE c VALUE 'Update message'   LENGTH 14,
             lc_nodataupdate  TYPE c VALUE
             'No data passed to update or insert in profile'  LENGTH 50.


  DATA: ls_input         TYPE tab512,
        ls_output        TYPE tab512,
        lv_message       TYPE string,
        lv_action        TYPE c VALUE 1,
        lv_profilename   TYPE pfepfname,
        lv_errormsg      TYPE c LENGTH 80,
        lv_length        TYPE i,
        lv_servername    TYPE spfl_parameter_value,
        lv_servertocheck TYPE msname,
        lv_version       TYPE pfeversnr,
        ls_profileheader TYPE tpfht,
        ls_tpfht         TYPE tpfht,
        ls_tpfet         TYPE tpfet,
        ls_tpfet_update  TYPE tpfet,
        lv_tabix         TYPE sy-tabix,
        lv_count         TYPE i,
        lv_parnr         TYPE pfeparnr,
        lt_input_sub     TYPE STANDARD TABLE OF tab512,
        lt_tpfet_update  TYPE STANDARD TABLE OF tpfet,
        lt_tpfet_insert  TYPE STANDARD TABLE OF tpfet,
        lt_tpfht         TYPE STANDARD TABLE OF tpfht,
        lt_profiletbl_nw TYPE STANDARD TABLE OF tpfet,
        lt_profiletbl    TYPE STANDARD TABLE OF tpfet.

  CLEAR: ls_input, ls_output, lv_length, lv_version, ls_profileheader,
  ls_tpfht, lv_message, lv_errormsg, lv_servertocheck, lv_servername,
  lv_profilename, ls_tpfet, ls_tpfet_update, lv_action, lv_tabix,
  lv_count, lv_parnr.
  FREE: lt_tpfht, lt_profiletbl, lt_tpfet_update, lt_profiletbl_nw,
  lt_input_sub, lt_tpfet_insert.

  "Title
  ls_output = lc_title.
  APPEND ls_output TO lt_output.
  CLEAR ls_output.

  "To get the number of profile to be updated
  DELETE lt_input INDEX 1.
  LOOP AT lt_input INTO ls_input.
    IF ls_input IS NOT INITIAL.
      lv_count = lv_count + 1.
    ELSE.
      lv_tabix = sy-tabix.
      EXIT.
    ENDIF.
  ENDLOOP.

  "In case of no data as input
  IF lv_count EQ 0.
    ls_output = lc_nodata.
    APPEND ls_output TO lt_output.
    CLEAR ls_output.
    RETURN.
  ENDIF.

  "Column heading
  CONCATENATE lc_profilename lc_sep lc_updatemsg INTO ls_output.
  APPEND ls_output TO lt_output.
  CLEAR ls_output.

  WHILE lv_count NE 0.

    lv_count = lv_count - 1.
    lv_tabix = lv_tabix + 1.

    "To get the profile data to be updated
    LOOP AT lt_input INTO ls_input FROM lv_tabix.
      IF ls_input IS NOT INITIAL.
        APPEND ls_input TO lt_input_sub.
      ELSE.
        lv_tabix = sy-tabix.
        EXIT.
      ENDIF.
      CLEAR ls_input.
    ENDLOOP.

    DESCRIBE TABLE lt_input_sub LINES lv_length.

    "To read the profile name
    READ TABLE lt_input_sub INTO ls_input INDEX 1.
    lv_profilename = ls_input.

    IF lv_length > 2.

      "Delete the heading and column heading
      DELETE lt_input_sub FROM 1 TO 2.
      LOOP AT lt_input_sub INTO ls_input.
        SPLIT ls_input AT lc_sep INTO
        ls_tpfet-pfname
        ls_tpfet-versnr
        ls_tpfet-parname
        ls_tpfet-parnr
        ls_tpfet-comnr
        ls_tpfet-dename
        ls_tpfet-chkprg
        ls_tpfet-modprog
        ls_tpfet-crefpf
        ls_tpfet-pstate
        ls_tpfet-pvalue
        lv_action.

        CASE lv_action.
          WHEN lc_update.
            APPEND ls_tpfet TO lt_tpfet_update.
          WHEN lc_insert.
            APPEND ls_tpfet TO lt_tpfet_insert.
          WHEN OTHERS.
            CONTINUE.
        ENDCASE.
        CLEAR: ls_tpfet, lv_action, ls_input.
      ENDLOOP.

      IF lt_tpfet_update IS INITIAL AND
         lt_tpfet_insert IS INITIAL.
        CONCATENATE lv_profilename lc_sep lc_nodata INTO ls_output.
        APPEND ls_output TO lt_output.
        CONTINUE.
      ENDIF.

      "Read the header details of active profile
      SELECT * FROM tpfht INTO TABLE lt_tpfht
      WHERE pfname EQ lv_profilename.
      IF sy-subrc EQ 0.
        "To get the current active profile version
        SORT lt_tpfht BY versnr DESCENDING.
        READ TABLE lt_tpfht INTO ls_tpfht INDEX 1.

*//------ To read current value of profile header and data---//
        CALL FUNCTION 'PFL_READ_PROFILE_FROM_DB'
          EXPORTING
            profile_name          = ls_tpfht-pfname
            profile_version       = ls_tpfht-versnr
          IMPORTING
            profile_header        = ls_profileheader
          TABLES
            dtab                  = lt_profiletbl
          EXCEPTIONS
            pfl_doesnt_exist      = 1
            authorization_missing = 2
            OTHERS                = 3.
        IF sy-subrc <> 0.
* Implement suitable error handling here
          CONCATENATE ls_tpfht-pfname lc_sep lc_nprofileread
          INTO ls_output.
          APPEND ls_output TO lt_output.
          CLEAR ls_output.
          CONTINUE.
        ELSE.
          lv_version = ls_tpfht-versnr + 1.
        ENDIF.
      ELSE.
        lv_version = 1.
      ENDIF.
      ls_profileheader-versnr = lv_version.

*//---------------------------------------------------------//
      ls_profileheader-musr  = sy-uname.
      ls_profileheader-mdate = sy-datum.
      ls_profileheader-mtime = sy-uzeit.
      ls_profileheader-gusr  = space.
      ls_profileheader-gdate = lc_nodate.
      ls_profileheader-gtime = lc_notime.

*//----Logic to change data of parameters-----------------//
      IF lt_tpfet_update IS NOT INITIAL.
        "Update parameter value
        LOOP AT lt_profiletbl INTO ls_tpfet.
          READ TABLE lt_tpfet_update INTO ls_tpfet_update
          WITH KEY pfname = ls_tpfet-pfname
          parname = ls_tpfet-parname.
          IF sy-subrc EQ 0.
            ls_tpfet-pvalue = ls_tpfet_update-pvalue. "Value change
          ENDIF.
          ls_tpfet-versnr = lv_version.
          APPEND ls_tpfet TO lt_profiletbl_nw.
          CLEAR: ls_tpfet_update, ls_tpfet.
        ENDLOOP.
      ELSE.
        LOOP AT lt_profiletbl INTO ls_tpfet.
          ls_tpfet-versnr = lv_version.
          APPEND ls_tpfet TO lt_profiletbl_nw.
          CLEAR ls_tpfet.
        ENDLOOP.
      ENDIF.

      "Insert profile name
      IF lt_tpfet_insert IS NOT INITIAL.
        CLEAR lv_parnr.
        SORT lt_profiletbl BY parnr DESCENDING.
        READ TABLE lt_profiletbl INTO ls_tpfet INDEX 1.
        lv_parnr = ls_tpfet-parnr.

        LOOP AT lt_tpfet_insert INTO ls_tpfet_update.

          MOVE-CORRESPONDING ls_tpfet_update TO ls_tpfet.
          ls_tpfet-versnr = lv_version. "Version

          "Consecutive number of parameter in profile calculation
          lv_parnr = lv_parnr + 1.
          ls_tpfet-parnr = lv_parnr.

          APPEND ls_tpfet TO lt_profiletbl_nw.
          CLEAR: ls_tpfet_update, ls_tpfet.
        ENDLOOP.
      ENDIF.

      IF lt_profiletbl_nw IS INITIAL.
        CONCATENATE ls_tpfht-pfname lc_sep lc_nodataupdate
        INTO ls_output.
        APPEND ls_output TO lt_output.
        CLEAR ls_output.
        CONTINUE.
      ENDIF.

*//-------------------------------------------------------//

      CALL FUNCTION 'PFL_WRITE_PROFILE_TO_DB'
        EXPORTING
          profile_header = ls_profileheader
        TABLES
          dtab           = lt_profiletbl_nw
        EXCEPTIONS
          OTHERS         = 99.
      IF sy-subrc = 1.
        CONCATENATE ls_tpfht-pfname lc_sep lc_noauthority
        INTO ls_output.
        APPEND ls_output TO lt_output.
        CLEAR ls_output.
        CONTINUE.
      ELSEIF sy-subrc NE 0.
        CONCATENATE ls_tpfht-pfname lc_sep lc_noprofstore
        INTO ls_output.
        APPEND ls_output TO lt_output.
        CLEAR ls_output.
        CONTINUE.
      ENDIF.

      "Fetch server name
      cl_spfl_profile_parameter=>get_value(
      EXPORTING
        name        = lc_parametername
      IMPORTING
        value       = lv_servername ).

      IF lv_servername EQ ls_profileheader-servername OR
      ls_profileheader-opsys = lc_opsys_ascs.
        lv_servertocheck = space.
      ELSE.
        lv_servertocheck = ls_profileheader-servername.
      ENDIF.

      "Activate profile
      CALL FUNCTION 'PFL_ACTIVATE_PROFILE'
        DESTINATION lv_servertocheck
        EXPORTING
          fully_qualified_profilename = ls_profileheader-pffile
          profile_name                = ls_profileheader-pfname
          profile_version             = ls_profileheader-versnr
          profile_type                = ls_profileheader-type
        EXCEPTIONS
          pfl_doesnt_exist            = 1
          pfl_is_empty                = 2
          pfl_open_error              = 3
          pfl_header_update_error     = 4
          version_is_not_youngest     = 5
          communication_failure       = 6 MESSAGE lv_errormsg
          authorization_missing       = 7
          OTHERS                      = 99.
      CASE sy-subrc.
        WHEN 0.
          CONCATENATE ls_tpfht-pfname lc_sep lc_profactivated
          INTO ls_output.
        WHEN 1.
          CONCATENATE lc_version ls_profileheader-versnr lc_noexistance
          INTO lv_message SEPARATED BY space.
          CONCATENATE ls_tpfht-pfname lc_sep lv_message INTO ls_output.
        WHEN 2.
          CONCATENATE ls_tpfht-pfname lc_sep lc_profempty
          INTO ls_output.
        WHEN 3.
          CONCATENATE lc_errorfile ls_profileheader-pffile
          INTO lv_message SEPARATED BY space.
          CONCATENATE ls_tpfht-pfname lc_sep lv_message
          INTO ls_output.
        WHEN 4.
          CONCATENATE ls_tpfht-pfname lc_sep lc_noupdate
          INTO ls_output.
        WHEN 5.
          CONCATENATE ls_tpfht-pfname lc_sep lc_wrongversion
          INTO ls_output.
        WHEN 6.
          CONCATENATE ls_tpfht-pfname lc_sep lv_errormsg
          INTO ls_output.
        WHEN 7.
          CONCATENATE ls_tpfht-pfname lc_sep lc_noauthority
          INTO ls_output.
        WHEN OTHERS.
          CONCATENATE ls_tpfht-pfname lc_sep lc_unknownerror
          INTO ls_output.
      ENDCASE.

      APPEND ls_output TO lt_output.

    ELSE.
      "No data passed in input
      CONCATENATE lv_profilename lc_sep lc_nodata INTO ls_output.
      APPEND ls_output TO lt_output.
    ENDIF.

    CLEAR: ls_input, ls_output, lv_length, lv_version, ls_profileheader,
    ls_tpfht, lv_message, lv_errormsg, lv_servertocheck, lv_servername,
    lv_profilename,  ls_tpfet, ls_tpfet_update, lv_action, lv_parnr.
    FREE: lt_tpfht, lt_profiletbl, lt_tpfet_update, lt_profiletbl_nw,
    lt_input_sub, lt_tpfet_insert.
  ENDWHILE.

ENDFORM.