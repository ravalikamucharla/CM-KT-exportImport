*---------------------------------------------------------------------*
* Program Name        :  ZCM_STRUST_IMP_PSE_CERTIFICATE               *
* Title               :  PSE replace and certificate list import      *
* Purpose             :  This report is used to replace PSE           *
*                     :  if instance is different and to import       *
*                     :  certificates to STRUST post migration        *
*---------------------------------------------------------------------*
* Transaction OR Standard Program References                          *
* STRUST or STRUSTSSO2                                                *
*---------------------------------------------------------------------*
* Tables              :   SELECT    UPDATE      INSERT      DELETE    *
* SSF_PSE_H           :     X                                         *
* SSF_PSE_T           :     X                                         *
* SSF_PSE_D           :     X                                         *
* STRUSTSSLS          :     X                                         *
* STRUSTSSL           :     X                                         *
* STRUSTWSSE          :     X                                         *
* STRUSTSMIM          :     X                                         *
* SSFARGS             :     X                                         *
* SSFVKEYDEF          :     X                                         *
* STRUSTSSLST         :     X                                         *
* STRUSTSSLT          :     X                                         *
* STRUSTWSSET         :     X                                         *
* STRUSTSMIMT         :     X                                         *
* SSFAPPLICT          :     X                                         *
* SSFVARGST           :     X                                         *
*---------------------------------------------------------------------*
*Program History                                                      *
*---------------------------------------------------------------------*
*Date        Version   Author       TR#/Local     Description         *
*---------------------------------------------------------------------*
*11-10-2020  Initial   Ashwini B G   NA           To replace PSE      *
*                                                 and to import       *
*                                                 cert to STRUST      *
*---------------------------------------------------------------------*
REPORT zcm_strust_imp_pse_certificate.

TYPES: BEGIN OF gty_ssls,
         node       TYPE char80,
         host       TYPE ssf_pse_h-host,
         instanceno TYPE ssf_pse_h-instanceid,
         distname   TYPE certattrs-subject,
         algorithm  TYPE char3,
         key        TYPE char4,
         sign_alg   TYPE char40,
       END OF gty_ssls,

       gtt_ssls TYPE STANDARD TABLE OF gty_ssls.

CLASS lcl_certificate_import DEFINITION.

  PUBLIC SECTION.

* Replace PSE in STRUST
    METHODS: replace_pse
      IMPORTING it_prog   TYPE gtt_ssls
      EXPORTING it_output TYPE STANDARD TABLE.

* Replace SSLS PSE in STRUST
    METHODS: replace_ssls_pse
      IMPORTING it_ssls   TYPE gtt_ssls
      EXPORTING it_output TYPE STANDARD TABLE.

* Import certificates to PSEs
    METHODS: import_pse_certificates
      IMPORTING iv_context TYPE psecontext
                iv_applic  TYPE ssfargs-applic
                is_certb64 TYPE string
      EXPORTING is_output  TYPE tab512.

ENDCLASS.

FORM get_config
              TABLES ft_input  STRUCTURE tab512
                     ft_output STRUCTURE tab512.

  CONSTANTS: lc_sep        TYPE c  VALUE '|'            LENGTH 1,
             lc_act_repl   TYPE c  VALUE 'REPL'         LENGTH 4,
             lc_act_import TYPE c  VALUE 'IMPORT'       LENGTH 6,
             lc_title      TYPE c  VALUE 'Certificates' LENGTH 12,
             lc_column     TYPE c  VALUE
             'Certificate Messages'                     LENGTH 25,
             lc_inc_in     TYPE c  VALUE
             'Incorrect Input'                          LENGTH 15,
             lc_no_in      TYPE c  VALUE
             'No input given'                           LENGTH 15,
             lc_context    TYPE c  VALUE 'SSLS'         LENGTH 4,
             lc_msg        TYPE c  VALUE 'for PSE'      LENGTH 7,
             lc_msg1       TYPE c  VALUE
             'Certificate was added to PSE'             LENGTH 80.


  TYPES: BEGIN OF lty_certdata,
           node TYPE char80,
           data TYPE string,
         END OF lty_certdata,

         BEGIN OF lty_ssls,
           node       TYPE char80,
           host       TYPE ssf_pse_h-host,
           instanceno TYPE ssf_pse_h-instanceid,
           distname   TYPE certattrs-subject,
           algorithm  TYPE char3,
           key        TYPE char4,
           sign_alg   TYPE char40,
         END OF lty_ssls.

  DATA: ls_input              TYPE tab512,
        ls_output             TYPE tab512,
        lt_certdata           TYPE STANDARD TABLE OF lty_certdata,
        ls_certdata           TYPE lty_certdata,
        lo_certificate_import TYPE REF TO lcl_certificate_import,
        lv_node_key           TYPE char10,
        lo_not_found          TYPE REF TO cx_sy_itab_line_not_found,
        lv_action             TYPE char10,
        lv_node               TYPE char80,
        lv_host               TYPE ssf_pse_h-host,
        lv_instanceno         TYPE ssf_pse_h-instanceid,
        lv_distname           TYPE certattrs-subject,
        lv_algorithm          TYPE char3,
        lv_key                TYPE char4,
        lv_sign_alg           TYPE char40,
        lt_certb64            TYPE STANDARD TABLE OF string,
        ls_certb64            TYPE string,
        lt_input              TYPE STANDARD TABLE OF tab512,
        lt_output             TYPE STANDARD TABLE OF tab512,
        lt_ssls               TYPE STANDARD TABLE OF lty_ssls,
        ls_ssls               TYPE lty_ssls,
        lt_prog               TYPE STANDARD TABLE OF lty_ssls,
        ls_prog               TYPE lty_ssls.

  FREE: ft_output.

  " Title
  ls_output = lc_title.
  APPEND ls_output TO ft_output.
  CLEAR: ls_output.

  "Column Heading
  ls_output = lc_column.
  APPEND ls_output TO ft_output.
  CLEAR: ls_output.

  " Clear variables before use
  CLEAR: ls_input,
         lv_action,
         lv_node.

  " Read input values from Python
  READ TABLE ft_input INTO ls_input INDEX 2.
  IF sy-subrc EQ 0.
    SPLIT ls_input AT lc_sep INTO
    lv_action
    lv_node.
  ELSE.
    ls_output = lc_no_in.
    APPEND ls_output TO ft_output.
    CLEAR: ls_output.
    RETURN.
  ENDIF.

  CASE lv_action.

    WHEN lc_act_repl.  "REPLACE

      CLEAR: ls_input,
             lv_action,
             lv_node,
             lv_host,
             lv_instanceno,
             lv_distname,
             lv_algorithm,
             lv_key,
             lv_sign_alg.

      FREE: lt_ssls[],
            lt_prog[].

      " Read input values from Python
      LOOP AT ft_input INTO ls_input.
        IF sy-tabix EQ 1.
          CONTINUE.
        ENDIF.
        SPLIT ls_input AT lc_sep INTO
        lv_action
        lv_node
        lv_host
        lv_instanceno
        lv_distname
        lv_algorithm
        lv_key
        lv_sign_alg.

        " Get node key for the node
        CLEAR: lv_node_key.
        PERFORM get_node_key USING lv_node
                             CHANGING lv_node_key.

        CLEAR: ls_ssls,ls_prog.
        IF lv_node_key(4) EQ lc_context. "SSLS
          SPLIT ls_input AT lc_sep INTO
          lv_action
          ls_ssls-node
          ls_ssls-host
          ls_ssls-instanceno
          ls_ssls-distname
          ls_ssls-algorithm
          ls_ssls-key
          ls_ssls-sign_alg.
          APPEND ls_ssls TO lt_ssls.
        ELSE.
          SPLIT ls_input AT lc_sep INTO
          lv_action
          ls_prog-node
          ls_prog-host
          ls_prog-instanceno
          ls_prog-distname
          ls_prog-algorithm
          ls_prog-key
          ls_prog-sign_alg.
          APPEND ls_prog TO lt_prog.
        ENDIF.
      ENDLOOP.

      " Instantiating a class object
      CREATE OBJECT lo_certificate_import.

      IF lt_prog[] IS NOT INITIAL.

        CALL METHOD lo_certificate_import->replace_pse
          EXPORTING
            it_prog   = lt_prog
          IMPORTING
            it_output = lt_output.

        ft_output[] = lt_output[].

      ENDIF.

      IF lt_ssls[] IS NOT INITIAL.

        SORT: lt_ssls[] BY node host.

        CALL METHOD lo_certificate_import->replace_ssls_pse
          EXPORTING
            it_ssls   = lt_ssls
          IMPORTING
            it_output = lt_output.

        ft_output[] = lt_output[].

      ENDIF.

    WHEN lc_act_import.   "IMPORT

      CLEAR: ls_input.
      LOOP AT ft_input INTO ls_input.
        IF sy-tabix EQ 1.
          CONTINUE.
        ENDIF.
        IF ls_input CP '*BEGIN CERTIFICATE*'.
          DATA(lv_index) = sy-tabix.
          LOOP AT ft_input INTO ls_input FROM lv_index.
            ls_certdata-data = ls_input.
            APPEND ls_certdata TO lt_certdata.
            IF ls_input CP '*END CERTIFICATE*'.
              DELETE TABLE ft_input FROM ls_input.
              EXIT.
            ENDIF.
            DELETE TABLE ft_input FROM ls_input.
            CLEAR: ls_certdata,ls_input.
          ENDLOOP.
        ELSE.
          SPLIT ls_input AT lc_sep INTO
          lv_action
          ls_certdata-node
          DATA(lv_cert_name)
          DATA(lv_validfrom_date)
          DATA(lv_validfrom_time)
          DATA(lv_validto_date)
          DATA(lv_validto_time)
          DATA(lv_algid)
          DATA(lv_keystrength)
          DATA(lv_sigalg).
        ENDIF.
        CLEAR: ls_input.
      ENDLOOP.

      " Instantiating a class object
      CREATE OBJECT lo_certificate_import.

      " get certificate as xstring
      LOOP AT lt_certdata INTO ls_certdata.

        DATA(lv_pse_name) = ls_certdata-node.

        " Get node key for the node
        PERFORM get_node_key USING ls_certdata-node
                             CHANGING lv_node_key.

        FREE: lt_certb64[].
        CLEAR: lv_index.
        IF ls_certdata-data CP '*BEGIN CERTIFICATE*'.
          lv_index = sy-tabix.
          lv_index = lv_index + 1.
          LOOP AT lt_certdata INTO ls_certdata FROM lv_index.
            IF ls_certdata-data NP '*END CERTIFICATE*'.
              ls_certb64 = ls_certdata-data.
              APPEND ls_certb64 TO lt_certb64.
              DELETE TABLE lt_certdata FROM ls_certdata.
            ELSE.
              DELETE TABLE lt_certdata FROM ls_certdata.
              EXIT.
            ENDIF.
            CLEAR: ls_certdata,ls_certb64.
          ENDLOOP.
        ENDIF.

        CONCATENATE LINES OF lt_certb64 INTO ls_certb64.

        " Read the system PSE descriptions
        CALL METHOD lo_certificate_import->import_pse_certificates
          EXPORTING
            iv_context = lv_node_key(4)
            iv_applic  = lv_node_key+4(6)
            is_certb64 = ls_certb64
          IMPORTING
            is_output  = ls_output.

        IF ls_output IS NOT INITIAL.
          CONCATENATE ls_output lc_msg lv_pse_name
          INTO ls_output SEPARATED BY space.
          APPEND ls_output TO ft_output.
        ELSE.
          "Certificate was added to PSE XXXX
          CLEAR: ls_output.
          CONCATENATE lc_msg1 lv_pse_name
          INTO ls_output SEPARATED BY space.
          APPEND ls_output TO ft_output.
        ENDIF.
        CLEAR: ls_output,lv_pse_name.
      ENDLOOP.

    WHEN OTHERS.

      ls_output = lc_inc_in.
      APPEND ls_output TO ft_output.
      CLEAR: ls_output.
      RETURN.

  ENDCASE.

ENDFORM.

*&---------------------------------------------------------------------*
*& Class (Implementation) lcl_certificate_import
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
CLASS lcl_certificate_import IMPLEMENTATION.

  METHOD import_pse_certificates.

    CONSTANTS: lc_pse_type TYPE c  VALUE 'LPSE'          LENGTH 4,
               lc_msgid    TYPE c  VALUE '1S'            LENGTH 2,
               lc_msgno1   TYPE c  VALUE '522'           LENGTH 3,
               lc_release  TYPE c  VALUE '751'           LENGTH 3,
               lc_context  TYPE c  VALUE 'wsse'          LENGTH 4,
               lc_applic   TYPE c  VALUE 'wsscrt'        LENGTH 6,
               lc_msg      TYPE c  VALUE
               'Certificate was not loaded correctly'    LENGTH 80,
               lc_msg1     TYPE c  VALUE
               'Not able to read certificate contents'   LENGTH 80,
               lc_msg2     TYPE c  VALUE
               'Certificate already exists'              LENGTH 80,
               lc_ssls     TYPE c  VALUE 'SSLS'          LENGTH 4,
               lc_msg3     TYPE c  VALUE
               'Failed to get memory PSE from BLOB'      LENGTH 80,
               lc_msg4     TYPE c  VALUE
               'Update to database failed'               LENGTH 80,
               lc_msg5     TYPE c  VALUE
               'Could not parse new pse'                 LENGTH 80,
               lc_msg6     TYPE c  VALUE
               'Could not parse pse from db'             LENGTH 80,
               lc_msg7     TYPE c  VALUE
               'Could not put cert'                      LENGTH 80,
               lc_msg8     TYPE c  VALUE
               'Could not store pse to db'               LENGTH 80,
               lc_sign     TYPE c  VALUE 'S'             LENGTH 1,
               lc_x        TYPE c  VALUE 'X'             LENGTH 1,
               lc_pse      TYPE c  VALUE 'SAPSSL'        LENGTH 6,
               lc_msg9     TYPE c  VALUE
               'Failed to get memory PSE from BLOB'      LENGTH 80,
               lc_prog     TYPE c  VALUE 'PROG'          LENGTH 4,
               lc_sncs     TYPE c  VALUE '<SNCS>'        LENGTH 6,
               lc_msg10    TYPE c  VALUE
               'PSE is not created'                      LENGTH 20.

    " Certificate data
    TYPES: BEGIN OF lty_cert_struct,
             bindata    TYPE xstring,
             binlength  TYPE i,
             subject    TYPE certattrs-subject,
             issuer     TYPE certattrs-issuer,
             snumber    TYPE certattrs-snumber,
             fingerpr   TYPE certattrs-fingerpr,
             datefrom   TYPE datum,
             timefrom   TYPE uzeit,
             dateto     TYPE datum,
             timeto     TYPE uzeit,
             algid      TYPE certalgoid,
             serialint  TYPE string,
             keytype    TYPE string,
             keylength  TYPE string,
             fpsha1     TYPE hash160,
             sigavail   TYPE abap_bool,
             selected   TYPE c LENGTH 1,
             email      TYPE string,
             subjectalt TYPE string,
             sigalg     TYPE string,
             subjectstr TYPE string,
             issuerstr  TYPE string,
           END OF lty_cert_struct,

           " PSE data
           BEGIN OF lty_pse_struct,
             context     TYPE psecontext,
             applic      TYPE ssfargs-applic,
             description TYPE text30,
             filename    TYPE ssf_pse_h-filename,
             host        TYPE ssf_pse_h-host,
             instanceid  TYPE ssf_pse_h-instanceid,
             profile     TYPE ssfargs-profile,
             profilepw   TYPE ssfargs-profilepw,
             profileid   TYPE ssfargs-profileid,
             owncert     TYPE lty_cert_struct,
             temppse     TYPE REF TO cl_abap_pse,
             signinfo    TYPE char50,
             fallback    TYPE c LENGTH 1,
             distributed TYPE ssfargs-distrib,
             selfsigned  TYPE c LENGTH 1,
             loaded      TYPE c LENGTH 1,
             readonly    TYPE c LENGTH 1,
             modified    TYPE c LENGTH 1,
             pinchanged  TYPE c LENGTH 1,
             owntrust    TYPE abap_bool,
             hasroot     TYPE c LENGTH 1,
           END OF lty_pse_struct.

    DATA: ls_input             TYPE tab512,
          lv_validfrom         TYPE string,
          lv_validto           TYPE string,
          lv_fpsha1            TYPE hash160x,
          lo_certificate       TYPE REF TO cl_abap_x509_certificate,
          lv_sigalg            TYPE string,
          lv_sigalg_oid        TYPE string,
          lr_mempse            TYPE REF TO cl_abap_pse,
          lv_pseblob           TYPE xstring,
          lv_psepin            TYPE ssfpabpw,
          lv_psename           TYPE ssfpsename,
          lv_psetext           TYPE strustappltxt,
          lv_profile           TYPE localfile,
          lv_rc                TYPE i,
          lv_valid             TYPE abap_bool,
          ls_pse_h             TYPE ssf_pse_h,
          ls_pse               TYPE lty_pse_struct,
          lv_keyversion        TYPE ssfvkeydef-keyversion,
          lv_keystrength       TYPE string,
          lv_action            TYPE char10,
          ls_imsxxlist         TYPE msxxlist,
          lt_imsxxlist         TYPE STANDARD TABLE OF msxxlist,
          lv_psepin1           TYPE ssfparms-pabpw,
          lv_id                TYPE ssf_pse_h-id,
          lv_name              TYPE ssf_pse_h-name,
          lv_pseblob1          TYPE xstring,
          lv_standalone        TYPE x VALUE '01',
          lt_server            TYPE msxxlist_t,
          ls_server            TYPE msxxlist,
          lr_abap_pse          TYPE REF TO cx_abap_pse,
          lv_host              TYPE ssf_pse_h-host,
          lv_instanceno        TYPE ssf_pse_h-instanceid,
          lo_not_found         TYPE REF TO cx_sy_itab_line_not_found,
          lo_strust_sapcontrol TYPE REF TO object,
          lv_newid             TYPE ssf_pse_h-id,
          lv_newdn             TYPE ssfflag,
          ls_newcert           TYPE ssfbintab,
          lv_oldblob           TYPE xstring,
          lo_oldpse            TYPE REF TO cl_abap_pse,
          ls_oldcert           TYPE ssfbintab,
          ls_cert1             TYPE xstring,
          lv_b_host            TYPE c LENGTH 1,
          lv_b_inst            TYPE c LENGTH 1,
          lv_signed            TYPE ssf_pse_h-signed,
          lv_pse_sign          TYPE c LENGTH 1,
          lv_host_name         TYPE syhost,
          lv_instance_id       TYPE numc2,
          lv_pinchg            TYPE c LENGTH 1,
          lt_psename_t         TYPE STANDARD TABLE OF ssfpsename,
          ls_psename_s         TYPE ssfpsename,
          lv_b_instanceid      TYPE c LENGTH 1,  "flag
          lv_b_cred            TYPE c LENGTH 1,
          lv_b1_host           TYPE ssfflag, "SPACE or 'X'
          lv_b1_instanceid     TYPE ssfflag,
          lv_b1_cred           TYPE ssfflag,
          lv_errservname       TYPE c LENGTH 1,
          lv_pincred           TYPE ssfparms-pabpw,
          lt_psebin            TYPE STANDARD TABLE OF ssfbin,
          ls_psebin            TYPE ssfbin,
          lv_len               TYPE i,
          lv_certificate       TYPE xstring,
          ls_certb64           TYPE string,
          lo_certobj           TYPE REF TO cl_abap_x509_certificate,
          lt_pse_h             TYPE STANDARD TABLE OF ssf_pse_h,
          lv_msg               TYPE string.

    FIELD-SYMBOLS: <data_tab> TYPE table,
                   <data_any> TYPE any.

    " Read the certificate value(XSTRING)
    ASSIGN is_certb64 TO <data_any>.

    TRY.

        CREATE OBJECT lo_certobj
          EXPORTING
            if_certificate = <data_any>.

        lv_certificate = lo_certobj->get_certificate( ).
      CATCH cx_abap_x509_certificate.

    ENDTRY.

    " initialize cert structure
    CLEAR: lv_rc, ls_pse-owncert.
    ls_pse-owncert-bindata   = lv_certificate.
    ls_pse-owncert-binlength = xstrlen( lv_certificate ).
    IF ls_pse-owncert-binlength = 0.
      "Certificate was not loaded correctly
      CLEAR: is_output.
      is_output = lc_msg.
      RETURN.
    ENDIF.
    ls_pse-owncert-timefrom = ls_pse-owncert-timeto = '        '.

    " parse certificate
    CALL FUNCTION 'SSFC_PARSE_CERTIFICATE'
      EXPORTING
        certificate         = lv_certificate
      IMPORTING
        subject             = ls_pse-owncert-subject
        issuer              = ls_pse-owncert-issuer
        serialno            = ls_pse-owncert-snumber
        validfrom           = lv_validfrom
        validto             = lv_validto
        algid               = ls_pse-owncert-algid
        fingerprint         = ls_pse-owncert-fingerpr
        serialint           = ls_pse-owncert-serialint
        keytype             = ls_pse-owncert-keytype
        keylength           = ls_pse-owncert-keylength
        fingerprintsha1     = lv_fpsha1
        sigavailable        = ls_pse-owncert-sigavail
      EXCEPTIONS
        ssf_krn_error       = 1
        ssf_krn_nomemory    = 2
        ssf_krn_nossflib    = 3
        ssf_krn_invalid_par = 4
        OTHERS              = 5.
    IF sy-subrc NE 0.
      "Not able to read certificate contents
      CLEAR: is_output.
      is_output = lc_msg1.
      RETURN.
    ENDIF.

    " get validity information
    ls_pse-owncert-datefrom = lv_validfrom(8).
    ls_pse-owncert-timefrom = lv_validfrom+8(6).
    ls_pse-owncert-dateto   = lv_validto(8).
    ls_pse-owncert-timeto   = lv_validto+8(6).

    " handle fingerprints
    IF ls_pse-owncert-sigavail = space.
      CLEAR: ls_pse-owncert-fingerpr, ls_pse-owncert-fpsha1.
    ELSE.
      ls_pse-owncert-fpsha1 = lv_fpsha1.
    ENDIF.

    " read email address and subject alternative name
    CLEAR: ls_pse-owncert-email, lv_sigalg,
           ls_pse-owncert-subjectstr,
           ls_pse-owncert-issuerstr.

    ls_pse-owncert-subjectalt = '?'.

    TRY.
        lo_certificate =
        cl_abap_x509_certificate=>get_instance( lv_certificate ).

        ls_pse-owncert-subjectalt =
        lo_certificate->get_subject_alt_string(
     if_format = cl_abap_x509_certificate=>co_format_secude_legacy ).

        ls_pse-owncert-email =
        to_lower( lo_certificate->get_certentry_value(
        if_cert_entry  =
        cl_abap_x509_certificate=>co_entry_subjectalt
        if_xoid_filter =
        cl_abap_x509_certificate=>co_oid_rfc822name ) ).

        IF ls_pse-owncert-email IS INITIAL.
          ls_pse-owncert-email =
          to_lower( lo_certificate->get_certentry_value(
          if_cert_entry  = cl_abap_x509_certificate=>co_entry_subject
         if_xoid_filter = cl_abap_x509_certificate=>co_oid_email ) ).
        ENDIF.

        lv_sigalg_oid = lo_certificate->get_signature_alg_oid( ).

        ls_pse-owncert-subjectstr =
        lo_certificate->get_subject_string(
     if_format = cl_abap_x509_certificate=>co_format_secude_legacy ).

        ls_pse-owncert-issuerstr =
        lo_certificate->get_issuer_string(
     if_format = cl_abap_x509_certificate=>co_format_secude_legacy ).

        " following attributes are CCL dependend and might
        " throw an exception if CCL is too old.
        lv_sigalg = lo_certificate->get_sig_alg( ).
        lv_keystrength = lo_certificate->get_key_strength( ).
      CATCH cx_abap_x509_certificate.
        " OID WAS NOT UNIQUE
    ENDTRY.

    IF lv_sigalg IS INITIAL.
      " try to determine signature algorithm
      CASE lv_sigalg_oid.
        WHEN 'id-dsa-with-sha1 (OID 1.2.840.10040.4.3)'.
          MESSAGE s130(trust) INTO lv_sigalg.
        WHEN 'md5WithRSAEncryption (OID 1.2.840.113549.1.1.4)'.
          MESSAGE s131(trust) INTO lv_sigalg.
        WHEN 'sha1WithRsaEncryption (OID 1.2.840.113549.1.1.5)'.
          MESSAGE s132(trust) INTO lv_sigalg.
        WHEN 'sha256WithRsaEncryption (OID 1.2.840.113549.1.1.11)'.
          MESSAGE s133(trust) INTO lv_sigalg.
        WHEN 'sha384WithRsaEncryption (OID 1.2.840.113549.1.1.12)'.
          MESSAGE s134(trust) INTO lv_sigalg.
        WHEN 'sha512WithRsaEncryption (OID 1.2.840.113549.1.1.13)'.
          MESSAGE s135(trust) INTO lv_sigalg.
        WHEN 'sha224WithRsaEncryption (OID 1.2.840.113549.1.1.14)'.
          MESSAGE s136(trust) INTO lv_sigalg.
        WHEN 'dsa-with-sha224 (OID 2.16.840.1.101.3.4.3.1)'.
          MESSAGE s137(trust) INTO lv_sigalg.
        WHEN 'dsa-with-sha256 (OID 2.16.840.1.101.3.4.3.2)'.
          MESSAGE s138(trust) INTO lv_sigalg.
      ENDCASE.
    ENDIF.
    ls_pse-owncert-sigalg = lv_sigalg.
    IF lv_keystrength IS NOT INITIAL.
      ls_pse-owncert-keylength = lv_keystrength.
    ENDIF.

    " Set parameter of pse
    ls_pse-context   = iv_context.
    ls_pse-applic    = iv_applic.

    CLEAR: lv_psename.
    " Get PSE name and description
    CALL FUNCTION 'SSFPSE_FILENAME'
      EXPORTING
        context       = ls_pse-context
        applic        = ls_pse-applic
        keyversion    = lv_keyversion
      IMPORTING
        psename       = lv_psename
        profile       = lv_profile
        psetext       = lv_psetext
      EXCEPTIONS
        pse_not_found = 1
        OTHERS        = 2.
    IF sy-subrc EQ 0.
      " Get the specified pse key(ssf_pse_h-name).
      SELECT *
        FROM ssf_pse_h
        INTO TABLE lt_pse_h BYPASSING BUFFER
        WHERE filename = lv_psename.
      IF sy-subrc NE 0.
        " Give error if PSE is not created in system
        CLEAR: is_output.
        is_output = lc_msg10.
        RETURN.
      ENDIF.
    ENDIF.

    ls_pse-description = lv_psetext.
    ls_pse-filename = lv_psename.
    ls_pse-profile = lv_profile.

* Read correct PSE from database based on host value

    IF lv_host IS INITIAL.
      CLEAR: ls_pse_h.
      READ TABLE lt_pse_h INTO ls_pse_h WITH KEY host = space.
      IF sy-subrc EQ 0.
        ls_pse-profileid = ls_pse_h-id.
        ls_pse-host = ls_pse_h-host.
        ls_pse-instanceid = ls_pse_h-instanceid.
      ENDIF.

      " Read out pse from database
      IF ls_pse_h-type = lc_pse_type.
        CLEAR: lv_pseblob.
        SELECT SINGLE bindata
          FROM  ssf_pse_t
          INTO  lv_pseblob BYPASSING BUFFER
          WHERE name = ls_pse_h-name.
      ELSE. "pse_s-type = 'PSE'
        CLEAR: ls_psebin.
        SELECT bindata
          FROM ssf_pse_d BYPASSING BUFFER
          INTO ls_psebin-bindata
          WHERE name = ls_pse_h-name
          ORDER BY seqno.
          APPEND ls_psebin TO lt_psebin.
        ENDSELECT.

        " Copy pse table to blob
        CLEAR: lv_pseblob,ls_psebin.
        LOOP AT lt_psebin INTO ls_psebin.
          CONCATENATE lv_pseblob ls_psebin-bindata
          INTO lv_pseblob IN BYTE MODE.
          CLEAR: ls_psebin.
        ENDLOOP.
        IF ls_pse_h-datalen > 0.
          lv_pseblob = lv_pseblob(ls_pse_h-datalen).
        ENDIF.
      ENDIF.

      IF lv_pseblob IS NOT INITIAL.
        " Create memory PSE from BLOB
        CLEAR: lv_psepin.
        TRY.
            CREATE OBJECT lr_mempse
              EXPORTING
                iv_pse    = lv_pseblob
                iv_pse_pw = lv_psepin.
          CATCH cx_abap_pse .
            CLEAR lr_mempse.
        ENDTRY.
      ENDIF.

    ELSE.

      CLEAR: ls_pse_h.
      READ TABLE lt_pse_h INTO ls_pse_h
      WITH KEY host       = lv_host
               instanceid = lv_instanceno.
      IF sy-subrc NE 0.
        CLEAR: ls_pse_h.
        READ TABLE lt_pse_h INTO ls_pse_h
        WITH KEY host = space.
        IF sy-subrc EQ 0.
          ls_pse-profileid  = ls_pse_h-id.
          ls_pse-host       = ls_pse_h-host.
          ls_pse-instanceid = ls_pse_h-instanceid.
        ENDIF.
      ELSE.
        ls_pse-profileid  = ls_pse_h-id.
        ls_pse-host       = ls_pse_h-host.
        ls_pse-instanceid = ls_pse_h-instanceid.
      ENDIF.

      " Read out pse from database
      IF ls_pse_h-type = lc_pse_type.
        CLEAR: lv_pseblob.
        SELECT SINGLE bindata
          FROM  ssf_pse_t
          INTO  lv_pseblob BYPASSING BUFFER
          WHERE name = ls_pse_h-name.
      ELSE. "pse_s-type = 'PSE'
        CLEAR: ls_psebin.
        SELECT bindata
          FROM ssf_pse_d BYPASSING BUFFER
          INTO ls_psebin-bindata
          WHERE name = ls_pse_h-name
          ORDER BY seqno.
          APPEND ls_psebin TO lt_psebin.
        ENDSELECT.

        " Copy pse table to blob
        CLEAR: lv_pseblob,ls_psebin.
        LOOP AT lt_psebin INTO ls_psebin.
          CONCATENATE lv_pseblob ls_psebin-bindata
          INTO lv_pseblob IN BYTE MODE.
          CLEAR: ls_psebin.
        ENDLOOP.
        IF ls_pse_h-datalen > 0.
          lv_pseblob = lv_pseblob(ls_pse_h-datalen).
        ENDIF.
      ENDIF.

      IF lv_pseblob IS NOT INITIAL.
        " Create memory PSE from BLOB
        CLEAR: lv_psepin.
        TRY.
            CREATE OBJECT lr_mempse
              EXPORTING
                iv_pse    = lv_pseblob
                iv_pse_pw = lv_psepin.
          CATCH cx_abap_pse .
            CLEAR lr_mempse.
        ENDTRY.
      ENDIF.

    ENDIF.

    IF lr_mempse IS NOT INITIAL.
      ls_pse-temppse = lr_mempse.

      TRY.
          " Add certificate to the list
          CALL METHOD ls_pse-temppse->add_trusted_certificate
            EXPORTING
              iv_certificate = ls_pse-owncert-bindata
              iv_add_to_cab  = abap_false.
        CATCH cx_abap_pse INTO lr_abap_pse.

          IF lr_abap_pse->if_t100_message~t100key-msgid  EQ lc_msgid
          AND lr_abap_pse->if_t100_message~t100key-msgno EQ lc_msgno1.
            "Certificate already exists
            CLEAR: is_output.
            is_output = lc_msg2.
            RETURN.
          ELSE.
            CLEAR: is_output,lv_msg.
            " Error occurred during import
            MESSAGE s008(trust) INTO lv_msg.
            is_output = lv_msg.
            RETURN.
          ENDIF.
          RETURN.
      ENDTRY.
    ENDIF.

    IF ls_pse-context = lc_context
    AND ls_pse-applic = lc_applic.
      CALL FUNCTION 'STRUSTCAB_ADD_CERTIFICATE'
        EXPORTING
          if_certificate  = ls_pse-owncert-bindata
        EXCEPTIONS
          invalid_cert    = 1
          hash_error      = 2
          already_exists  = 3
          collision_found = 4
          OTHERS          = 5.
      IF sy-subrc NE 0.
        CLEAR: lv_msg,is_output.
        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                INTO lv_msg
                WITH  sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
        is_output = lv_msg.
        RETURN.
      ENDIF.
    ENDIF.

    " Get the active servers list
    FREE: lt_imsxxlist[].
    CALL FUNCTION 'TH_SERVER_LIST'
      TABLES
        list           = lt_imsxxlist
      EXCEPTIONS
        no_server_list = 1
        OTHERS         = 2.
    IF sy-subrc EQ 0.
      SORT lt_imsxxlist BY name AS TEXT.
    ENDIF.

    " Dynamically instantiating the object as class
    " 'CL_STRUST_SAPCONTROL' is not available in SAP systems with
    " release version less than 751

    IF sy-saprl GE lc_release. " 751

      IF lo_strust_sapcontrol IS INITIAL.
        CREATE OBJECT lo_strust_sapcontrol
        TYPE ('CL_STRUST_SAPCONTROL').
      ENDIF.

      " Get the message server
      FREE: lt_server[].
      CALL METHOD lo_strust_sapcontrol->('GET_STANDALONE_INSTANCES')
        IMPORTING
          rt_servers          = lt_server
        EXCEPTIONS
          not_authorized      = 1
          communication_error = 2
          OTHERS              = 3.
      IF sy-subrc EQ 0.
        CLEAR: ls_server,ls_imsxxlist.
        LOOP AT lt_server INTO ls_server.
          MOVE-CORRESPONDING ls_server TO ls_imsxxlist.
          ls_imsxxlist-msgtypes = 0.
          ADD lv_standalone TO ls_imsxxlist-msgtypes.
          APPEND ls_imsxxlist TO lt_imsxxlist.
          CLEAR: ls_imsxxlist,ls_server.
        ENDLOOP.
      ENDIF.

    ENDIF.

* Below code is to save the certificate response

    " Set parameter of new pse
    IF iv_context = lc_ssls.

      ls_pse-context   = iv_context.
      ls_pse-applic    = iv_applic.

      CLEAR: lv_psename.
      " Get PSE name and description
      CALL FUNCTION 'SSFPSE_FILENAME'
        EXPORTING
          context       = ls_pse-context
          applic        = ls_pse-applic
          keyversion    = lv_keyversion
        IMPORTING
          psename       = lv_psename
        EXCEPTIONS
          pse_not_found = 1
          OTHERS        = 2.
      IF sy-subrc EQ 0.
        ls_pse-filename = lv_psename.
      ENDIF.

      " Get key and id of old pse
      CLEAR: lv_id,lv_name.
      SELECT SINGLE name id
        FROM ssf_pse_h
        INTO ( lv_name,lv_id )
        WHERE filename EQ lv_psename
        AND   host     EQ lv_host
        AND instanceid EQ lv_instanceno.
      IF sy-subrc EQ 0.
        DATA(lv_newkey) = lv_name.
        DATA(lv_oldid)  = lv_id.
      ENDIF.

      " Get dn of new pse
      PERFORM readout_pse_ownid USING    ls_pse-temppse
                                CHANGING lv_newid lv_rc.
      IF lv_rc NE 0.     " and not oldid is initial.
        lv_newid = lv_oldid.
      ELSEIF lv_newid <> lv_oldid.
        lv_newdn = 'X'.
      ENDIF.

      " Store to Data Base
      CLEAR: lv_psepin1.
      lv_psepin1 = ' '.


      CLEAR: lv_pseblob1.
      TRY.
          lv_pseblob1 = ls_pse-temppse->get_mem_pse_blob( ).
        CATCH cx_abap_pse.
          IF lv_pseblob1 IS INITIAL.
            "Failed to get memory PSE from BLOB
            CLEAR: is_output.
            is_output = lc_msg3.
            RETURN.
          ENDIF.
          RETURN.
      ENDTRY.

      " Store to database
      CALL FUNCTION 'SSFPSE_STORE_BLOB'
        EXPORTING
          pseblob           = lv_pseblob1
          psepin            = lv_psepin1
          psename           = ls_pse-filename
          id                = lv_newid
          host              = lv_host
          instanceid        = lv_instanceno
          b_newdn           = lv_newdn
        EXCEPTIONS
          file_load_failed  = 1
          storing_failed    = 2
          authority_missing = 3
          OTHERS            = 4.
      IF sy-subrc NE 0.
        "Update to database failed
        CLEAR: is_output.
        is_output = lc_msg4.
        RETURN.
      ENDIF.

      " retrieve certlist of new pse
      TRY.
          CALL METHOD ls_pse-temppse->get_trusted_certificates
            IMPORTING
              et_certificate_list = ls_newcert.
        CATCH cx_abap_pse.
          "Could not parse new pse
          CLEAR: is_output.
          is_output = lc_msg5.
          RETURN.
      ENDTRY.

      " update all other pses on db
      LOOP AT lt_pse_h INTO ls_pse_h.

        " skip if pse is new pse
        IF ls_pse_h-name = lv_newkey.
          CONTINUE.
        ENDIF.

        " load old pse from database
        CALL FUNCTION 'SSFPSE_LOAD'
          EXPORTING
            psename           = lv_psename
            host              = ls_pse_h-host
            instanceid        = ls_pse_h-instanceid
          IMPORTING
            pseblob           = lv_oldblob
          EXCEPTIONS
            authority_missing = 1
            database_failed   = 2
            file_write_failed = 3
            OTHERS            = 4.
        IF sy-subrc <> 0.
          "Update to database failed
          CLEAR: is_output.
          is_output = lc_msg4.
          RETURN.
        ENDIF.

        lv_psepin = ' '.

        TRY.
            IF lo_oldpse IS BOUND.
              lo_oldpse->clean_up( ).
            ENDIF.

            CREATE OBJECT lo_oldpse
              EXPORTING
                iv_pse    = lv_oldblob
                iv_pse_pw = lv_psepin.
          CATCH cx_abap_pse.
            CLEAR:lo_oldpse.
        ENDTRY.

        " retrieve certlist of old pse
        CLEAR: ls_oldcert[].
        TRY.
            CALL METHOD lo_oldpse->get_trusted_certificates
              IMPORTING
                et_certificate_list = ls_oldcert.
          CATCH cx_abap_pse.
            "Could not parse pse from db
            CLEAR: is_output.
            is_output = lc_msg6.
            RETURN.
        ENDTRY.

        " get dn of pse
        CLEAR lv_oldid.
        PERFORM readout_pse_ownid USING lo_oldpse
                                  CHANGING lv_oldid lv_rc.
        IF lv_rc NE 0.
          lv_oldid = ls_pse_h-id.
        ENDIF.

        CLEAR: ls_cert1.
        LOOP AT ls_newcert INTO ls_cert1.
          TRY.
              CALL METHOD lo_oldpse->add_trusted_certificate
                EXPORTING
                  iv_certificate = ls_cert1.
            CATCH cx_abap_pse.
              "Could not put cert
              CLEAR: is_output.
              is_output = lc_msg7.
              RETURN.
          ENDTRY.
        ENDLOOP. " at newcert

        " store pse back to db
        CLEAR: lv_oldblob.
        TRY.
            lv_oldblob = lo_oldpse->get_mem_pse_blob( ).
          CATCH cx_abap_pse.
            "Could not store pse to db
            CLEAR: is_output.
            is_output = lc_msg8.
            RETURN.
        ENDTRY.

        CALL FUNCTION 'SSFPSE_STORE_BLOB'
          EXPORTING
            pseblob           = lv_oldblob
            psepin            = ' '
            psename           = lv_psename
            id                = lv_oldid
            host              = ls_pse_h-host
            instanceid        = ls_pse_h-instanceid
          EXCEPTIONS
            file_load_failed  = 1
            storing_failed    = 2
            authority_missing = 3
            OTHERS            = 4.
        IF sy-subrc NE 0.
          "Update to database failed
          CLEAR: is_output.
          is_output = lc_msg4.
          RETURN.
        ENDIF.
      ENDLOOP.

      " Update local pses on application server
      FREE: lt_pse_h[].
      CLEAR: ls_imsxxlist.
      LOOP AT lt_imsxxlist INTO ls_imsxxlist.
        CLEAR: lv_b_host, lv_b_inst.
        CLEAR: lv_rc.

        lv_pse_sign = ' '.

        IF lv_pse_sign(1) = lc_sign.
          lv_signed = lc_x.
        ENDIF.

        SELECT *
          FROM ssf_pse_h
          INTO TABLE lt_pse_h
          WHERE filename = lv_psename.

        IF ls_imsxxlist-name IS INITIAL.

          IF lv_pse_sign IS INITIAL.
            READ TABLE lt_pse_h INDEX 1 TRANSPORTING NO FIELDS.
          ELSE.
            READ TABLE lt_pse_h WITH KEY signed = lv_signed
                                TRANSPORTING NO FIELDS.
          ENDIF.

        ELSE.

          CLEAR: lv_len,lv_instance_id.
          lv_len = strlen( ls_imsxxlist-name ).

          " Get instance id
          SUBTRACT 2 FROM lv_len.
          IF lv_len >= 0.
            lv_instance_id = ls_imsxxlist-name+lv_len(2).
          ELSE.
            CLEAR lv_instance_id.
          ENDIF.

          " Get host name
          CLEAR: lv_host_name.
          SUBTRACT 5 FROM lv_len.
          IF lv_len > 0.
            lv_host_name = ls_imsxxlist-name(lv_len).
          ELSE.
            CLEAR lv_host_name.
          ENDIF.

          IF lv_pse_sign IS INITIAL.
            READ TABLE lt_pse_h WITH KEY host       = lv_host_name
                                         instanceid = lv_instance_id
                                TRANSPORTING NO FIELDS.
          ELSE.
            READ TABLE lt_pse_h WITH KEY host       = lv_host_name
                                         instanceid = lv_instance_id
                                         signed     = lv_signed
                                TRANSPORTING NO FIELDS.
          ENDIF.
        ENDIF.

        IF sy-subrc NE 0.
          lv_rc = 1.
        ENDIF.

        IF lv_rc EQ 0.
          lv_b_host = lc_x.
          lv_b_inst = lc_x.
        ENDIF.

        IF ls_imsxxlist-msgtypes O lv_standalone.
          IF lv_psename(6) EQ lc_pse. "SAPSSL

            IF sy-saprl GE lc_release. "751

              IF lo_strust_sapcontrol IS INITIAL.
                CREATE OBJECT lo_strust_sapcontrol
                TYPE ('CL_STRUST_SAPCONTROL').
              ENDIF.
              CALL METHOD lo_strust_sapcontrol->('STORE_PSE')
                EXPORTING
                  destination         = ls_imsxxlist-name
                  psename             = lv_psename
                EXCEPTIONS
                  not_authorized      = 1
                  communication_error = 2
                  database_failed     = 3
                  OTHERS              = 4.
              IF sy-subrc NE 0.
                lv_rc = -1.
              ENDIF.
            ENDIF.
          ENDIF.
          CONTINUE.
        ENDIF.

        CALL FUNCTION 'SSFPSE_UPDATED'
          DESTINATION
          ls_imsxxlist-name
          EXPORTING
            psename                = lv_psename
            b_host                 = lv_b_host
            b_instanceid           = lv_b_inst
          EXCEPTIONS
            authority_missing      = 1
            ssf_krn_nomemory       = 2
            ssf_krn_nossflib       = 3
            ssf_krn_invalid_par    = 4
            ssf_krn_invalid_parlen = 5
            ssf_krn_error          = 6
            database_failed        = 7
            unknown_error          = 8
            OTHERS                 = 9.
        IF sy-subrc NE 0.
          lv_rc = -1.
        ENDIF.
      ENDLOOP.

    ELSE.

      " Set parameter of new pse
      ls_pse-context   = iv_context.
      ls_pse-applic    = iv_applic.

      CLEAR: lv_psename.
      " Get PSE name and description
      CALL FUNCTION 'SSFPSE_FILENAME'
        EXPORTING
          context       = ls_pse-context
          applic        = ls_pse-applic
          keyversion    = lv_keyversion
        IMPORTING
          psename       = lv_psename
        EXCEPTIONS
          pse_not_found = 1
          OTHERS        = 2.
      IF sy-subrc EQ 0.
        ls_pse-filename = lv_psename.
      ENDIF.

      " Get DN of PSE
      CLEAR: lv_id.
      SELECT SINGLE id
        FROM ssf_pse_h
        INTO lv_id
        WHERE filename EQ lv_psename
        AND   host     EQ ' '.
      IF sy-subrc EQ 0.
        ls_pse-profileid = lv_id.
      ENDIF.

      " Store to Data Base
      CLEAR: lv_psepin1,lv_id.
      lv_psepin1 = ls_pse-profilepw.
      lv_id      = ls_pse-profileid.

      CLEAR: lv_pseblob1,is_output.
      TRY.
          lv_pseblob1 = ls_pse-temppse->get_mem_pse_blob( ).
        CATCH cx_abap_pse.
          IF lv_pseblob1 IS INITIAL.
            "Failed to get memory PSE from BLOB
            is_output = lc_msg9.
          ENDIF.
          RETURN.
      ENDTRY.

      " Always create credentials for sncs pse
      CLEAR: lv_pinchg.
      IF ls_pse-context = lc_prog AND ls_pse-applic = lc_sncs.
        lv_pinchg = lc_x.
      ENDIF.

      " Store to database
      CALL FUNCTION 'SSFPSE_STORE_BLOB'
        EXPORTING
          pseblob           = lv_pseblob1
          psepin            = lv_psepin1
          psename           = ls_pse-filename
          id                = lv_id
          b_pinchg          = lv_pinchg
        EXCEPTIONS
          file_load_failed  = 1
          storing_failed    = 2
          authority_missing = 3
          OTHERS            = 4.
      IF sy-subrc NE 0.
        "Update to database failed
        CLEAR: is_output.
        is_output = lc_msg4.
        RETURN.
      ENDIF.

      IF ls_pse-filename IS INITIAL.
        CLEAR: ls_imsxxlist.
        LOOP AT lt_imsxxlist INTO ls_imsxxlist
           WHERE NOT msgtypes O lv_standalone.
          CALL FUNCTION 'SSFPSE_UPDATED'
            DESTINATION
            ls_imsxxlist-name
            IMPORTING
              crc                    = lv_rc
            EXCEPTIONS
              authority_missing      = 1
              ssf_krn_nomemory       = 2
              ssf_krn_nossflib       = 3
              ssf_krn_invalid_par    = 4
              ssf_krn_invalid_parlen = 5
              ssf_krn_error          = 6
              database_failed        = 7
              unknown_error          = 8
              OTHERS                 = 9.
          IF sy-subrc <> 0 OR lv_rc NE 0.
            lv_rc = 1.
          ENDIF.
        ENDLOOP.

        FREE: lt_psename_t[].
        SELECT DISTINCT filename
          FROM ssf_pse_h
          INTO TABLE lt_psename_t.

        IF sy-saprl GE lc_release. "751

          CLEAR: ls_imsxxlist.
          LOOP AT lt_imsxxlist INTO ls_imsxxlist
             WHERE msgtypes O lv_standalone.

            IF lo_strust_sapcontrol IS INITIAL.
              CREATE OBJECT lo_strust_sapcontrol
              TYPE ('CL_STRUST_SAPCONTROL').
            ENDIF.

            CLEAR: ls_psename_s.
            LOOP AT lt_psename_t INTO ls_psename_s.
              IF ls_psename_s(6) NE lc_pse.
                CONTINUE.
              ENDIF.
              CALL METHOD lo_strust_sapcontrol->('STORE_PSE')
                EXPORTING
                  destination         = ls_imsxxlist-name
                  psename             = ls_psename_s
                IMPORTING
                  rc                  = lv_rc
                EXCEPTIONS
                  not_authorized      = 1
                  communication_error = 2
                  database_failed     = 3
                  OTHERS              = 4.
              IF sy-subrc <> 0 OR lv_rc <> 0.
                lv_rc = 1.
              ENDIF.

              CALL METHOD
              lo_strust_sapcontrol->('CREATE_PSE_CREDENTIAL')
                EXPORTING
                  destination         = ls_imsxxlist-name
                  psename             = ls_psename_s
                IMPORTING
                  rc                  = lv_rc
                EXCEPTIONS
                  not_authorized      = 1
                  communication_error = 2
                  OTHERS              = 3.
              IF sy-subrc <> 0 OR lv_rc <> 0.
                lv_rc = 1.
              ENDIF.
            ENDLOOP.
          ENDLOOP.
        ENDIF.
        RETURN.
      ENDIF.

      lv_b_host = ' '.
      lv_b_instanceid = ' '.
      lv_b_cred = lv_pinchg.

      CLEAR: lv_b1_host.
      IF NOT lv_b_host IS INITIAL.
        lv_b1_host = lc_x.
      ENDIF.

      CLEAR: lv_b1_instanceid.
      IF NOT lv_b_instanceid IS INITIAL.
        lv_b1_instanceid = lc_x.
      ENDIF.

      CLEAR: lv_b1_cred.
      IF NOT lv_b_cred IS INITIAL.
        lv_b1_cred = lc_x.
      ENDIF.

      CLEAR: ls_imsxxlist.
      LOOP AT lt_imsxxlist INTO ls_imsxxlist.
        IF ls_imsxxlist-msgtypes O lv_standalone.

          IF sy-saprl EQ lc_release. "751

            IF lv_psename(6) EQ lc_pse.

              IF lo_strust_sapcontrol IS INITIAL.
                CREATE OBJECT lo_strust_sapcontrol
                TYPE ('CL_STRUST_SAPCONTROL').
              ENDIF.

              CALL METHOD lo_strust_sapcontrol->('STORE_PSE')
                EXPORTING
                  destination         = ls_imsxxlist-name
                  psename             = lv_psename
                IMPORTING
                  rc                  = lv_rc
                EXCEPTIONS
                  not_authorized      = 1
                  communication_error = 2
                  database_failed     = 3
                  OTHERS              = 4.
              IF sy-subrc <> 0 OR lv_rc <> 0.
                lv_rc = 1.
                lv_errservname = ls_imsxxlist-name.
              ENDIF.

              IF NOT lv_b1_cred IS INITIAL.
                CALL METHOD
                lo_strust_sapcontrol->('CREATE_PSE_CREDENTIAL')
                  EXPORTING
                    destination         = ls_imsxxlist-name
                    psename             = lv_psename
                    pin                 = lv_pincred
                  IMPORTING
                    rc                  = lv_rc
                  EXCEPTIONS
                    not_authorized      = 1
                    communication_error = 2
                    OTHERS              = 3.
                IF sy-subrc <> 0 OR lv_rc <> 0.
                  lv_rc = 1.
                  lv_errservname = ls_imsxxlist-name.
                ENDIF.
              ENDIF.
            ENDIF.
          ENDIF.

        ELSE.

          CALL FUNCTION 'SSFPSE_UPDATED'
            DESTINATION
            ls_imsxxlist-name
            EXPORTING
              psename                = lv_psename
              b_host                 = lv_b1_host
              b_instanceid           = lv_b1_instanceid
              b_credentials          = lv_b1_cred
              pincredentials         = lv_pincred
            IMPORTING
              crc                    = lv_rc
            EXCEPTIONS
              authority_missing      = 1
              ssf_krn_nomemory       = 2
              ssf_krn_nossflib       = 3
              ssf_krn_invalid_par    = 4
              ssf_krn_invalid_parlen = 5
              ssf_krn_error          = 6
              system_failure         = 7
              communication_failure  = 8
              OTHERS                 = 9.
          IF sy-subrc NE 0 OR lv_rc NE 0.
            lv_rc = 1.
            lv_errservname = ls_imsxxlist-name.
          ENDIF.
        ENDIF.
      ENDLOOP.

    ENDIF.

  ENDMETHOD.

  METHOD replace_pse.

    CONSTANTS: lc_sep     TYPE c VALUE '|'            LENGTH 1,
               lc_length  TYPE c VALUE '1024'         LENGTH 4,
               lc_set     TYPE c VALUE 'X'            LENGTH 1,
               lc_context TYPE c VALUE 'SSLS'         LENGTH 4,
               lc_colan   TYPE c VALUE ':'            LENGTH 1,
               lc_release TYPE c VALUE '751'          LENGTH 3,
               lc_title   TYPE c VALUE 'Certificates' LENGTH 12,
               lc_column  TYPE c VALUE
               'Certificate Messages'                 LENGTH 25,
               lc_msg     TYPE c VALUE
               'PSE update failed'                    LENGTH 80,
               lc_msg1    TYPE c VALUE
               'Error while creating PSE'             LENGTH 80,
               lc_ssfa    TYPE c VALUE 'SSFA'         LENGTH 4,
               lc_prog    TYPE c VALUE 'PROG'         LENGTH 4,
               lc_file    TYPE c VALUE '<FILE>'       LENGTH 6,
               lc_msg2    TYPE c VALUE
               'PSE is locked by user'                LENGTH 80,
               lc_msg3    TYPE c VALUE
               'Internal error while locking PSE'     LENGTH 80,
               lc_msg4    TYPE c VALUE
               'Error occurred during deletion'       LENGTH 80,
               lc_msg5    TYPE c VALUE 'PSE'          LENGTH 3,
               lc_msg6    TYPE c VALUE
               'replaced successfully'                LENGTH 80,
               lc_msg7    TYPE c VALUE
               'but update to database failed'        LENGTH 80.

    " Certificate data
    TYPES: BEGIN OF lty_cert_struct,
             bindata    TYPE xstring,
             binlength  TYPE i,
             subject    TYPE certattrs-subject,
             issuer     TYPE certattrs-issuer,
             snumber    TYPE certattrs-snumber,
             fingerpr   TYPE certattrs-fingerpr,
             datefrom   TYPE datum,
             timefrom   TYPE uzeit,
             dateto     TYPE datum,
             timeto     TYPE uzeit,
             algid      TYPE certalgoid,
             serialint  TYPE string,
             keytype    TYPE string,
             keylength  TYPE string,
             fpsha1     TYPE hash160,
             sigavail   TYPE abap_bool,
             selected   TYPE c LENGTH 1,
             email      TYPE string,
             subjectalt TYPE string,
             sigalg     TYPE string,
             subjectstr TYPE string,
             issuerstr  TYPE string,
           END OF lty_cert_struct,

           " PSE data
           BEGIN OF lty_pse_struct,
             context     TYPE psecontext,
             applic      TYPE ssfargs-applic,
             description TYPE text30,
             filename    TYPE ssf_pse_h-filename,
             host        TYPE ssf_pse_h-host,
             instanceid  TYPE ssf_pse_h-instanceid,
             profile     TYPE ssfargs-profile,
             profilepw   TYPE ssfargs-profilepw,
             profileid   TYPE ssfargs-profileid,
             owncert     TYPE lty_cert_struct,
             temppse     TYPE REF TO cl_abap_pse,
             signinfo    TYPE char50,
             fallback    TYPE c LENGTH 1,
             distributed TYPE ssfargs-distrib,
             selfsigned  TYPE c LENGTH 1,
             loaded      TYPE c LENGTH 1,
             readonly    TYPE c LENGTH 1,
             modified    TYPE c LENGTH 1,
             pinchanged  TYPE c LENGTH 1,
             owntrust    TYPE abap_bool,
             hasroot     TYPE c LENGTH 1,
           END OF lty_pse_struct.

    DATA: ls_input             TYPE tab512,
          ls_output            TYPE tab512,
          lv_host              TYPE ssf_pse_h-host,
          lv_instanceno        TYPE ssf_pse_h-instanceid,
          lo_not_found         TYPE REF TO cx_sy_itab_line_not_found,
          lv_server_host       TYPE ssf_pse_h-host,
          lv_len               TYPE i,
          lv_distname          TYPE certattrs-subject,
          lv_algorithm         TYPE char3,
          lv_keylength         TYPE ssfkeylen,
          lv_ccl_alg           TYPE string,
          lv_pseblob           TYPE xstring,
          lv_msg               TYPE string,
          lv_key               TYPE char4,
          lv_alg               TYPE ssfpkalg,
          lv_node              TYPE char80,
          lv_sign_alg          TYPE char40,
          lv_psepin            TYPE ssfpabpw,
          lv_psename           TYPE ssfpsename,
          lv_context           TYPE psecontext,
          lv_applic            TYPE ssfargs-applic,
          lv_standalone        TYPE x VALUE '01',
          lt_server            TYPE msxxlist_t,
          ls_server            TYPE msxxlist,
          ls_imsxxlist         TYPE msxxlist,
          lt_imsxxlist         TYPE STANDARD TABLE OF msxxlist,
          lo_strust_sapcontrol TYPE REF TO object,
          lv_id                TYPE ssf_pse_h-id,
          lv_failure           TYPE c LENGTH 1,
          lv_action            TYPE char10,
          lv_node_key          TYPE char10,
          lt_sslsdn            TYPE STANDARD TABLE OF ssf_pse_h,
          ls_sslsdn            TYPE ssf_pse_h,
          ls_sslsdnwa          TYPE ssf_pse_h,
          lv_distrib           TYPE ssfflag,
          lv_profile           TYPE localfile,
          lv_rc                TYPE ssfparms-ssfcrc,
          lv_tempname          TYPE ssfparms-pab,
          lt_certlist          TYPE ssfbintab,
          ls_certlist          TYPE xstring,
          lv_keepcertlist      TYPE abap_bool,
          ls_pse               TYPE lty_pse_struct,
          lv_uname             TYPE sy-msgv1,
          lv_crc               TYPE i,
          lv_credname          TYPE icm_credname.

    " Title
    ls_output = lc_title.
    APPEND ls_output TO it_output.
    CLEAR: ls_output.

    "Column Heading
    ls_output = lc_column.
    APPEND ls_output TO it_output.
    CLEAR: ls_output.

    " Clear variables before use
    CLEAR: lv_node,
           lv_host,
           lv_instanceno,
           lv_distname,
           lv_algorithm,
           lv_key,
           lv_sign_alg.


    LOOP AT it_prog INTO DATA(ls_prog).
      lv_node       = ls_prog-node.
      lv_host       = ls_prog-host.
      lv_instanceno = ls_prog-instanceno.
      lv_distname   = ls_prog-distname.
      lv_algorithm  = ls_prog-algorithm.
      lv_key        = ls_prog-key.
      lv_sign_alg   = ls_prog-sign_alg.

      " Get node key for the node
      PERFORM get_node_key USING lv_node
                           CHANGING lv_node_key.

      " Build CCL algorithm
      CONCATENATE lv_algorithm lc_colan lv_key
      lc_colan lv_sign_alg INTO lv_ccl_alg.

      CLEAR: lv_keylength,lv_alg.

      lv_keylength = lc_length.

      lv_alg = lc_set.

      CLEAR: lv_context,lv_applic.
      " Set parameter of new pse
      lv_context   = lv_node_key(4).
      lv_applic    = lv_node_key+4(6).

      CLEAR: lv_psename.
      " Get PSE name and description
      CALL FUNCTION 'SSFPSE_FILENAME'
        EXPORTING
          context       = lv_context
          applic        = lv_applic
        IMPORTING
          psename       = lv_psename
          profile       = lv_profile
          distrib       = lv_distrib
        EXCEPTIONS
          pse_not_found = 1
          OTHERS        = 2.
      IF sy-subrc EQ 0.
        ls_pse-filename = lv_psename.
      ENDIF.

      IF lv_distrib = lc_set.
        CALL FUNCTION 'SSFPSE_UPDATED'
          EXPORTING
            psename      = lv_psename
            b_host       = lc_set
            b_instanceid = lc_set
          IMPORTING
            crc          = lv_rc
          EXCEPTIONS
            OTHERS       = 1.
        IF sy-subrc NE 0 OR lv_rc NE 0.
          CLEAR: ls_output.
          "PSE update failed
          ls_output = lc_msg.
          APPEND ls_output TO it_output.
          RETURN.
        ENDIF.
      ENDIF.

      CLEAR: lv_tempname.
      lv_tempname = lv_profile.
      CALL FUNCTION 'SSFC_GET_CERTIFICATELIST'
        EXPORTING
          profile         = lv_tempname
        IMPORTING
          certificatelist = lt_certlist
        EXCEPTIONS
          OTHERS          = 0.

      IF lt_certlist[] IS NOT INITIAL.
        lv_keepcertlist = '1'.
      ENDIF.

      " Create new PSE
      CLEAR: lv_msg,lv_pseblob,
             ls_output.
      CALL FUNCTION 'SSFPSE_CREATE'
        EXPORTING
          dn                = lv_distname
          alg               = lv_alg
          keylen            = lv_keylength
          cclalg            = lv_ccl_alg
        IMPORTING
          pseblob           = lv_pseblob
        EXCEPTIONS
          ssf_unknown_error = 1
          OTHERS            = 2.
      IF sy-subrc NE 0.
        "Error while creating PSE XXXX
        CLEAR: ls_output.
        CONCATENATE lc_msg1 lv_node
        INTO ls_output SEPARATED BY space.
        APPEND ls_output TO it_output.
        DELETE FROM ssf_pse_h WHERE filename EQ lv_psename.
        RETURN.
      ENDIF.

      CLEAR: lv_psepin,lv_id.
      lv_psepin  = ' '.
      lv_id      = lv_distname.

      TRY.
          IF ls_pse-temppse IS BOUND.
            ls_pse-temppse->clean_up( ).
          ENDIF.
          CREATE OBJECT ls_pse-temppse
            EXPORTING
              iv_pse    = lv_pseblob
              iv_pse_pw = lv_psepin.
        CATCH cx_abap_pse .
          CLEAR ls_pse-temppse.
      ENDTRY.

      " set output parameter
      IF lv_context = lc_ssfa.
        ls_pse-distributed = ' '.
      ELSEIF lv_context = lc_prog AND lv_applic = lc_file.
        CLEAR: ls_pse-distributed.
      ELSE.
        ls_pse-distributed = lc_set.
      ENDIF.

      " check if pse is locked on db
      IF ls_pse-distributed = lc_set.
        PERFORM check_dbpse_locked
          USING    ls_pse-filename
          CHANGING lv_uname lv_rc.
        IF lv_rc NE 0.
          IF lv_rc = 1.
            "PSE is locked by user XXXX
            CLEAR: ls_output.
            CONCATENATE lc_msg2 lv_uname
            INTO ls_output SEPARATED BY space.
            APPEND ls_output TO it_output.
          ELSE.
            "Internal error while locking PSE
            CLEAR: ls_output.
            ls_output = lc_msg3.
            APPEND ls_output TO it_output.
          ENDIF.
          TRY.
              ls_pse-temppse->clean_up( ).
            CATCH cx_abap_pse.
          ENDTRY.
          RETURN.
        ENDIF.
      ENDIF.

      " check if old pse must be deleted
      CLEAR lv_rc.
      " check if one wants to keep the existing certificate list
      IF lv_keepcertlist = lc_set.
        LOOP AT lt_certlist INTO ls_certlist.
          TRY.
              CALL METHOD ls_pse-temppse->add_trusted_certificate
                EXPORTING
                  iv_certificate = ls_certlist.
            CATCH cx_abap_pse.
              TRY.
                  ls_pse-temppse->clean_up( ).
                CATCH cx_abap_pse.
              ENDTRY.
          ENDTRY.
        ENDLOOP.
      ENDIF.

      " Get the active servers list
      FREE: lt_imsxxlist[].
      CALL FUNCTION 'TH_SERVER_LIST'
        TABLES
          list           = lt_imsxxlist
        EXCEPTIONS
          no_server_list = 1
          OTHERS         = 2.
      IF sy-subrc EQ 0.
        SORT lt_imsxxlist BY name AS TEXT.
      ENDIF.

      " Dynamically instantiating the object as class
      " 'CL_STRUST_SAPCONTROL' is not available in SAP systems with
      " release version less than 751

      IF sy-saprl GE lc_release. " 751

        IF lo_strust_sapcontrol IS INITIAL.
          CREATE OBJECT lo_strust_sapcontrol
          TYPE ('CL_STRUST_SAPCONTROL').
        ENDIF.

        " Get the message server
        FREE: lt_server[].
        CALL METHOD
        lo_strust_sapcontrol->('GET_STANDALONE_INSTANCES')
          IMPORTING
            rt_servers          = lt_server
          EXCEPTIONS
            not_authorized      = 1
            communication_error = 2
            OTHERS              = 3.
        IF sy-subrc EQ 0.
          CLEAR: ls_server,ls_imsxxlist.
          LOOP AT lt_server INTO ls_server.
            MOVE-CORRESPONDING ls_server TO ls_imsxxlist.
            ls_imsxxlist-msgtypes = 0.
            ADD lv_standalone TO ls_imsxxlist-msgtypes.
            APPEND ls_imsxxlist TO lt_imsxxlist.
            CLEAR: ls_imsxxlist,ls_server.
          ENDLOOP.
        ENDIF.

      ENDIF.

      IF lv_context NE lc_context. "SSLS
        IF ls_pse-distributed IS INITIAL.
          DELETE DATASET ls_pse-profile.
          IF sy-subrc NE 0.
            lv_rc = 2.
          ENDIF.
        ELSE.
          PERFORM delete_distrib_pse
            TABLES   lt_imsxxlist
            USING    ls_pse-filename lv_context lv_applic
            CHANGING lv_rc.
          IF lv_rc > 0.
            "Error occurred during deletion
            CLEAR: ls_output.
            ls_output = lc_msg4.
            APPEND ls_output TO it_output.
            RETURN.
          ENDIF.
        ENDIF.
      ENDIF.

      " Store to database
      CLEAR: lv_failure.
      CALL FUNCTION 'SSFPSE_STORE_BLOB'
        EXPORTING
          pseblob           = lv_pseblob
          psepin            = lv_psepin
          psename           = ls_pse-filename
          id                = lv_id
          b_distribute      = 'X'
        EXCEPTIONS
          file_load_failed  = 1
          storing_failed    = 2
          authority_missing = 3
          OTHERS            = 4.
      IF sy-subrc NE 0.
        " Update to database failed
        lv_failure = lc_set.
      ENDIF.

      IF lv_failure IS NOT INITIAL.
        "PSE XXXX replaced successfully but update to database failed
        CLEAR: ls_output.
        CONCATENATE lc_msg5 lv_node lc_msg6 lc_msg7
        INTO ls_output SEPARATED BY space.
        APPEND ls_output TO it_output.
        RETURN.
      ELSE.
        "PSE XXXX replaced successfully
        CLEAR: ls_output.
        CONCATENATE lc_msg5 lv_node lc_msg6
        INTO ls_output SEPARATED BY space.
        APPEND ls_output TO it_output.
      ENDIF.

    ENDLOOP.

  ENDMETHOD.

  METHOD replace_ssls_pse.

    CONSTANTS: lc_sep     TYPE c VALUE '|'            LENGTH 1,
               lc_length  TYPE c VALUE '1024'         LENGTH 4,
               lc_set     TYPE ssfflag
                                 VALUE 'X',
               lc_context TYPE c VALUE 'SSLS'         LENGTH 4,
               lc_colan   TYPE c VALUE ':'            LENGTH 1,
               lc_release TYPE c VALUE '751'          LENGTH 3,
               lc_title   TYPE c VALUE 'Certificates' LENGTH 12,
               lc_column  TYPE c VALUE
               'Certificate Messages'                 LENGTH 25,
               lc_msg     TYPE c VALUE
               'PSE update failed'                    LENGTH 80,
               lc_msg1    TYPE c VALUE
               'Error while creating PSE'             LENGTH 80,
               lc_ssfa    TYPE c VALUE 'SSFA'         LENGTH 4,
               lc_prog    TYPE c VALUE 'PROG'         LENGTH 4,
               lc_file    TYPE c VALUE '<FILE>'       LENGTH 6,
               lc_msg2    TYPE c VALUE
               'PSE is locked by user'                LENGTH 80,
               lc_msg3    TYPE c VALUE
               'Internal error while locking PSE'     LENGTH 80,
               lc_msg4    TYPE c VALUE
               'Error occurred during deletion'       LENGTH 80,
               lc_msg5    TYPE c VALUE 'PSE'          LENGTH 3,
               lc_msg6    TYPE c VALUE
               'replaced successfully'                LENGTH 80,
               lc_msg7    TYPE c VALUE
               'but update to database failed'        LENGTH 80.


    " Certificate data
    TYPES: BEGIN OF lty_cert_struct,
             bindata    TYPE xstring,
             binlength  TYPE i,
             subject    TYPE certattrs-subject,
             issuer     TYPE certattrs-issuer,
             snumber    TYPE certattrs-snumber,
             fingerpr   TYPE certattrs-fingerpr,
             datefrom   TYPE datum,
             timefrom   TYPE uzeit,
             dateto     TYPE datum,
             timeto     TYPE uzeit,
             algid      TYPE certalgoid,
             serialint  TYPE string,
             keytype    TYPE string,
             keylength  TYPE string,
             fpsha1     TYPE hash160,
             sigavail   TYPE abap_bool,
             selected   TYPE c LENGTH 1,
             email      TYPE string,
             subjectalt TYPE string,
             sigalg     TYPE string,
             subjectstr TYPE string,
             issuerstr  TYPE string,
           END OF lty_cert_struct,

           " PSE data
           BEGIN OF lty_pse_struct,
             context     TYPE psecontext,
             applic      TYPE ssfargs-applic,
             description TYPE text30,
             filename    TYPE ssf_pse_h-filename,
             host        TYPE ssf_pse_h-host,
             instanceid  TYPE ssf_pse_h-instanceid,
             profile     TYPE ssfargs-profile,
             profilepw   TYPE ssfargs-profilepw,
             profileid   TYPE ssfargs-profileid,
             owncert     TYPE lty_cert_struct,
             temppse     TYPE REF TO cl_abap_pse,
             signinfo    TYPE char50,
             fallback    TYPE c LENGTH 1,
             distributed TYPE ssfargs-distrib,
             selfsigned  TYPE c LENGTH 1,
             loaded      TYPE c LENGTH 1,
             readonly    TYPE c LENGTH 1,
             modified    TYPE c LENGTH 1,
             pinchanged  TYPE c LENGTH 1,
             owntrust    TYPE abap_bool,
             hasroot     TYPE c LENGTH 1,
           END OF lty_pse_struct.


    DATA: ls_input             TYPE tab512,
          ls_output            TYPE tab512,
          lv_host              TYPE ssf_pse_h-host,
          lv_instanceno        TYPE ssf_pse_h-instanceid,
          lo_not_found         TYPE REF TO cx_sy_itab_line_not_found,
          lv_server_host       TYPE ssf_pse_h-host,
          lv_len               TYPE i,
          lv_distname          TYPE certattrs-subject,
          lv_algorithm         TYPE char3,
          lv_keylength         TYPE ssfkeylen,
          lv_ccl_alg           TYPE string,
          lv_pseblob           TYPE xstring,
          lv_msg               TYPE string,
          lv_key               TYPE char4,
          lv_alg               TYPE ssfpkalg,
          lv_node              TYPE char80,
          lv_sign_alg          TYPE char40,
          lv_psepin            TYPE ssfpabpw,
          lv_psename           TYPE ssfpsename,
          lv_context           TYPE psecontext,
          lv_applic            TYPE ssfargs-applic,
          lv_standalone        TYPE x VALUE '01',
          lt_server            TYPE msxxlist_t,
          ls_server            TYPE msxxlist,
          ls_imsxxlist         TYPE msxxlist,
          lt_imsxxlist         TYPE STANDARD TABLE OF msxxlist,
          lo_strust_sapcontrol TYPE REF TO object,
          lv_id                TYPE ssf_pse_h-id,
          lv_failure           TYPE c LENGTH 1,
          lv_action            TYPE char10,
          lv_node_key          TYPE char10,
          lt_sslsdn            TYPE STANDARD TABLE OF ssf_pse_h,
          ls_sslsdn            TYPE ssf_pse_h,
          ls_sslsdnwa          TYPE ssf_pse_h,
          lv_distrib           TYPE ssfflag,
          lv_profile           TYPE localfile,
          lv_rc                TYPE ssfparms-ssfcrc,
          lv_tempname          TYPE ssfparms-pab,
          lt_certlist          TYPE ssfbintab,
          ls_certlist          TYPE xstring,
          lv_keepcertlist      TYPE abap_bool,
          ls_pse               TYPE lty_pse_struct,
          lv_uname             TYPE sy-msgv1,
          lv_crc               TYPE i,
          lv_credname          TYPE icm_credname,
          lt_pse_h             TYPE STANDARD TABLE OF ssf_pse_h,
          ls_ssls              TYPE gty_ssls.

    " Title
    ls_output = lc_title.
    APPEND ls_output TO it_output.
    CLEAR: ls_output.

    "Column Heading
    ls_output = lc_column.
    APPEND ls_output TO it_output.
    CLEAR: ls_output.

    " Clear variables before use
    CLEAR: lv_node,
           lv_host,
           lv_instanceno,
           lv_distname,
           lv_algorithm,
           lv_key,
           lv_sign_alg,
           ls_ssls.

    " Read input values from Python
    READ TABLE it_ssls INTO ls_ssls INDEX 1.
    IF sy-subrc EQ 0.
      lv_node       = ls_ssls-node.
      lv_host       = ls_ssls-host.
      lv_instanceno = ls_ssls-instanceno.
      lv_distname   = ls_ssls-distname.
      lv_algorithm  = ls_ssls-algorithm.
      lv_key        = ls_ssls-key.
      lv_sign_alg   = ls_ssls-sign_alg.
    ENDIF.

    " Get node key for the node
    PERFORM get_node_key USING lv_node
                         CHANGING lv_node_key.

    " Build CCL algorithm
    CONCATENATE lv_algorithm lc_colan lv_key
    lc_colan lv_sign_alg INTO lv_ccl_alg.

    CLEAR: lv_keylength,lv_alg.

    lv_keylength = lc_length.

    lv_alg = lc_set.

    CLEAR: lv_context,lv_applic.
    " Set parameter of new pse
    lv_context   = lv_node_key(4).
    lv_applic    = lv_node_key+4(6).

    CLEAR: lv_psename.
    " Get PSE name and description
    CALL FUNCTION 'SSFPSE_FILENAME'
      EXPORTING
        context       = lv_context
        applic        = lv_applic
      IMPORTING
        psename       = lv_psename
        profile       = lv_profile
        distrib       = lv_distrib
      EXCEPTIONS
        pse_not_found = 1
        OTHERS        = 2.
    IF sy-subrc EQ 0.
      ls_pse-filename = lv_psename.
    ENDIF.

    IF lv_distrib = lc_set.
      CALL FUNCTION 'SSFPSE_UPDATED'
        EXPORTING
          psename      = lv_psename
          b_host       = lc_set
          b_instanceid = lc_set
        IMPORTING
          crc          = lv_rc
        EXCEPTIONS
          OTHERS       = 1.
      IF sy-subrc NE 0 OR lv_rc NE 0.
        "PSE update failed
        CLEAR: ls_output.
        ls_output = lc_msg.
        APPEND ls_output TO it_output.
        RETURN.
      ENDIF.
    ENDIF.

    CLEAR: lv_tempname.
    lv_tempname = lv_profile.
    CALL FUNCTION 'SSFC_GET_CERTIFICATELIST'
      EXPORTING
        profile         = lv_tempname
      IMPORTING
        certificatelist = lt_certlist
      EXCEPTIONS
        OTHERS          = 0.

    IF lt_certlist[] IS NOT INITIAL.
      lv_keepcertlist = '1'.
    ENDIF.

    " Create new PSE
    CLEAR: lv_msg,lv_pseblob,
           ls_output.
    CALL FUNCTION 'SSFPSE_CREATE'
      EXPORTING
        dn                = lv_distname
        alg               = lv_alg
        keylen            = lv_keylength
        cclalg            = lv_ccl_alg
      IMPORTING
        pseblob           = lv_pseblob
      EXCEPTIONS
        ssf_unknown_error = 1
        OTHERS            = 2.
    IF sy-subrc NE 0.
      "Error while creating PSE XXXX
      CLEAR: ls_output.
      CONCATENATE lc_msg1 lv_node
      INTO ls_output SEPARATED BY space.
      APPEND ls_output TO it_output.
      DELETE FROM ssf_pse_h WHERE filename EQ lv_psename.
      RETURN.
    ENDIF.

    CLEAR: lv_psepin,lv_id.
    lv_psepin  = ' '.
    lv_id      = lv_distname.

    TRY.
        IF ls_pse-temppse IS BOUND.
          ls_pse-temppse->clean_up( ).
        ENDIF.
        CREATE OBJECT ls_pse-temppse
          EXPORTING
            iv_pse    = lv_pseblob
            iv_pse_pw = lv_psepin.
      CATCH cx_abap_pse .
        CLEAR ls_pse-temppse.
    ENDTRY.

    " set output parameter
    IF lv_context = lc_ssfa.
      ls_pse-distributed = ' '.
    ELSEIF lv_context = lc_prog AND lv_applic = lc_file.
      CLEAR: ls_pse-distributed.
    ELSE.
      ls_pse-distributed = 'X'.
    ENDIF.


    " check if pse is locked on db
    IF ls_pse-distributed = lc_set.
      PERFORM check_dbpse_locked
        USING    ls_pse-filename
        CHANGING lv_uname lv_rc.
      IF lv_rc NE 0.
        IF lv_rc = 1.
          "PSE is locked by user XXXX
          CLEAR: ls_output.
          CONCATENATE lc_msg2 lv_uname
          INTO ls_output SEPARATED BY space.
          APPEND ls_output TO it_output.
        ELSE.
          "Internal error while locking PSE
          CLEAR: ls_output.
          ls_output = lc_msg3.
          APPEND ls_output TO it_output.
        ENDIF.
        TRY.
            ls_pse-temppse->clean_up( ).
          CATCH cx_abap_pse.
        ENDTRY.
        RETURN.
      ENDIF.
    ENDIF.

    " check if old pse must be deleted
    CLEAR lv_rc.
    " check if one wants to keep the existing certificate list
    IF lv_keepcertlist = lc_set.
      LOOP AT lt_certlist INTO ls_certlist.
        TRY.
            CALL METHOD ls_pse-temppse->add_trusted_certificate
              EXPORTING
                iv_certificate = ls_certlist.
          CATCH cx_abap_pse.
            TRY.
                ls_pse-temppse->clean_up( ).
              CATCH cx_abap_pse.
            ENDTRY.
        ENDTRY.
      ENDLOOP.
    ENDIF.

    " Get the active servers list
    FREE: lt_imsxxlist[].
    CALL FUNCTION 'TH_SERVER_LIST'
      TABLES
        list           = lt_imsxxlist
      EXCEPTIONS
        no_server_list = 1
        OTHERS         = 2.
    IF sy-subrc EQ 0.
      SORT lt_imsxxlist BY name AS TEXT.
    ENDIF.

    " Dynamically instantiating the object as class
    " 'CL_STRUST_SAPCONTROL' is not available in SAP systems with
    " release version less than 751

    IF sy-saprl GE lc_release. " 751

      IF lo_strust_sapcontrol IS INITIAL.
        CREATE OBJECT lo_strust_sapcontrol
        TYPE ('CL_STRUST_SAPCONTROL').
      ENDIF.

      " Get the message server
      FREE: lt_server[].
      CALL METHOD lo_strust_sapcontrol->('GET_STANDALONE_INSTANCES')
        IMPORTING
          rt_servers          = lt_server
        EXCEPTIONS
          not_authorized      = 1
          communication_error = 2
          OTHERS              = 3.
      IF sy-subrc EQ 0.
        CLEAR: ls_server,ls_imsxxlist.
        LOOP AT lt_server INTO ls_server.
          MOVE-CORRESPONDING ls_server TO ls_imsxxlist.
          ls_imsxxlist-msgtypes = 0.
          ADD lv_standalone TO ls_imsxxlist-msgtypes.
          APPEND ls_imsxxlist TO lt_imsxxlist.
          CLEAR: ls_imsxxlist,ls_server.
        ENDLOOP.
      ENDIF.

    ENDIF.

    " Store to database
    CLEAR: lv_failure.
    CALL FUNCTION 'SSFPSE_STORE_BLOB'
      EXPORTING
        pseblob           = lv_pseblob
        psepin            = lv_psepin
        psename           = ls_pse-filename
        id                = lv_id
        b_distribute      = lc_set
      EXCEPTIONS
        file_load_failed  = 1
        storing_failed    = 2
        authority_missing = 3
        OTHERS            = 4.
    IF sy-subrc NE 0.
      " Update to database failed
      lv_failure = lc_set.
    ENDIF.

    " IF its SSL server Standard then install
    " new pses (server-ssl)
    IF lv_node_key(4) EQ lc_context. "SSLS

      FREE: lt_sslsdn[].
      LOOP AT it_ssls ASSIGNING FIELD-SYMBOL(<fs_ssls>).
        IF sy-tabix EQ 1.
          CONTINUE.
        ENDIF.
        lv_node                = <fs_ssls>-node.
        ls_sslsdnwa-host       = <fs_ssls>-host.
        ls_sslsdnwa-instanceid = <fs_ssls>-instanceno.
        ls_sslsdnwa-id         = <fs_ssls>-distname.
        lv_algorithm           = <fs_ssls>-algorithm.
        lv_key                 = <fs_ssls>-key.
        lv_sign_alg            = <fs_ssls>-sign_alg.

        APPEND ls_sslsdnwa TO lt_sslsdn.
        CLEAR: ls_sslsdnwa.
      ENDLOOP.

      " check if pse is locked
      PERFORM check_dbpse_locked
      USING    ls_pse-filename
      CHANGING lv_uname lv_rc.
      IF lv_rc <> 0.
        lv_rc = 1.
        "PSE is locked by user XXXX
        CLEAR: ls_output.
        CONCATENATE lc_msg2 lv_uname
        INTO ls_output SEPARATED BY space.
        APPEND ls_output TO it_output.
        RETURN.
      ENDIF.

      " delete pses from db
      SELECT *
        FROM ssf_pse_h BYPASSING BUFFER
        INTO TABLE lt_pse_h
        WHERE filename = ls_pse-filename.
      IF sy-subrc EQ 0.
        LOOP AT lt_pse_h INTO DATA(ls_pse_h).
          CALL FUNCTION 'SSFPSE_REMOVE'
            EXPORTING
              psename           = ls_pse-filename
              host              = ls_pse_h-host
              instanceid        = ls_pse_h-instanceid
            EXCEPTIONS
              authority_missing = 1
              pse_not_found     = 2
              OTHERS            = 3.
          IF sy-subrc NE 0.
            lv_rc = 2.
          ENDIF.
        ENDLOOP.
      ENDIF.
      IF lv_rc = 2.
        "Error occurred during deletion
        CLEAR: ls_output.
        ls_output = lc_msg4.
        APPEND ls_output TO it_output.
        RETURN.
      ENDIF.

      " delete PSE from all AS
      LOOP AT lt_imsxxlist INTO ls_imsxxlist.
        IF ls_imsxxlist-msgtypes O lv_standalone.

          IF sy-saprl GE lc_release. " 751

            IF lo_strust_sapcontrol IS INITIAL.
              CREATE OBJECT lo_strust_sapcontrol
              TYPE ('CL_STRUST_SAPCONTROL').
            ENDIF.

            CALL METHOD lo_strust_sapcontrol->('DELETE_PSE')
              EXPORTING
                destination         = ls_imsxxlist-name
                psename             = ls_pse-filename
              IMPORTING
                rc                  = lv_crc
              EXCEPTIONS
                not_authorized      = 1
                communication_error = 2
                OTHERS              = 4.
            IF sy-subrc NE 0 OR lv_crc <> 0.
              lv_rc = -1.
            ENDIF.
          ENDIF.
          CONTINUE.
        ENDIF.

        CALL FUNCTION 'SSFPSE_UPDATED'
          DESTINATION
          ls_imsxxlist-name
          EXPORTING
            psename                = ls_pse-filename
          IMPORTING
            crc                    = lv_crc
          EXCEPTIONS
            authority_missing      = 1
            ssf_krn_nomemory       = 2
            ssf_krn_nossflib       = 3
            ssf_krn_invalid_par    = 4
            ssf_krn_invalid_parlen = 5
            ssf_krn_error          = 6
            system_failure         = 7
            communication_failure  = 8
            OTHERS                 = 9.
        IF sy-subrc NE 0 OR lv_crc NE 0.
          lv_rc = -1.
        ENDIF.
      ENDLOOP.

      " update ICM if SSL client PSE was deleted
      lv_credname = ls_pse-filename.
      CALL FUNCTION 'ICM_SSL_PSE_CHANGED'
        EXPORTING
          global              = 1
          cred_name           = lv_credname
        EXCEPTIONS
          icm_op_failed       = 1
          icm_get_serv_failed = 2
          icm_auth_failed     = 3
          OTHERS              = 4.
      IF sy-subrc NE 0.
        lv_rc = -2.
      ENDIF.

      TRY.
          lv_pseblob = ls_pse-temppse->get_mem_pse_blob( ).
        CATCH cx_abap_pse.
          lv_rc = 1.
          RETURN.
      ENDTRY.

      lv_psepin = ' '.
      CALL FUNCTION 'SSFPSE_STORE_BLOB'
        EXPORTING
          pseblob           = lv_pseblob
          psepin            = lv_psepin
          psename           = lv_psename
          id                = lv_id
          b_distribute      = lc_set
        EXCEPTIONS
          file_load_failed  = 1
          storing_failed    = 2
          authority_missing = 3
          OTHERS            = 4.
      IF sy-subrc <> 0.
        lv_rc = 2.
        RETURN.
      ENDIF.

      IF lv_keepcertlist EQ lc_set.
        CALL FUNCTION 'SSFPSE_LOAD'
          EXPORTING
            psename           = lv_psename
          IMPORTING
            pseblob           = lv_pseblob
          EXCEPTIONS
            authority_missing = 1
            database_failed   = 2
            file_write_failed = 3
            OTHERS            = 4.
        IF sy-subrc <> 0.
          lv_rc = 3.
          RETURN.
        ENDIF.
      ENDIF.


      " Create instance specific PSE's
      LOOP AT lt_imsxxlist
        ASSIGNING FIELD-SYMBOL(<fs_imsxxlist>).

        CLEAR: lv_len.
        lv_len = strlen( <fs_imsxxlist>-name ).

        " Get instance id
        SUBTRACT 2 FROM lv_len.
        IF lv_len >= 0.
          DATA(lv_instanceid) = <fs_imsxxlist>-name+lv_len(2).
        ENDIF.

        " Get host name
        SUBTRACT 5 FROM lv_len.
        IF lv_len > 0.
          CLEAR: lv_server_host.
          lv_server_host = <fs_imsxxlist>-name(lv_len).
        ENDIF.

        TRY.
            ls_sslsdn = lt_sslsdn[ host = lv_server_host
                                   instanceid = lv_instanceid ].

          CATCH cx_sy_itab_line_not_found
            INTO lo_not_found.

        ENDTRY.

        IF lv_id NE ls_sslsdn-id.

*-----try to link pse to existing one
          CALL FUNCTION 'SSFPSE_LINK'
            EXPORTING
              psename           = lv_psename
              id                = ls_sslsdn-id
              host              = ls_sslsdn-host
              instanceid        = ls_sslsdn-instanceid
              b_cleanup         = space
            EXCEPTIONS
              pse_not_found     = 1
              storing_failed    = 2
              authority_missing = 3
              OTHERS            = 4.
          IF sy-subrc EQ 0.
            CONTINUE.
          ELSEIF sy-subrc <> 1.
            CONTINUE.
          ENDIF.

*-----create pse
          CLEAR: lv_distname.
          lv_distname = ls_sslsdn-id.

          " Build CCL algorithm
          CLEAR: lv_ccl_alg.
          CONCATENATE lv_algorithm lc_colan lv_key
          lc_colan lv_sign_alg INTO lv_ccl_alg.

          CLEAR: lv_keylength,lv_alg.

          lv_keylength = lc_length.

          lv_alg = lc_set.

          CLEAR: lv_pseblob.
          CALL FUNCTION 'SSFPSE_CREATE'
            EXPORTING
              dn                = lv_distname
              alg               = lv_alg
              keylen            = lv_keylength
              cclalg            = lv_ccl_alg
            IMPORTING
              pseblob           = lv_pseblob
            EXCEPTIONS
              ssf_unknown_error = 1
              OTHERS            = 2.
          IF sy-subrc NE 0.
            "Error while creating PSE XXXX
            CLEAR: ls_output.
            CONCATENATE lc_msg1 lv_node
            INTO ls_output SEPARATED BY space.
            APPEND ls_output TO it_output.
            DELETE FROM ssf_pse_h WHERE filename EQ lv_psename.
            RETURN.
          ENDIF.

          " Store to Data Base
          CLEAR: lv_psepin.
          lv_psepin  = ' '.

          CALL FUNCTION 'SSFPSE_STORE_BLOB'
            EXPORTING
              pseblob           = lv_pseblob
              psepin            = lv_psepin
              psename           = lv_psename
              id                = ls_sslsdn-id
              host              = ls_sslsdn-host
              instanceid        = ls_sslsdn-instanceid
              b_newdn           = 'X'
              b_distribute      = 'X'
              b_pinchg          = ' '
            EXCEPTIONS
              file_load_failed  = 1
              storing_failed    = 2
              authority_missing = 3
              OTHERS            = 4.
          IF sy-subrc NE 0.
            " Update to database failed
            lv_failure = lc_set.
          ENDIF.

        ENDIF.
        CLEAR: lv_instanceid.
      ENDLOOP.

    ENDIF.

    IF lv_failure IS NOT INITIAL.
      CLEAR: ls_output.
      CONCATENATE lc_msg5 lv_node lc_msg6 lc_msg7
      INTO ls_output SEPARATED BY space.
      APPEND ls_output TO it_output.
      RETURN.
    ELSE.
      CLEAR: ls_output.
      CONCATENATE lc_msg5 lv_node lc_msg6
      INTO ls_output SEPARATED BY space.
      APPEND ls_output TO it_output.
    ENDIF.

  ENDMETHOD.

ENDCLASS.

*&---------------------------------------------------------------------*
*& Form READOUT_PSE_OWNID
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
FORM readout_pse_ownid  USING    lo_oldpse TYPE REF TO cl_abap_pse
                        CHANGING lv_newid  TYPE c
                                 lv_rc     TYPE i.

  CONSTANTS: lc_0         TYPE c VALUE '0'    LENGTH 1,
             lc_ques_mark TYPE c VALUE '?'    LENGTH 1.

  " Certificate data
  TYPES: BEGIN OF lty_cert_struct,
           bindata    TYPE xstring,
           binlength  TYPE i,
           subject    TYPE certattrs-subject,
           issuer     TYPE certattrs-issuer,
           snumber    TYPE certattrs-snumber,
           fingerpr   TYPE certattrs-fingerpr,
           datefrom   TYPE datum,
           timefrom   TYPE uzeit,
           dateto     TYPE datum,
           timeto     TYPE uzeit,
           algid      TYPE certalgoid,
           serialint  TYPE string,
           keytype    TYPE string,
           keylength  TYPE string,
           fpsha1     TYPE hash160,
           sigavail   TYPE abap_bool,
           selected   TYPE c,
           email      TYPE string,
           subjectalt TYPE string,
           sigalg     TYPE string,
           subjectstr TYPE string,
           issuerstr  TYPE string,
         END OF lty_cert_struct.

  DATA: ls_refcert TYPE lty_cert_struct,
        lv_valid   TYPE abap_bool.

  DATA: lv_oldcert     TYPE xstring,
        lv_validfrom   TYPE string,
        lv_validto     TYPE string,
        lv_fpsha1      TYPE hash160x,
        lr_certificate TYPE REF TO cl_abap_x509_certificate,
        lv_sigalg      TYPE string,
        lv_keystrength TYPE string.


  " Check if PSE can be accessed
  TRY.
      lv_valid = lo_oldpse->is_valid( ).
    CATCH cx_abap_pse.
      lv_valid = abap_false.
  ENDTRY.

  IF lv_valid NE abap_false.

    " Parse own certificate
    TRY.
        CALL METHOD lo_oldpse->get_own_certificate
          IMPORTING
            ev_own_cert = lv_oldcert.

        " Initialize cert structure
        CLEAR: ls_refcert,lv_rc.
        ls_refcert-bindata   = lv_oldcert.
        ls_refcert-binlength = xstrlen( lv_oldcert ).

        IF ls_refcert-binlength NE lc_0.
          ls_refcert-timefrom = ls_refcert-timeto = '        '.

          CLEAR: lv_validfrom,
                 lv_validto,
                 lv_fpsha1.

          " Parse certificate
          CALL FUNCTION 'SSFC_PARSE_CERTIFICATE'
            EXPORTING
              certificate         = lv_oldcert
            IMPORTING
              subject             = ls_refcert-subject
              issuer              = ls_refcert-issuer
              serialno            = ls_refcert-snumber
              validfrom           = lv_validfrom
              validto             = lv_validto
              algid               = ls_refcert-algid
              fingerprint         = ls_refcert-fingerpr
              serialint           = ls_refcert-serialint
              keytype             = ls_refcert-keytype
              keylength           = ls_refcert-keylength
              fingerprintsha1     = lv_fpsha1
              sigavailable        = ls_refcert-sigavail
            EXCEPTIONS
              ssf_krn_error       = 1
              ssf_krn_nomemory    = 2
              ssf_krn_nossflib    = 3
              ssf_krn_invalid_par = 4
              OTHERS              = 5.
          IF sy-subrc EQ 0.
            " Get validity information
            ls_refcert-datefrom = lv_validfrom(8).
            ls_refcert-timefrom = lv_validfrom+8(6).
            ls_refcert-dateto   = lv_validto(8).
            ls_refcert-timeto   = lv_validto+8(6).

            " Handle fingerprints
            IF ls_refcert-sigavail = space.
              CLEAR: ls_refcert-fingerpr, ls_refcert-fpsha1.
            ELSE.
              ls_refcert-fpsha1 = lv_fpsha1.
            ENDIF.

            " Read email address and subject alternative name
            CLEAR: ls_refcert-email,lv_sigalg,
                   ls_refcert-subjectstr,
                   ls_refcert-issuerstr,
                   lv_keystrength.

            ls_refcert-subjectalt = lc_ques_mark.
            TRY.
                lr_certificate =
                cl_abap_x509_certificate=>get_instance( lv_oldcert ).

                ls_refcert-subjectalt =
                 lr_certificate->get_subject_alt_string(
                 if_format =
                 cl_abap_x509_certificate=>co_format_secude_legacy ).

                ls_refcert-email =
                    to_lower( lr_certificate->get_certentry_value(
                    if_cert_entry  =
                    cl_abap_x509_certificate=>co_entry_subjectalt
                    if_xoid_filter =
                    cl_abap_x509_certificate=>co_oid_rfc822name ) ).

                IF ls_refcert-email IS INITIAL.
                  ls_refcert-email =
                    to_lower( lr_certificate->get_certentry_value(
                    if_cert_entry  =
                    cl_abap_x509_certificate=>co_entry_subject
                    if_xoid_filter =
                    cl_abap_x509_certificate=>co_oid_email ) ).
                ENDIF.

                ls_refcert-subjectstr =
                 lr_certificate->get_subject_string(
                 if_format =
                 cl_abap_x509_certificate=>co_format_secude_legacy ).

                ls_refcert-issuerstr =
                 lr_certificate->get_issuer_string(
                 if_format =
                 cl_abap_x509_certificate=>co_format_secude_legacy ).
                " Following attributes are CCL dependend and might
                " throw an exception if CCL is too old.
                lv_sigalg = lr_certificate->get_sig_alg( ).
                lv_keystrength = lr_certificate->get_key_strength( ).
              CATCH cx_abap_x509_certificate.
            ENDTRY.

            ls_refcert-sigalg = lv_sigalg.
            IF lv_keystrength IS NOT INITIAL.
              ls_refcert-keylength = lv_keystrength.
            ENDIF.
          ELSE.
            lv_rc = 1.
          ENDIF.
        ELSE.
          lv_rc = 1.
        ENDIF.
      CATCH cx_abap_pse.
        CLEAR: ls_refcert. " Verification PSE
    ENDTRY.
  ENDIF.

  IF lv_rc EQ 0.
    lv_newid = ls_refcert-subject.
  ELSE.
    lv_rc = 2.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form GET_NODE_KEY
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
FORM get_node_key  USING    f_node TYPE char80
                   CHANGING f_node_key TYPE char10.

  TYPES: BEGIN OF lty_applic,
           applic TYPE char6,
         END OF lty_applic.

  DATA: lt_strustssls  TYPE STANDARD TABLE OF lty_applic,
        ls_strustssls  TYPE lty_applic,
        lt_strustsslst TYPE STANDARD TABLE OF strustsslst,
        lt_strustssl   TYPE STANDARD TABLE OF lty_applic,
        ls_strustssl   TYPE lty_applic,
        lt_strustsslt  TYPE STANDARD TABLE OF strustsslt,
        lt_strustwsse  TYPE STANDARD TABLE OF lty_applic,
        ls_strustwsse  TYPE lty_applic,
        lt_strustwsset TYPE STANDARD TABLE OF strustwsset,
        lt_strustsmim  TYPE STANDARD TABLE OF lty_applic,
        ls_strustsmim  TYPE lty_applic,
        lt_strustsmimt TYPE STANDARD TABLE OF strustsmimt,
        lt_ssfargs     TYPE STANDARD TABLE OF lty_applic,
        ls_ssfargs     TYPE lty_applic,
        lt_ssfapplict  TYPE STANDARD TABLE OF ssfapplict,
        lt_ssfvkeydef  TYPE STANDARD TABLE OF lty_applic,
        ls_ssfvkeydef  TYPE lty_applic,
        lt_ssfvargst   TYPE STANDARD TABLE OF ssfvargst,
        lv_descript    TYPE char80,
        lv_desc_appl   TYPE char80,
        lv_psetext     TYPE strustappltxt,
        lv_context     TYPE char5.

  FREE: lt_strustssls,lt_strustsslst.
  " Get SSL server identity and descriptions
  SELECT applic
    FROM strustssls
    INTO TABLE lt_strustssls.
  IF sy-subrc EQ 0 AND lt_strustssls IS NOT INITIAL.
    SORT: lt_strustssls BY applic.
    SELECT *
      FROM strustsslst
      INTO TABLE lt_strustsslst
      FOR ALL ENTRIES IN lt_strustssls
      WHERE sprsl  EQ 'E'
      AND   applic EQ lt_strustssls-applic.
    IF sy-subrc EQ 0.
      SORT: lt_strustsslst BY applic.
    ENDIF.
  ENDIF.

  FREE: lt_strustssl,lt_strustsslt.
  " Get SSL client identity and descriptions
  SELECT applic
    FROM strustssl
    INTO TABLE lt_strustssl.
  IF sy-subrc EQ 0 AND lt_strustssl IS NOT INITIAL.
    SORT: lt_strustssl BY applic.
    SELECT *
      FROM strustsslt
      INTO TABLE lt_strustsslt
      FOR ALL ENTRIES IN lt_strustssl
      WHERE sprsl  EQ 'E'
      AND   applic EQ lt_strustssl-applic.
    IF sy-subrc EQ 0.
      SORT: lt_strustsslt BY applic.
    ENDIF.
  ENDIF.

  FREE: lt_strustwsse,lt_strustwsset.
  "Get WS security identity and descriptions
  SELECT applic
    FROM strustwsse
    INTO TABLE lt_strustwsse.
  IF sy-subrc EQ 0 AND lt_strustwsse IS NOT INITIAL.
    SORT: lt_strustwsse BY applic.
    SELECT *
      FROM strustwsset
      INTO TABLE lt_strustwsset
      FOR ALL ENTRIES IN lt_strustwsse
      WHERE sprsl  EQ 'E'
      AND   applic EQ lt_strustwsse-applic.
    IF sy-subrc EQ 0.
      SORT: lt_strustwsset BY applic.
    ENDIF.
  ENDIF.

  FREE: lt_strustsmim,lt_strustsmimt.
  "Get SMIME identities and descriptions
  SELECT applic
    FROM strustsmim
    INTO TABLE lt_strustsmim.
  IF sy-subrc EQ 0 AND lt_strustsmim IS NOT INITIAL.
    SORT: lt_strustsmim BY applic.
    SELECT *
      FROM strustsmimt
      INTO TABLE lt_strustsmimt
      FOR ALL ENTRIES IN lt_strustsmim
      WHERE sprsl  EQ 'E'
      AND   applic EQ lt_strustsmim-applic.
    IF sy-subrc EQ 0.
      SORT: lt_strustsmimt BY applic.
    ENDIF.
  ENDIF.

  FREE: lt_ssfargs,lt_ssfapplict.
  "Get Application-Dependent Parameters for
  "SSF Functions (SSFG) and descriptions
  SELECT applic
    FROM ssfargs
    INTO TABLE lt_ssfargs.
  IF sy-subrc EQ 0 AND lt_ssfargs IS NOT INITIAL.
    SORT: lt_ssfargs BY applic.
    SELECT *
      FROM ssfapplict
      INTO TABLE lt_ssfapplict
      FOR ALL ENTRIES IN lt_ssfargs
      WHERE sprsl  EQ 'E'
      AND   applic EQ lt_ssfargs-applic.
    IF sy-subrc EQ 0.
      SORT: lt_ssfapplict BY applic.
    ENDIF.
  ENDIF.

  FREE: lt_ssfvkeydef,lt_ssfvargst.
  "Get SSF application key verions and descriptions
  SELECT applic
    FROM ssfvkeydef
    INTO TABLE lt_ssfvkeydef.
  IF sy-subrc EQ 0 AND lt_ssfvkeydef IS NOT INITIAL.
    SORT: lt_ssfvkeydef BY applic.
    SELECT *
      FROM ssfvargst
      INTO TABLE lt_ssfvargst
      FOR ALL ENTRIES IN lt_ssfvkeydef
      WHERE sprsl  EQ 'E'
      AND   applic EQ lt_ssfvkeydef-applic.
    IF sy-subrc EQ 0.
      SORT: lt_ssfvargst BY applic.
    ENDIF.
  ENDIF.

  lv_context = f_node(5).
  TRANSLATE lv_context TO UPPER CASE.
  CONDENSE lv_context NO-GAPS.

  IF lv_context(3) EQ 'SYS'.
    CONCATENATE lv_context(3) f_node+3(1) INTO lv_context.
  ELSEIF lv_context(3) EQ 'SSF'.
    lv_context = 'SSF'.
  ELSE.
    lv_context = lv_context(4).
  ENDIF.

  TRANSLATE lv_context TO UPPER CASE.

  CASE lv_context.

    WHEN 'SYST'.

      CONCATENATE 'PROG' '<SYST>' INTO f_node_key.

    WHEN 'SNCS'.

      CONCATENATE 'PROG' '<SNCS>' INTO f_node_key.

    WHEN 'SSLS'.

      CLEAR: ls_strustssls,
             lv_descript,f_node_key.
      LOOP AT lt_strustssls INTO ls_strustssls.

        TRY.
            DATA(ls_strustsslst) =
            lt_strustsslst[ applic = ls_strustssls-applic ].

          CATCH cx_sy_itab_line_not_found.
            CLEAR: ls_strustsslst.
        ENDTRY.

        CONCATENATE '*' ls_strustsslst-descript INTO lv_descript.
        IF lv_descript NE '*'.
          IF f_node CP lv_descript.
            CONCATENATE 'SSLS' ls_strustssls-applic
            INTO f_node_key.
            EXIT.
          ELSE.
            CONTINUE.
          ENDIF.
        ENDIF.

        CLEAR: ls_strustssls,ls_strustsslst,
               lv_descript.
      ENDLOOP.

    WHEN 'SSLC'.

      CLEAR: ls_strustssl,
             lv_descript,f_node_key.
      LOOP AT lt_strustssl INTO ls_strustssl.

        TRY.
            DATA(ls_strustsslt) =
            lt_strustsslt[ applic = ls_strustssl-applic ].

          CATCH cx_sy_itab_line_not_found.
            CLEAR: ls_strustsslt.
            CONCATENATE '*' ls_strustssl-applic INTO lv_desc_appl.
            IF lv_desc_appl NE '*'.
              IF f_node CP lv_desc_appl.
                CONCATENATE 'SSLC' ls_strustssl-applic
                INTO f_node_key.
                EXIT.
              ENDIF.
            ENDIF.
        ENDTRY.

        CONCATENATE '*' ls_strustsslt-descript INTO lv_descript.
        IF lv_descript NE '*'.
          IF f_node CP lv_descript.
            CONCATENATE 'SSLC' ls_strustssl-applic
            INTO f_node_key.
            EXIT.
          ELSE.
            CONTINUE.
          ENDIF.
        ENDIF.

        CLEAR: ls_strustssl,ls_strustsslt,
              lv_descript.
      ENDLOOP.

    WHEN 'WSSE'.

      CLEAR: ls_strustwsse,
             lv_descript,f_node_key.
      LOOP AT lt_strustwsse INTO ls_strustwsse.

        TRY.
            DATA(ls_strustwsset) =
            lt_strustwsset[ applic = ls_strustwsse-applic ].

          CATCH cx_sy_itab_line_not_found.
            CLEAR: ls_strustwsset.
        ENDTRY.

        CONCATENATE '*' ls_strustwsset-descript INTO lv_descript.
        IF lv_descript NE '*'.
          IF f_node CP lv_descript.
            CONCATENATE 'WSSE' ls_strustwsse-applic
            INTO f_node_key.
            EXIT.
          ELSE.
            CONTINUE.
          ENDIF.
        ENDIF.

        CLEAR: ls_strustwsse,ls_strustwsset,
               lv_descript.
      ENDLOOP.

    WHEN 'SMIM'.

      CLEAR: ls_strustsmim,
             lv_descript,f_node_key.
      LOOP AT lt_strustsmim INTO ls_strustsmim.

        TRY.
            DATA(ls_strustsmimt) =
            lt_strustsmimt[ applic = ls_strustsmim-applic ].

          CATCH cx_sy_itab_line_not_found.
            CLEAR: ls_strustsmimt.
        ENDTRY.

        CONCATENATE '*' ls_strustsmimt-descript INTO lv_descript.
        IF lv_descript NE '*'.
          IF f_node CP lv_descript.
            CONCATENATE 'SMIM' ls_strustsmim-applic
            INTO f_node_key.
            EXIT.
          ELSE.
            CONTINUE.
          ENDIF.
        ENDIF.

        CLEAR: ls_strustsmim,ls_strustsmimt,
               lv_descript.
      ENDLOOP.

    WHEN 'SSF'.

      CLEAR: ls_ssfargs,
             lv_descript,f_node_key.
      LOOP AT lt_ssfargs INTO ls_ssfargs.

        TRY.
            DATA(ls_ssfapplict) =
            lt_ssfapplict[ applic = ls_ssfargs-applic ].

          CATCH cx_sy_itab_line_not_found.
            CLEAR: ls_ssfapplict.
        ENDTRY.

        CONCATENATE '*' ls_ssfapplict-descript INTO lv_descript.
        IF lv_descript NE '*'.
          IF f_node CP lv_descript.
            CONCATENATE 'SSFA' ls_ssfargs-applic
            INTO f_node_key.
            EXIT.
          ELSE.
            CONTINUE.
          ENDIF.
        ENDIF.

        CLEAR: ls_ssfargs,ls_ssfapplict,
               lv_descript.
      ENDLOOP.

      IF f_node_key IS INITIAL.

        CLEAR: ls_ssfvkeydef,
               lv_descript,f_node_key.
        LOOP AT lt_ssfvkeydef INTO ls_ssfvkeydef.

          TRY.
              DATA(ls_ssfvargst) =
              lt_ssfvargst[ applic = ls_ssfvkeydef-applic ].

            CATCH cx_sy_itab_line_not_found.
              CLEAR: ls_ssfvargst.
          ENDTRY.

          CONCATENATE '*' ls_ssfvargst-descript INTO lv_descript.
          IF lv_descript NE '*'.
            IF f_node CP lv_descript.
              CONCATENATE 'SSFV' ls_ssfvkeydef-applic
              INTO f_node_key.
              EXIT.
            ELSE.
              CONTINUE.
            ENDIF.
          ENDIF.

          CLEAR: ls_ssfvkeydef,ls_ssfvargst,
                 lv_descript.
        ENDLOOP.

      ENDIF.

    WHEN OTHERS.

  ENDCASE.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form DELETE_DISTRIB_PSE
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
FORM delete_distrib_pse  TABLES lt_imsxxlist STRUCTURE msxxlist
                         USING  ls_pse_filename TYPE ssf_pse_h-filename
                                lv_context TYPE psecontext
                                lv_applic TYPE ssfappl
                         CHANGING lv_rc TYPE i.

  CONSTANTS: lc_release  TYPE c VALUE '751'   LENGTH 3,
             lc_context  TYPE c VALUE 'SMIM'  LENGTH 4,
             lc_sslc     TYPE c VALUE 'SSLC'  LENGTH 4.

  DATA: lv_crc               TYPE ssfparms-ssfcrc,
        lv_dummy             TYPE c,
        lv_irc               TYPE i,
        ls_strustsmim        TYPE strustsmim,
        lv_credname          TYPE icm_credname,
        ls_imsxxlist         TYPE msxxlist,
        lv_standalone        TYPE x VALUE '01',
        lo_strust_sapcontrol TYPE REF TO object.

* delete SMIME name if necessary
  IF lv_context = lc_context.
    SELECT SINGLE * FROM strustsmim INTO ls_strustsmim
      WHERE applic = lv_applic.
    IF sy-subrc = 0 AND ls_strustsmim-name IS NOT INITIAL.
      CLEAR ls_strustsmim-name.
      MODIFY strustsmim FROM ls_strustsmim.
    ENDIF.
  ENDIF.

* check if pse is locked
  CLEAR lv_rc.
  PERFORM check_dbpse_locked
    USING    ls_pse_filename
    CHANGING lv_dummy lv_irc.
  IF lv_irc NE 0.
    lv_rc = 1.
    RETURN.
  ENDIF.

* delete pse from db
  CALL FUNCTION 'SSFPSE_REMOVE'
    EXPORTING
      psename           = ls_pse_filename
    EXCEPTIONS
      authority_missing = 1
      pse_not_found     = 2
      OTHERS            = 3.
  IF sy-subrc NE 0.
    lv_rc = 2.
    RETURN.
  ENDIF.

**delete PSE from all AS
  LOOP AT lt_imsxxlist INTO ls_imsxxlist.
    IF ls_imsxxlist-msgtypes O lv_standalone.

      IF sy-saprl GE lc_release. " 751

        IF lo_strust_sapcontrol IS INITIAL.
          CREATE OBJECT lo_strust_sapcontrol
          TYPE ('CL_STRUST_SAPCONTROL').
        ENDIF.
        CALL METHOD lo_strust_sapcontrol->('DELETE_PSE')
          EXPORTING
            destination         = ls_imsxxlist-name
            psename             = ls_pse_filename
          IMPORTING
            rc                  = lv_crc
          EXCEPTIONS
            not_authorized      = 1
            communication_error = 2
            OTHERS              = 4.
        IF sy-subrc NE 0 OR lv_crc <> 0.
          lv_rc = -1.
        ENDIF.
      ENDIF.

      CONTINUE.
    ENDIF.

    CALL FUNCTION 'SSFPSE_UPDATED'
      DESTINATION
      ls_imsxxlist-name
      EXPORTING
        psename                = ls_pse_filename
      IMPORTING
        crc                    = lv_crc
      EXCEPTIONS
        authority_missing      = 1
        ssf_krn_nomemory       = 2
        ssf_krn_nossflib       = 3
        ssf_krn_invalid_par    = 4
        ssf_krn_invalid_parlen = 5
        ssf_krn_error          = 6
        system_failure         = 7
        communication_failure  = 8
        OTHERS                 = 9.
    IF sy-subrc NE 0 OR lv_crc NE 0.
      lv_rc = -1.
    ENDIF.
  ENDLOOP.

** update ICM if SSL client PSE was deleted
  IF lv_context = lc_sslc.
    lv_credname = ls_pse_filename.
    CALL FUNCTION 'ICM_SSL_PSE_CHANGED'
      EXPORTING
        global              = 1
        cred_name           = lv_credname
      EXCEPTIONS
        icm_op_failed       = 1
        icm_get_serv_failed = 2
        icm_auth_failed     = 3
        OTHERS              = 4.
    IF sy-subrc NE 0.
      lv_rc = -2.
    ENDIF.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form CHECK_DBPSE_LOCKED
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
FORM check_dbpse_locked  USING  ls_pse_filename TYPE ssf_pse_h-filename
                         CHANGING lv_uname TYPE c
                                  lv_irc TYPE i.

  CLEAR: lv_irc, lv_uname.

  CALL FUNCTION 'SSFPSE_ENQUEUE'
    EXPORTING
      psename         = ls_pse_filename
    EXCEPTIONS
      database_failed = 1
      foreign_lock    = 2
      internal_error  = 3
      OTHERS          = 4.

  CASE sy-subrc.
    WHEN 0.
      CALL FUNCTION 'SSFPSE_DEQUEUE'
        EXPORTING
          psename         = ls_pse_filename
        EXCEPTIONS
          database_failed = 1
          foreign_lock    = 2
          internal_error  = 3
          OTHERS          = 4.
      IF sy-subrc <> 0.
        lv_irc = 2.
      ENDIF.
    WHEN 1.     lv_irc = 2.
    WHEN 2.
      lv_uname = sy-msgv1.
      lv_irc = 1.
    WHEN OTHERS. lv_irc = 3.
  ENDCASE.

ENDFORM.