*---------------------------------------------------------------------*
* Program Name        :   ZCM_SP12_DEL_TEMSE_OBJECTS                  *
* Title               :   DELETE TEMSE OBJECTS                        *
* Purpose             :   This report is to delete TEMSE Objects      *
*                         during Cloud Migration                      *
*---------------------------------------------------------------------*
* Related Transaction OR Standard Program References                  *
* SP12                                                                *
*---------------------------------------------------------------------*
*Tables              :   SELECT    UPDATE      INSERT      DELETE    *
* XXXXX                     X                                         *
*---------------------------------------------------------------------*
* Program Change History                                              *
*---------------------------------------------------------------------*
*Date        Version   Author         TR#/Local     Description       *
*---------------------------------------------------------------------*
*09-03-2020  Initial  Ruchir Kamble   Local   To delete TEMSE objects *
*---------------------------------------------------------------------*

REPORT zcm_sp12_del_temse_objects.

DATA : ls_output  TYPE tab512,
       lt_msg     TYPE TABLE OF tab512,
       lt_bdcdata TYPE TABLE OF bdcdata,
       ls_bdcdata TYPE bdcdata,
       lt_messtab TYPE TABLE OF bdcmsgcoll,
       ls_messtab TYPE bdcmsgcoll.

LOAD-OF-PROGRAM.
FORM get_config
               TABLES lt_input  STRUCTURE tab512
                      lt_output STRUCTURE tab512.

  CONSTANTS: lc_title TYPE C VALUE
             'Temse Data Consistency Check'    LENGTH 50,
             lc_msg1  TYPE C VALUE
             'TEMSE objects deleted'           LENGTH 30.

  " Adding title to the output
  ls_output = lc_title.
  APPEND ls_output TO lt_output.

  PERFORM bdc_dynpro      USING 'RSTS0010' '0100'.
  PERFORM bdc_field       USING 'BDC_OKCODE'
                                '=CONS'.
  PERFORM bdc_dynpro      USING 'SAPMSSY0' '0120'.
  PERFORM bdc_field       USING 'BDC_CURSOR'
                                '08/03'.
  PERFORM bdc_field       USING 'BDC_OKCODE'
                                '=DELA'.
  PERFORM bdc_dynpro      USING 'SAPLSPO1' '0600'.
  PERFORM bdc_field       USING 'BDC_OKCODE'
                                '=OPT1'.
  PERFORM bdc_dynpro      USING 'RSTS0010' '0100'.
  PERFORM bdc_field       USING 'BDC_OKCODE'
                                '/E%EX'.
  PERFORM bdc_transaction TABLES lt_msg USING 'SP12'.

  IF lt_msg[] IS NOT INITIAL.
    " Display any error message
    lt_output[] = lt_msg[].
  ELSE.
    " TEMSE objects deleted
    ls_output = lc_msg1.
    APPEND ls_output TO lt_output.
  ENDIF.


ENDFORM.

FORM bdc_dynpro USING program dynpro.
  CLEAR ls_bdcdata.
  ls_bdcdata-program  = program.
  ls_bdcdata-dynpro   = dynpro.
  ls_bdcdata-dynbegin = 'X'.
  APPEND ls_bdcdata TO lt_bdcdata.
ENDFORM.

*--------------------------------------------------------------*
*        Insert field                                          *
*--------------------------------------------------------------*
FORM bdc_field USING fnam fval.
  CLEAR ls_bdcdata.
  ls_bdcdata-fnam = fnam.
  ls_bdcdata-fval = fval.
  APPEND ls_bdcdata TO lt_bdcdata.
ENDFORM.

FORM bdc_transaction TABLES lt_msg STRUCTURE tab512
USING tcode TYPE any.

  DATA: lv_mstring(480),
        lv_subrc           LIKE sy-subrc,
        lx_auth_check      TYPE REF TO cx_root,
        lv_auth_check_text TYPE string,
        ls_msg             TYPE tab512.

  CONSTANTS: lc_99    TYPE c VALUE '99' LENGTH 2,
             lc_comma TYPE c VALUE ','  LENGTH 1,
             lc_n     LIKE ctu_params-dismode VALUE 'N',
             lc_l     LIKE ctu_params-updmode VALUE 'L'.

  REFRESH lt_messtab.
  TRY.
      CALL TRANSACTION tcode WITH AUTHORITY-CHECK USING lt_bdcdata
            MODE   lc_n
            UPDATE lc_l
            MESSAGES INTO lt_messtab.
    CATCH cx_sy_authorization_error INTO lx_auth_check.
*     Authorization missing for user when executing transaction
      lv_auth_check_text = lx_auth_check->get_text( ).
      sy-subrc = lc_99.
  ENDTRY.
  lv_subrc = sy-subrc.

  IF lv_subrc NE 99.
    LOOP AT lt_messtab INTO ls_messtab.
      MESSAGE ID     ls_messtab-msgid
      TYPE   ls_messtab-msgtyp
      NUMBER ls_messtab-msgnr
      INTO   lv_mstring
      WITH   ls_messtab-msgv1
      ls_messtab-msgv2
      ls_messtab-msgv3
      ls_messtab-msgv4.
      IF ls_messtab-msgtyp = 'E'.
        CONCATENATE ls_messtab-msgtyp lc_comma lv_mstring(250)
        INTO ls_msg SEPARATED BY space.
        APPEND ls_msg TO lt_msg.
        CLEAR: ls_messtab,ls_msg.
      ENDIF.
    ENDLOOP.

  ELSE.
    " No authorization error
    CLEAR: ls_msg.
    ls_msg = lv_auth_check_text.
    APPEND ls_msg TO lt_msg.
  ENDIF.
  REFRESH lt_bdcdata.

ENDFORM.