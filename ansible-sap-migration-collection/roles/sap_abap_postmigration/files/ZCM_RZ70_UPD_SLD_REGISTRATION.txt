*---------------------------------------------------------------------*
* Program Name        :   ZCM_RZ70_UPD_SLD_REGISTRATION               *
* Title               :   Logical Systems                             *
* Purpose             :   This report is used to import Gateway host, *
*                         service and period in minutes( tcode: RZ70) *
*                        verify it with source data and update changes*
*                        as well as run connection check.             *
*---------------------------------------------------------------------*
* Related Transaction OR Standard Program References                  *
* RZ70                                                                *
*---------------------------------------------------------------------*
*Tables              :   SELECT    UPDATE      INSERT      DELETE    *
* SLDAGADM                            X           X            X      *
*---------------------------------------------------------------------*
* Program Change History                                              *
*---------------------------------------------------------------------*
*Date        Version   Author       TR#/Local     Description         *
*---------------------------------------------------------------------*
*13-10-2020  Initial   Soumya Ray   Local       To import Gateway host*
*                                               service and period in *
*                                               minutes               *
*04-13-2022  V001      Soumya Ray   Local      To reomve inline       *
*                                              declarations           *
*---------------------------------------------------------------------*

REPORT zcm_rz70_upd_sld_registration.

LOAD-OF-PROGRAM.

FORM get_config
              TABLES lt_input  STRUCTURE tab512 " Input from PYTHON
                     lt_output STRUCTURE tab512. " Output to PYTHON

  CONSTANTS: lc_sep       TYPE c       VALUE '|',
             lc_head      TYPE string  VALUE
                            'Registraion in system landscape directory',
             lc_smsg_u    TYPE string VALUE
                            'Gateway host & Services updated',
             lc_unchanged TYPE string VALUE 'Settings are unchanged',
             lc_nmsg_u    TYPE string VALUE
                            'Gateway host & Services not updated',
             lc_smsg_i    TYPE string VALUE
                            'Gateway host & Services inserted',
             lc_nmsg_i    TYPE string VALUE
                            'Gateway host & Services not inserted',
             lc_smsg_d    TYPE string VALUE
                            'Gateway host & Services deleted',
             lc_nmsg_d    TYPE string VALUE
                            'Gateway host & Services not deleted',
             lc_update    TYPE c      VALUE  'U',
             lc_insert    TYPE c      VALUE  'I',
             lc_delete    TYPE c      VALUE  'D',
             lc_mode      TYPE dd26e-enqmode VALUE 'E',
             lc_tabname   TYPE rstable-tabname VALUE 'SLDAGADM',
             lc_enqueue   TYPE string
                            VALUE 'SLDAGADM table failed to lock',
             lc_dequeue   TYPE string
                            VALUE 'SLDAGADM table failed to unlock'.


  DATA: ls_output       TYPE tab512,
        ls_sldagadm     TYPE sldagadm,
* Begin of changes V001
        lv_lines        TYPE i,
        lv_action       TYPE string,
        ls_input        TYPE tab512,
        ls_sldagadm_chk TYPE sldagadm,
        lv_btcmin       TYPE string.
* End of changes V001

  ls_output = lc_head. " Header of the script.
  APPEND ls_output TO lt_output.
  CLEAR ls_output.

  DESCRIBE TABLE lt_input LINES lv_lines.
  IF lv_lines > 1. " To check if the imported file has data
*  Form to replace null values coming for fields from input with blank
    PERFORM blank_check TABLES lt_input.
    DELETE lt_input INDEX 1." To delete the Data header line
  ELSE.
    ls_output = lc_unchanged." Msg to denote no data in input parameter
    APPEND ls_output TO lt_output.
    CLEAR ls_output.
    RETURN.
  ENDIF.

* FM to enqueue the SLDAGADM table
  CALL FUNCTION 'ENQUEUE_E_TABLE'
    EXPORTING
      mode_rstable   = lc_mode
      tabname        = lc_tabname
    EXCEPTIONS
      foreign_lock   = 1
      system_failure = 2
      OTHERS         = 3.
  IF sy-subrc <> 0.
    ls_output = lc_enqueue. " Msg to denote lock of table failed
    APPEND ls_output TO lt_output.
    CLEAR ls_output.
    RETURN.
  ENDIF.
  LOOP AT lt_input INTO ls_input.
    SPLIT ls_input AT lc_sep INTO"Split the data into fields
    ls_sldagadm-progname " Program name
    ls_sldagadm-active   " Program is active
    ls_sldagadm-seqnr    "Sequence Data Supplier Programs
    ls_sldagadm-dorfc    "Provide RFC data
    ls_sldagadm-rfcdest  "Logical destination
    ls_sldagadm-gwhost   " Host
    ls_sldagadm-gwserv   " Server
    ls_sldagadm-doshm    "Write shared memory data
    ls_sldagadm-dobtc    " Create batch job
    lv_btcmin      " Period in minutes
          ls_sldagadm-cshmhost " Central Shared Memory Host
          ls_sldagadm-test     "Test Indicator
          ls_sldagadm-testcnt "Number of Data Entities for Test Run
          ls_sldagadm-testprnt "Write collected data to list
          lv_action.   " Actin ID

    ls_sldagadm-btcmin = lv_btcmin. "convert string to field type

    CASE lv_action.
      WHEN lc_delete.  " Action is for Deleted
        DELETE sldagadm FROM ls_sldagadm.
        COMMIT WORK.
*  To check the data is deleted or not passing the parameters that
*  are passed from PYTHON
        SELECT SINGLE * FROM sldagadm
        INTO ls_sldagadm_chk
              WHERE progname = ls_sldagadm-progname.
        IF sy-subrc EQ 0.
          ls_output = lc_nmsg_d. " Not deleted sucessfully
          APPEND ls_output TO lt_output.
        ELSE.
          ls_output = lc_smsg_d.  " Deleted sucessfully
          APPEND ls_output TO lt_output.
        ENDIF.

      WHEN lc_insert. " Action is for Insert
        MODIFY sldagadm FROM ls_sldagadm.
        COMMIT WORK.
*  To check the data is inserted or not passing the parameters that
*  are passed from PYTHON
        SELECT SINGLE * FROM sldagadm
        INTO ls_sldagadm_chk
        WHERE progname = ls_sldagadm-progname
        AND   gwhost   = ls_sldagadm-gwhost
        AND   gwserv   = ls_sldagadm-gwserv.
        IF sy-subrc EQ 0.
          ls_output = lc_smsg_i. " Successfully inserted
          APPEND ls_output TO lt_output.
        ELSE.
          ls_output = lc_nmsg_i. " Not inserted sucessfully
          APPEND ls_output TO lt_output.
        ENDIF.

      WHEN lc_update. " Action is for insert
        UPDATE sldagadm FROM ls_sldagadm.
        COMMIT WORK.
*  To check the data is updated or not passing the parameters that
*  are passed from PYTHON
        SELECT SINGLE * FROM sldagadm
        INTO ls_sldagadm_chk
        WHERE progname = ls_sldagadm-progname
        AND   gwhost   = ls_sldagadm-gwhost
        AND   gwserv   = ls_sldagadm-gwserv
        AND   dobtc    = ls_sldagadm-dobtc
        AND   btcmin   = ls_sldagadm-btcmin.
        IF sy-subrc EQ 0.
          ls_output = lc_smsg_u. " Sucessfully updated
          APPEND ls_output TO lt_output.
        ELSE.
          ls_output = lc_nmsg_u. " Not updated sucessfully
          APPEND ls_output TO lt_output.
        ENDIF.
      WHEN OTHERS.
        ls_output = lc_unchanged. " Msg no data in input parameter
        APPEND ls_output TO lt_output.
        CLEAR ls_output.
    ENDCASE.
  ENDLOOP.
* FM to enqueue the SLDAGADM table
  CALL FUNCTION 'DEQUEUE_E_TABLE'
    EXPORTING
      mode_rstable = lc_mode
      tabname      = lc_tabname.
  IF sy-subrc <> 0.
    ls_output = lc_dequeue. " Msg to denote unlock of table failed
    APPEND ls_output TO lt_output.
    CLEAR ls_output.
  ENDIF.

  CLEAR: ls_sldagadm, ls_sldagadm_chk, ls_output, lv_btcmin.

ENDFORM.
FORM blank_check TABLES lt_table TYPE table.

  DO .
    REPLACE ALL OCCURRENCES OF SUBSTRING '|NULL|'
    IN TABLE lt_table WITH '||'.
    FIND '|NULL|' IN TABLE lt_table.
    IF sy-subrc <> 0.
      EXIT .
    ENDIF.
  ENDDO.
  DO .

    REPLACE ALL OCCURRENCES OF SUBSTRING '|NULL'
    IN TABLE lt_table WITH '|'.
    FIND '|NULL' IN TABLE lt_table.
    IF sy-subrc <> 0.
      EXIT .
    ENDIF.
  ENDDO.

ENDFORM.