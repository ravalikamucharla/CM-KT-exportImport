---
- name: Table Split | Checking for installationSuccesfullyFinished.dat file
  stat:
    path: /tmp/sapinst_instdir/NW750/ORA/COPY/EXP/AS-ABAP/PREEXP/installationSuccesfullyFinished.dat
  register: installation_file_expre
  tags: 
    - table_split
    - retry_table_split

- name: Table Split | Set installation directory facts
  set_fact:
    install_dir_tabsp: "{{ params.export.sapinst_path }}"
  when: installation_file_expre.stat.exists
  tags: table_split

- name: Table Split | Set installation directory facts
  set_fact:
    install_dir_tabsp: "{{ params.export.sapinst_path }}"
  tags: 
    - table_split
    - retry_table_split 

- name: Table Split | Backing up sapinst_instdir
  command: cp -r /tmp/sapinst_instdir "{{install_dir_tabsp}}/backup/sapinst_instdir_tabsp_{{ lookup('pipe', 'date +%Y%m%d%H%M%S') }}"
  ignore_errors: yes
  tags: table_split

- name: Table Split | Deleting old log files
  file:
    path: "{{ item }}"
    state: absent
  loop:
   - /tmp/sapinst_instdir
   - /root/.sapinst
  tags: table_split

- name: Table Split | Get running processes
  shell: ps -ef | grep -v grep | grep -w 'sapinst\|sapinst_exe' | awk '{print $2}'
  register: running_processes_tabsp
  tags: table_split

- name: Table Split | Kill running processes
  shell: "kill {{ item }}"
  with_items: "{{ running_processes_tabsp.stdout_lines }}"
  ignore_errors: yes
  tags: table_split

- wait_for:
    path: "/proc/{{ item }}/status"
    state: absent
  with_items: "{{ running_processes_tabsp.stdout_lines }}"
  ignore_errors: yes
  register: killed_processes_tabsp
  tags: table_split

- name: Table Split | Force kill stuck processes
  shell: "kill -9 {{ item }}"
  with_items: "{{ killed_processes_tabsp.results | select('failed') | map(attribute='item') | list }}"
  ignore_errors: yes
  tags: table_split

- name: Table Split | Creating params file
  template:
    src: "table_split.j2"
    dest: "{{ install_dir_tabsp }}/{{ansible_hostname}}_tablesplit.params"
    mode: '0755'
  tags: table_split
  when: db_type == "oracle" and ora_plsql == "no" 

- name: Table Split | Creating params file
  template:
    src: "ora_plsql_table_split.j2"
    dest: "{{ install_dir_tabsp }}/{{ansible_hostname}}_tablesplit.params"
    mode: '0755'
  tags: table_split
  when: db_type == "oracle" and ora_plsql == "yes" 

- name: Table Split | Creating params file
  template:
    src: "db2_table_split.j2"
    dest: "{{ install_dir_tabsp }}/{{ansible_hostname}}_tablesplit.params"
    mode: '0755'
  tags: table_split
  when: db_type == "db2"

- name: Table Split | Make sure sapinst is executable
  file:
   path: "{{install_dir_tabsp}}/sapinst"
   mode: '0755'
  tags: table_split

- name: Table Split | Table Splitting
  command:
    cmd: "./sapinst SAPINST_INPUT_PARAMETERS_URL=/{{ install_dir_tabsp }}/{{ ansible_hostname }}_tablesplit.params SAPINST_EXECUTE_PRODUCT_ID={{ params.product_ids.table_split }} SAPINST_SKIP_DIALOGS=true SAPINST_START_GUI=true SAPINST_START_GUISERVER=true SAPINST_GUI_HOSTNAME={{ ansible_hostname }}"
    creates: "{{ install_dir_tabsp }}/LOGS/export_table_split_{{ ansible_hostname }}_{{ ansible_date_time }}.log"
  args:
    chdir: "{{ install_dir_tabsp }}"
  register: export_tabsp
  async: 3600
  poll: 0
  tags: table_split

- debug:
    var: export_tabsp
  tags: table_split

- name: Table Split | Table Splitting Status Checking
  async_status:
     jid: "{{ export_tabsp.ansible_job_id }}"
  register: job_result_export_tabsp
  until: job_result_export_tabsp.finished
  retries: 2000
  delay: 10
  tags: 
    - table_split

- stat: 
    path: "/tmp/sapinst_instdir/{{ params.export.product }}/{{ params.export.source_db_type }}/COPY/EXP/AS-ABAP/PRETABSPLIT/installationSuccesfullyFinished.dat"
  register: st
  tags: 
    - table_split
    - retry_table_split
  
- name: Table Splitting resume
  command:
    cmd: "{{ install_dir_tabsp }}/sapinst SAPINST_INPUT_PARAMETERS_URL=/{{install_dir_tabsp}}/{{ansible_hostname}}.params SAPINST_EXECUTE_PRODUCT_ID={{ params.product_ids.table_split }} SAPINST_SKIP_DIALOGS=true SAPINST_START_GUI=true SAPINST_START_GUISERVER=true SAPINST_GUI_HOSTNAME={{ansible_hostname}}"
    creates: "{{install_dir_tabsp}}/LOGS/export_table_split_{{ansible_hostname}}_{{ansible_date_time}}.log"
  args:
    chdir: "/tmp/sapinst_instdir/{{ params.export.product }}/{{ params.export.source_db_type }}/COPY/EXP/AS-ABAP/PRETABSPLIT/"
  register: export_tabsp_retry
  async: 3600
  poll: 0
  tags: 
    - table_split  
    - retry_table_split
  when: not (st.stat.exists)  #"'retry_table_split' in ansible_run_tags"

- name: Export Preparation | Export Preparation Status Checking
  async_status:
     jid: "{{ export_tabsp_retry.ansible_job_id }}"
  register: job_result_export_tabsp_retry
  until: job_result_export_tabsp_retry.finished
  retries: 2000
  delay: 10
  tags: 
    - table_split
    - retry_table_split
  when: not (st.stat.exists) #and "'retry_exp_prep' in ansible_run_tags"
