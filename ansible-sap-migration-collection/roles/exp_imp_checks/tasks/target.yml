#################################### port status ############################################
- name: target | To check if ports are open 
  command: nc -vz {{ hostvars[groups['target_pas'][0]].ansible_host }} 4237
  register: port_status_target
  failed_when: port_status_target.rc not in [0,1]

- name: target | copy the content of port status to a file
  local_action: 
    module: copy 
    content: "{{ port_status_target.stderr.split('] ')[1] | replace('!','') }}"
    dest: "{{ exp_imp_prechecks.target_file_path }}/target_portstatus.txt"
  when: port_status_target.stderr is search('succeeded')

- name: target | copy the content of port status to a file
  local_action: 
    module: copy 
    content: "{{ port_status_target.stderr.split()[-2] }} {{ port_status_target.stderr.split()[-1] }}"
    dest: "{{ exp_imp_prechecks.target_file_path }}/target_portstatus.txt" 
  when: port_status_target.stderr is search('Connection refused')

##################################### port status 4238 ############################################
- name: target | To check if ports are open 
  command: nc -vz {{ hostvars[groups['target_pas'][0]].ansible_host }} 4238
  register: port_status_target_4238
  failed_when: port_status_target_4238.rc not in [0,1]

- name: target | copy the content of port status to a file
  local_action: 
    module: copy 
    content: "{{ port_status_target_4238.stderr.split('] ')[1] | replace('!','') }}"
    dest: "{{ exp_imp_prechecks.target_file_path }}/target_portstatus_4238.txt"
  when: port_status_target_4238.stderr is search('succeeded')

- name: target | copy the content of port status to a file
  local_action: 
    module: copy 
    content: "{{ port_status_target_4238.stderr.split()[-2] }} {{ port_status_target_4238.stderr.split()[-1] }}"
    dest: "{{ exp_imp_prechecks.target_file_path }}/target_portstatus_4238.txt" 
  when: port_status_target_4238.stderr is search('Connection refused')
#################################### export dir present in target ############################################

- name: target | Check for source export directory is present in target
  stat:
    path: "{{exp_imp_prechecks.expdir}}"
  register: register_name
  delegate_to: "{{ groups['target_pas'][0] }}"
  become: yes
  ignore_errors: true

- set_fact: 
    register_name_src: "source export directory is not present in target"
  when: "{{register_name.stat.exists}} == false"

- set_fact: 
    register_name_src: "source export directory is present in target"
  when: "{{register_name.stat.exists}} != false"

#################################### export dir should have sidadm/sapsysaccess ############################################

- name: target | export dir permissions
  stat:
    path: "{{exp_imp_prechecks.impdir}}"
  register: directory_info_tgt
  delegate_to: "{{ groups['target_pas'][0] }}"
  become: yes
  ignore_errors: true

- name: target | copy the content export dir permissions to a file
  local_action: 
    module: copy 
    content: "{{ directory_info_tgt.stat.pw_name}}/{{directory_info_tgt.stat.gr_name }}"
    dest: "{{ exp_imp_prechecks.target_file_path }}/target_export_dir_permissions.txt"
  when: "{{directory_info_tgt.stat.exists}} != false"

- name: target | copy the content export dir permissions to a file
  local_action: 
    module: copy 
    content: "import directory is not present in target"
    dest: "{{ exp_imp_prechecks.target_file_path }}/target_export_dir_permissions.txt"
  when: "{{directory_info_tgt.stat.exists}} == false"

#################################### export dir empty ############################################

- name: target | Find files in the import directory
  command: ls "{{exp_imp_prechecks.impdir}}" | wc -l
  register: directory_contents
  delegate_to: "{{ groups['target_pas'][0] }}"
  become: yes
  ignore_errors: true

- set_fact: 
    directory_contents_tgt: "Directory does not exists"
  when: "{{directory_info_tgt.stat.exists}} == false"

- set_fact: 
    directory_contents_tgt: "{{directory_contents.stdout_lines[1]}}"
  when: 
    - "{{directory_info_tgt.stat.exists}} != false"

- name: target | copy the content export dir content to a file
  local_action: 
    module: copy 
    content: "{{ directory_contents_tgt }}"
    dest: "{{ exp_imp_prechecks.target_file_path }}/target_export_dir_contents.txt"

#################################### nfs status on target pas ############################################

- name: target | Check for nfs service
  shell: "systemctl show nfs | grep LoadState | cut -d = -f 2"
  register: nfs_service_status_tgt_pas
  changed_when: no
  check_mode: no
  delegate_to: "{{ groups['target_pas'][0] }}"
  become: yes
  ignore_errors: true
  when: 
    - exp_imp_prechecks.data_transfer_type is defined
    - exp_imp_prechecks.data_transfer_type == "NET"

- name: target | copy the content nfs service status to a file of target pas
  local_action: 
    module: copy 
    content: "{{ nfs_service_status_tgt_pas.stdout_lines[0] }}"
    dest: "{{ exp_imp_prechecks.target_file_path }}/target_nfs_status_tgt_pas.txt"
  when: 
    - exp_imp_prechecks.data_transfer_type is defined
    - exp_imp_prechecks.data_transfer_type == "NET"

#################################### nfs status on target db ############################################

- name: target | Check for nfs service
  shell: "systemctl show nfs | grep LoadState | cut -d = -f 2"
  register: nfs_service_status_tgt_db
  changed_when: no
  check_mode: no
  delegate_to: "{{ groups['target_db'][0] }}"
  become: yes
  ignore_errors: true
  when: 
    - exp_imp_prechecks.data_transfer_type is defined
    - exp_imp_prechecks.data_transfer_type == "NET"

- name: target | copy the content nfs service status to a file of target db
  local_action: 
    module: copy 
    content: "{{ nfs_service_status_tgt_db.stdout_lines[0] }}"
    dest: "{{ exp_imp_prechecks.target_file_path }}/target_nfs_status_tgt_db.txt"
  when: 
    - exp_imp_prechecks.data_transfer_type is defined
    - exp_imp_prechecks.data_transfer_type == "NET"
#################################### ftp status on target pas ############################################

- name: target | Check for ftp service
  shell: "systemctl show vsftpd | grep LoadState | cut -d = -f 2"
  register: ftp_service_status_tgt_pas
  changed_when: no
  check_mode: no
  delegate_to: "{{ groups['target_pas'][0] }}"
  become: yes
  ignore_errors: true
  when: 
    - exp_imp_prechecks.data_transfer_type is defined
    - exp_imp_prechecks.data_transfer_type == "FTP"

- name: target | copy the content ftp service status to a file of target pas
  local_action: 
    module: copy 
    content: "{{ ftp_service_status_tgt_pas.stdout_lines[0] }}"
    dest: "{{ exp_imp_prechecks.target_file_path }}/target_ftp_status_tgt_pas.txt"
  when: 
    - exp_imp_prechecks.data_transfer_type is defined
    - exp_imp_prechecks.data_transfer_type == "FTP"

#################################### ftp status on target db ############################################

- name: target | Check for ftp service
  shell: "systemctl show vsftpd | grep LoadState | cut -d = -f 2"
  register: ftp_service_status_tgt_db
  changed_when: no
  check_mode: no
  delegate_to: "{{ groups['target_db'][0] }}"
  become: yes
  ignore_errors: true
  when: 
    - exp_imp_prechecks.data_transfer_type is defined
    - exp_imp_prechecks.data_transfer_type == "FTP"

- name: target | copy the content ftp service status to a file of target db
  local_action: 
    module: copy 
    content: "{{ ftp_service_status_tgt_db.stdout_lines[0] }}"
    dest: "{{ exp_imp_prechecks.target_file_path }}/target_ftp_status_tgt_db.txt"
  when: 
    - exp_imp_prechecks.data_transfer_type is defined
    - exp_imp_prechecks.data_transfer_type == "FTP"

#################################### R3load version in target server ############################################

- name: target | Execute command for r3load version
  command: sudo su - {{ app_sid_tgt |lower }}adm -c "R3load -version"
  register: r3load_outputs_tgt
  ignore_errors: true
  delegate_to: "{{ groups['target_pas'][0] }}"

- set_fact: 
    r3load_outputs: "{{ r3load_outputs_tgt.stdout_lines[5] }} {{r3load_outputs_tgt.stdout_lines[23]}}"
  when: r3load_outputs_tgt.stdout != ''

- name: target | filter kernel version for comparison between source and target
  shell: echo "{{ r3load_outputs_tgt.stdout_lines[5] }}" | tr -cd '0-9' 
  register: r3load_kernel_ver_tgt
  when: r3load_outputs_tgt.stdout != ''
    
- set_fact:
    r3load_kernel_ver_tgt: "{{ r3load_kernel_ver_tgt.stdout | int }}"
  when: r3load_outputs_tgt.stdout != ''

- name: target | copy the content kernel version to a file of target pas
  local_action: 
    module: copy 
    content: "{{ r3load_kernel_ver_tgt }}"
    dest: "{{ exp_imp_prechecks.target_file_path }}/kernel-version.txt"
  when: r3load_outputs_tgt.stdout != ''

- name: target | filterpatch no for comparison between source and target
  shell: echo "{{ r3load_outputs_tgt.stdout_lines[23] }}" | tr -cd '0-9' 
  register: r3load_patch_no_tgt
  when: r3load_outputs_tgt.stdout != ''
    
- set_fact:
    r3load_patch_no_tgt: "{{ r3load_patch_no_tgt.stdout | int }}"
  when: r3load_outputs_tgt.stdout != ''

- name: target | copy the content patch no to a file of target pas
  local_action: 
    module: copy 
    content: "{{ r3load_patch_no_tgt }}"
    dest: "{{ exp_imp_prechecks.target_file_path }}/patch-no.txt"
  when: r3load_outputs_tgt.stdout != ''

- name: target | copy the content R3load to a file of target pas
  local_action: 
    module: copy 
    content: "{{ r3load_outputs }}"
    dest: "{{ exp_imp_prechecks.target_file_path }}/r3load-version.txt"
  when: r3load_outputs_tgt.stdout != ''

- name: target | copy the content R3load to a file of target pas
  local_action: 
    module: copy 
    content: "Error: {{ r3load_outputs_tgt.msg }}"
    dest: "{{ exp_imp_prechecks.target_file_path }}/r3load-version.txt"
  when: r3load_outputs_tgt.stdout == ''

############################################ r3trans version ###############################################################
- name: target | r3trans version check
  command: sudo su - {{ app_sid_tgt | lower }}adm -c "R3trans -version"
  register: r3trans_tgt
  delegate_to: "{{ groups['target_pas'][0] }}"
  failed_when: r3trans_tgt.rc not in [12,0]

- set_fact: 
    r3trans: "{{ r3trans_tgt.stdout_lines[7]}} {{r3trans_tgt.stdout_lines[25]}}"
  when: r3trans_tgt.stdout != ''

- name: target | copy the content r3trans to a file of target pas
  local_action: 
    module: copy 
    content: "{{ r3trans }}"
    dest: "{{ exp_imp_prechecks.target_file_path }}/r3trans-version.txt"
  when: r3trans_tgt.stdout != ''

- name: target | copy the content r3trans to a file of target pas
  local_action: 
    module: copy 
    content: "Error: {{ r3trans_tgt.msg }}"
    dest: "{{ exp_imp_prechecks.target_file_path }}/r3trans-version.txt"
  when: r3trans_tgt.stdout == ''

############################################ disp+work ###############################################################
- name: target | disp_work check
  command: sudo su - {{ app_sid_tgt | lower }}adm -c "disp+work"
  register: disp_work_tgt 
  delegate_to: "{{ groups['target_pas'][0] }}"

- set_fact: 
    disp_work: "{{ disp_work_tgt.stdout_lines[5]}} {{disp_work_tgt.stdout_lines[19]}}"
  when: disp_work_tgt.stdout != ''

- name: target | copy the content disp_work to a file of target pas
  local_action: 
    module: copy 
    content: "{{ disp_work }}"
    dest: "{{ exp_imp_prechecks.target_file_path }}/disp_work.txt"
  when: disp_work_tgt.stdout != ''

- name: target | copy the content disp_work to a file of target pas
  local_action: 
    module: copy 
    content: "Error: {{ disp_work_tgt.msg }}"
    dest: "{{ exp_imp_prechecks.target_file_path }}/disp_work.txt"
  when: disp_work_tgt.stdout == ''

#################################### cpu count and no of process count on target system ############################################

- name: target | Command to check the CPU Count
  shell: nproc
  become: yes
  register: output_cpucount_tgt
  ignore_errors: true
  delegate_to: "{{ groups['target_pas'][0] }}"

- name: target | copy the content CPU Count to a file of target pas
  local_action: 
    module: copy 
    content: "Error: {{ output_cpucount_tgt.stderr }}"
    dest: "{{ exp_imp_prechecks.target_file_path }}/target_cpu_count.txt"
  when: output_cpucount_tgt.stdout == ''

- name: target | copy the content CPU Count to a file of target pas
  local_action: 
    module: copy 
    content: "{{ output_cpucount_tgt.stdout }}"
    dest: "{{ exp_imp_prechecks.target_file_path }}/target_cpu_count.txt"
  when: output_cpucount_tgt.stdout != ''

- name: target | get the number of processes easy for user to a file of target pas
  local_action: 
    module: copy 
    content: "Error in processes count"
    dest: "{{ exp_imp_prechecks.target_file_path }}/target_processes_count.txt"
  when: output_cpucount_tgt.stdout == ''
  
- name: target | set fact number of processes easy for user of target pas
  set_fact:
    no_process_tgt: "{{ (output_cpucount_tgt.stdout | int)*3}}"
  when: output_cpucount_tgt.stdout != ''

- name: target | get the number of processes easy for user to a file of target pas
  local_action: 
    module: copy 
    content: "{{ no_process_tgt }}"
    dest: "{{ exp_imp_prechecks.target_file_path }}/target_processes_count.txt"
  when: output_cpucount_tgt.stdout != ''

######################################### ascs service ###########################################################

- name: target | Status of start and stop of ascs service
  shell: sudo su - {{ app_sid_tgt | lower }}adm -c "sapcontrol -nr {{ ascs_instance_number }} -function GetProcessList"
  register: ascs_service_status
  delegate_to: "{{ groups['target_ascs'][0] }}"
  failed_when: "ascs_service_status.rc not in [0,1,2,3,4,5]"

- name: target | copy the content of ascs service status to a file
  local_action: 
    module: copy 
    content: "{{ ascs_service_status.stdout }}"
    dest: "{{ exp_imp_prechecks.target_file_path }}/ascsservice_status.txt" 

######################################### pas service ###########################################################

- name: target | Status of start and stop of pas service
  shell: sudo su - {{ app_sid_tgt | lower }}adm -c "sapcontrol -nr {{ pas_instance_number }} -function GetProcessList"
  register: pas_service_status
  delegate_to: "{{ groups['target_pas'][0] }}"
  failed_when: "pas_service_status.rc not in [0,1,2,3,4,5]"

- name: target | copy the content of pas service status to a file
  local_action: 
    module: copy 
    content: "{{ pas_service_status.stdout }}"
    dest: "{{ exp_imp_prechecks.target_file_path }}/passervice_status.txt" 

######################################### db service ###########################################################

- name: target | Status of start and stop of database service
  shell: sudo su - {{ db_sid_tgt | lower }}adm -c "sapcontrol -nr {{ db_instance_number }} -function GetProcessList"
  failed_when: "db_service_status.rc not in [0,1,2,3,4,5]"
  register: db_service_status
  delegate_to: "{{ groups['target_db'][0] }}"

- name: target | copy the content of db service status to a file
  local_action: 
    module: copy 
    content: "{{ db_service_status.stdout }}"
    dest: "{{ exp_imp_prechecks.target_file_path }}/dbservice_status.txt" 

#################################### ulimit -a for root user on target system ############################################

- name: target | Execute command for ulimit for root user
  shell: ulimit -a
  register: ulimit_outputs_tgt
  become: yes
  ignore_errors: true
  delegate_to: "{{ groups['target_pas'][0] }}"

- name: target | get ulimit output to a file of target pas for root user
  local_action: 
    module: copy 
    content: "{{ ulimit_outputs_tgt.stdout }}"
    dest: "{{ exp_imp_prechecks.target_file_path }}/target_ulimit.txt"
  when: ulimit_outputs_tgt.stdout_lines | length > 0

- name: target | get ulimit output to a file of target pas for root user
  local_action: 
    module: copy 
    content: "{{ ulimit_outputs_tgt.stderr }}"
    dest: "{{ exp_imp_prechecks.target_file_path }}/target_ulimit.txt"
  when: ulimit_outputs_tgt.stderr is search('Command not found')

#################################### ulimit -a for sidadm user on target system ############################################

- name: target | Execute command for ulimit for sidadm user
  shell: sudo su - {{ app_sid_tgt|lower }}adm -c 'ulimit -a'
  register: ulimit_outputs_tgt_sidadm
  become: yes
  ignore_errors: true
  delegate_to: "{{ groups['target_pas'][0] }}"

- name: target | get ulimit output to a file of target pas for sidadm user
  local_action: 
    module: copy 
    content: "{{ ulimit_outputs_tgt_sidadm.stdout }}"
    dest: "{{ exp_imp_prechecks.target_file_path }}/target_ulimit_sidadm.txt"
  when: ulimit_outputs_tgt_sidadm.stdout_lines | length > 0

- name: target | get ulimit output to a file of target pas for sidadm user
  local_action: 
    module: copy 
    content: "{{ ulimit_outputs_tgt_sidadm.stderr }}"
    dest: "{{ exp_imp_prechecks.target_file_path }}/target_ulimit_sidadm.txt"
  when: ulimit_outputs_tgt_sidadm.stderr is search('Command not found')

#################################### check if export directory is shared on target ############################################

- name: target | Check if export directory is shared on target system
  command: showmount -e {{ hostvars[groups['target_pas'][0]].ansible_host }}
  register: check_exp_dir_shared_tgt
  delegate_to: "{{ groups['target_pas'][0] }}"
  become: yes
  ignore_errors: true

- name: target | copy export directory shared status to a file
  local_action: 
    module: copy 
    content: "shared"
    dest: "{{ exp_imp_prechecks.target_file_path }}/target_exp_dir.txt"
  when: check_exp_dir_shared_tgt.stdout is search ('{{exp_imp_prechecks.expdir}}')

#################################### Firewall status on target ############################################

- name: target | Command to check the Firewall status in target system
  shell: systemctl status firewalld | awk 'NR==3'
  become: yes
  register: output_firewall
  ignore_errors: true
  delegate_to: "{{ groups['target_pas'][0] }}"

#################################### fstab check on target ############################################

- name: target | Command to check the fstab
  shell: cat /etc/fstab | grep -v '^#' | awk '{print $2}' | tr '\n' ' '
  become: yes
  register: output_fstab_tgt
  ignore_errors: true
  delegate_to: "{{ groups['target_pas'][0] }}"

#################################### Swap space check on target ############################################

- name: target | Checking the size of swap
  shell: free -g | grep Swap | awk '{print $2}'
  become: yes
  register: output_swap_tgt
  ignore_errors: true
  delegate_to: "{{ groups['target_pas'][0] }}"

#################################### timezone check on target ############################################

- name: target | Command to check the timezone
  shell: date
  become: yes
  register: output_timezone_tgt
  ignore_errors: true
  delegate_to: "{{ groups['target_pas'][0] }}"

#################################### Check saptune is set on target ############################################

- name: target | Fetching the saptune name
  shell: /usr/sbin/saptune solution list | awk '{print $1,$2}' | sed -n '/\* /s///p'
  become: yes
  register: output_saptune_tgt
  ignore_errors: true
  delegate_to: "{{ groups['target_pas'][0] }}"

