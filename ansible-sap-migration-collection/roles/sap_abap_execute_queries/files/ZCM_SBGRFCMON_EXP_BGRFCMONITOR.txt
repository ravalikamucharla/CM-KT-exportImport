*---------------------------------------------------------------------*
* Program Name        :  ZCM_SBGRFCMON_EXP_BGRFCMONITOR               *
* Title               :  Capture Error BGRFC's                        *
* Purpose             :  To capture BGRFC's and its details           *
*---------------------------------------------------------------------*
* Related Transaction OR Standard Program References                  *
* SBGRFCMON                                                           *
*---------------------------------------------------------------------*
* Tables              :   SELECT    UPDATE      INSERT      DELETE    *
* trfc_i_dest               X                                         *
* trfc_i_unit               X                                         *
* trfc_o_unit               X                                         *
* trfc_o_dest               X                                         *
* qrfc_i_unit               X                                         *
* qrfc_i_qin_top            X                                         *
* qrfc_o_unit               X                                         *
* qrfc_o_qout_top           X                                         *
*---------------------------------------------------------------------*
* Program Change History                                              *
*---------------------------------------------------------------------*
*Date        Version   Author       TR#/Local     Description         *
*---------------------------------------------------------------------*
*02-16-2021  Initial  Yasaswini K  Local     To Capture BGRFC monitor *
*                                             details                 *
*12-24-2021  V001     Yasaswini K  Local     To make action as Export *
*08-18-2022  V002     Ashwini K P  Local     To add exceptions for all*
*                                            classes                  *
*09-13-2022  V003     Soumya Ray   Local     To remove inline declarat*
*                                            ions                     *
*---------------------------------------------------------------------*
REPORT zcm_sbgrfcmon_exp_bgrfcmonitor.

LOAD-OF-PROGRAM.

CLASS lcl_bgrfc DEFINITION.

  PUBLIC SECTION.

    TYPES: ltt_rfc TYPE STANDARD TABLE OF bgrfc_unit_information.

    METHODS:

      "Method to get TRFC Inbound details
      get_trfc_in
        EXPORTING lt_bgrfc_success TYPE ltt_rfc
                  lt_bgrfc_error   TYPE ltt_rfc
                  lt_bgrfc_lock    TYPE ltt_rfc,

      "Method to get TRFC Outbound details
      get_trfc_out
        EXPORTING lt_bgrfc_success TYPE ltt_rfc
                  lt_bgrfc_error   TYPE ltt_rfc
                  lt_bgrfc_lock    TYPE ltt_rfc,

      "Method to get QRFC Inbound details
      get_qrfc_in
        EXPORTING lt_bgrfc_success TYPE ltt_rfc
                  lt_bgrfc_error   TYPE ltt_rfc
                  lt_bgrfc_lock    TYPE ltt_rfc,

      "Method to get QRFC Inbound details
      get_qrfc_out
        EXPORTING lt_bgrfc_success TYPE ltt_rfc
                  lt_bgrfc_error   TYPE ltt_rfc
                  lt_bgrfc_lock    TYPE ltt_rfc.


ENDCLASS.

FORM get_config
              TABLES lt_input  STRUCTURE tab512
                     lt_output STRUCTURE tab512.

  CONSTANTS: lc_invalid TYPE c VALUE 'No input given' LENGTH 15,
             lc_export  TYPE c VALUE 'EXPORT'         LENGTH 6, "+V001
             lc_nodata  TYPE c VALUE 'No Data Found'  LENGTH 13,
             lc_type    TYPE c VALUE 'Type'           LENGTH 4,
             lc_title   TYPE c VALUE 'MonitorBgrfc'   LENGTH 12,
             lc_tittle1 TYPE c VALUE 'MonitorBgrfcSuccess'
                                                      LENGTH 20,
             lc_tittle2 TYPE c VALUE 'MonitorBgrfcLock'
                                                      LENGTH 16,
             lc_tittle3 TYPE c VALUE 'MonitorBgrfcError'
                                                      LENGTH 17,
             lc_rfctype TYPE c VALUE 'RFCType'        LENGTH 7,
             lc_unit_id TYPE c VALUE 'UnitID'         LENGTH 6,
             lc_dest    TYPE c VALUE 'Destination'    LENGTH 11,
             lc_queue   TYPE c VALUE 'QueueName'      LENGTH 9,
             lc_state   TYPE c VALUE 'Status'         LENGTH 6,
             lc_fucname TYPE c VALUE 'FMname'         LENGTH 6,
             lc_cnt     TYPE c VALUE 'FMsCalled'      LENGTH 9,
             lc_client  TYPE c VALUE 'Client'         LENGTH 6,
             lc_tcode   TYPE c VALUE 'Tcode'          LENGTH 5,
             lc_cprog   TYPE c VALUE 'Program'        LENGTH 7,
             lc_host    TYPE c VALUE 'Host'           LENGTH 4,
             lc_uname   TYPE c VALUE 'Username'       LENGTH 8,
             lc_date    TYPE c VALUE 'Date'           LENGTH 4,
             lc_time    TYPE c VALUE 'Time'           LENGTH 4,
             lc_lockid  TYPE c VALUE 'LockId'         LENGTH 6,
             lc_kind    TYPE c VALUE 'LockKind'       LENGTH 8,
             lc_reason  TYPE c VALUE 'Lockreason'     LENGTH 10,
             lc_message TYPE c VALUE 'Message'        LENGTH 7,
             lc_id      TYPE c VALUE 'MessageId'      LENGTH 9,
             lc_number  TYPE c VALUE 'MessageNo'      LENGTH 9,
             lc_sep     TYPE c VALUE '|'              LENGTH 1,
* Begin of changes V002
             lc_incout  TYPE c VALUE 'Incorrect Input' LENGTH 17.
* End of changes V002

  DATA: lt_success         TYPE STANDARD TABLE OF
        bgrfc_unit_information,
        lt_error           TYPE STANDARD TABLE OF
        bgrfc_unit_information,
        lt_lock            TYPE STANDARD TABLE OF
        bgrfc_unit_information,
        lv_type            TYPE string,
        lv_rfctype         TYPE string,
        lo_monitor_utility TYPE REF TO if_bgrfc_monitor_api_utility,
        lo_monitor_bgrfc   TYPE REF TO lcl_bgrfc,
        lv_unit_id         TYPE string,
        ls_output          TYPE tab512,
        lv_cnt             TYPE string,
        ls_input           TYPE tab512,
        lv_action          TYPE char20,
* Begin of changes V002
        lv_msg             TYPE string,
        lr_bgrfc_excp      TYPE REF TO cx_bgrfc_monitor_api,
* End of changes V002
* Begin of changes in V003
        ls_error           TYPE bgrfc_unit_information,
        ls_lock            TYPE bgrfc_unit_information,
        ls_success         TYPE bgrfc_unit_information.
* End of changes in V003

  "Read input
  READ TABLE lt_input INTO ls_input INDEX 1.

  IF sy-subrc EQ 0.
    lv_action = ls_input.      " Action
  ELSE.
    "Invalid input
    ls_output = lc_title.
    APPEND ls_output TO lt_output.
    CLEAR: ls_output.

    ls_output = lc_invalid.
    APPEND ls_output TO lt_output.
    RETURN.
  ENDIF.

  "  Instansiate the object
  CREATE OBJECT lo_monitor_bgrfc.

  TRY.  " +V002
      "creating instance for getting status text and lock reason
      lo_monitor_utility =
      cl_bgrfc_monitor_api=>create_utility( ).

* Begin of changes V002
    CATCH cx_bgrfc_monitor_api INTO lr_bgrfc_excp.
      lv_msg = lr_bgrfc_excp->get_text( ).

      " Title
      ls_output = lc_title.
      APPEND ls_output TO lt_output.
      CLEAR: ls_output.

      ls_output = lv_msg.
      APPEND ls_output TO lt_output.
      CLEAR: ls_output.
      RETURN.

  ENDTRY.
* End of changes V002

  " Calling method to get TRFC Inbound records
  CALL METHOD lo_monitor_bgrfc->get_trfc_in
    IMPORTING
      lt_bgrfc_success = lt_success
      lt_bgrfc_error   = lt_error
      lt_bgrfc_lock    = lt_lock.

  " Calling method to get TRFC outbound records
  CALL METHOD lo_monitor_bgrfc->get_trfc_out
    IMPORTING
      lt_bgrfc_success = lt_success
      lt_bgrfc_error   = lt_error
      lt_bgrfc_lock    = lt_lock.

  " Calling method to get QRFC Inbound records
  CALL METHOD lo_monitor_bgrfc->get_qrfc_in
    IMPORTING
      lt_bgrfc_success = lt_success
      lt_bgrfc_error   = lt_error
      lt_bgrfc_lock    = lt_lock.

  " Calling method to get QRFC outbound records
  CALL METHOD lo_monitor_bgrfc->get_qrfc_out
    IMPORTING
      lt_bgrfc_success = lt_success
      lt_bgrfc_error   = lt_error
      lt_bgrfc_lock    = lt_lock.

  CASE lv_action.

    WHEN lc_export.         " When action is Success   "+V001

      "Tittle
      ls_output = lc_tittle1.
      APPEND ls_output TO lt_output.
      CLEAR: ls_output.

      IF lt_success IS NOT INITIAL.

        "Column Heading
        CONCATENATE lc_type                  lc_sep
                    lc_rfctype               lc_sep
                    lc_unit_id               lc_sep
                    lc_dest                  lc_sep
                    lc_queue                 lc_sep
                    lc_state                 lc_sep
                    lc_fucname               lc_sep
                    lc_cnt                   lc_sep
                    lc_client                lc_sep
                    lc_tcode                 lc_sep
                    lc_cprog                 lc_sep
                    lc_host                  lc_sep
                    lc_uname                 lc_sep
                    lc_date                  lc_sep
                    lc_time INTO ls_output.

        APPEND ls_output TO lt_output.
        CLEAR: ls_output.

        LOOP AT lt_success INTO ls_success.
          "Type(inbound/outbound) and RFC type(TRFC/QRFC)
          SPLIT ls_success-dest_name_outb AT space INTO
          lv_type lv_rfctype.

          "unit ID and function modules count
          lv_unit_id = ls_success-unit_id.
          lv_cnt     = ls_success-function_cnt.

          IF lo_monitor_utility IS BOUND.
            "Status Text
            ls_success-state_text =
            lo_monitor_utility->get_unit_state_text( ls_success-state ).
          ENDIF.

          "Appending to output
          CONCATENATE lv_type                  lc_sep
                      lv_rfctype               lc_sep
                      lv_unit_id               lc_sep
                      ls_success-dest_name_inb lc_sep
                      ls_success-queue_name    lc_sep
                      ls_success-state_text    lc_sep
                      ls_success-funcname      lc_sep
                      lv_cnt                   lc_sep
                      ls_success-client        lc_sep
                      ls_success-tcode         lc_sep
                      ls_success-cprog         lc_sep
                      ls_success-host_name     lc_sep
                      ls_success-uname         lc_sep
                      ls_success-date_c        lc_sep
                      ls_success-time_c INTO ls_output.

          APPEND ls_output TO lt_output.


          CLEAR: ls_success,
                 lv_type,
                 lv_rfctype,
                 lv_cnt,
                 lv_unit_id,
                 ls_output.
        ENDLOOP.

      ELSE.
        "Nodata Found
        ls_output = lc_nodata.
        APPEND ls_output TO lt_output.
        CLEAR: ls_output.
      ENDIF.

      "Monitor BGRFC Lock Entries

      "Blank Line
      APPEND ls_output TO lt_output.
      CLEAR: ls_output.

      "Tittle
      ls_output = lc_tittle2.
      APPEND ls_output TO lt_output.
      CLEAR: ls_output.

      IF lt_lock IS NOT INITIAL.

        DATA: lv_lock_id   TYPE string,
              lv_lock_kind TYPE string.

        CLEAR: lv_lock_id, lv_lock_kind.

        "Column Heading
        CONCATENATE lc_type                  lc_sep
                    lc_rfctype               lc_sep
                    lc_unit_id               lc_sep
                    lc_dest                  lc_sep
                    lc_queue                 lc_sep
                    lc_state                 lc_sep
                    lc_fucname               lc_sep
                    lc_cnt                   lc_sep
                    lc_client                lc_sep
                    lc_tcode                 lc_sep
                    lc_cprog                 lc_sep
                    lc_host                  lc_sep
                    lc_uname                 lc_sep
                    lc_date                  lc_sep
                    lc_time                  lc_sep
                    lc_lockid                lc_sep
                    lc_kind                  lc_sep
                    lc_reason INTO ls_output.
        APPEND ls_output TO lt_output.
        CLEAR: ls_output.

        LOOP AT lt_lock INTO ls_lock.

          "Type(inbound/outbound) and RFC type(TRFC/QRFC)
          SPLIT ls_lock-dest_name_outb AT space INTO
          lv_type lv_rfctype.

          "unit id, count of FM, lock id, lock kind
          lv_unit_id = ls_lock-unit_id.
          lv_cnt     = ls_lock-function_cnt.
          lv_lock_id = ls_lock-lock_id.
          lv_lock_kind = ls_lock-lock_kind.

          IF lo_monitor_utility IS BOUND.
            "Status Text
            ls_lock-state_text =
            lo_monitor_utility->get_unit_state_text( ls_lock-state ).
            "Lock reason
            IF ls_lock-lock_kind IS NOT INITIAL.
              ls_lock-lock_reason =
           lo_monitor_utility->get_lock_type_text( ls_lock-lock_kind ).
            ENDIF.
          ENDIF.

          "Appending data to output
          CONCATENATE lv_type               lc_sep
                      lv_rfctype            lc_sep
                      lv_unit_id            lc_sep
                      ls_lock-dest_name_inb lc_sep
                      ls_lock-queue_name    lc_sep
                      ls_lock-state_text    lc_sep
                      ls_lock-funcname      lc_sep
                      lv_cnt                lc_sep
                      ls_lock-client        lc_sep
                      ls_lock-tcode         lc_sep
                      ls_lock-cprog         lc_sep
                      ls_lock-host_name     lc_sep
                      ls_lock-uname         lc_sep
                      ls_lock-date_c        lc_sep
                      ls_lock-time_c        lc_sep
                      lv_lock_id            lc_sep
                      lv_lock_kind          lc_sep
                      ls_lock-lock_reason   INTO ls_output.

          APPEND ls_output TO lt_output.


          CLEAR: ls_lock,
                 lv_type,
                 lv_rfctype,
                 lv_cnt,
                 lv_unit_id,
                 lv_lock_kind,
                 lv_lock_id,
                 ls_output.
        ENDLOOP.
      ELSE.
        "Nodata found
        ls_output = lc_nodata.
        APPEND ls_output TO lt_output.
        CLEAR: ls_output.
      ENDIF.

      ""Monitor BGRFC Error Entries

      "Blank Line
      APPEND ls_output TO lt_output.
      CLEAR: ls_output.

      "Tittle
      ls_output = lc_tittle3.
      APPEND ls_output TO lt_output.
      CLEAR: ls_output.

      IF lt_error IS NOT INITIAL.

        "Column Heading
        CONCATENATE lc_type                  lc_sep
                    lc_rfctype               lc_sep
                    lc_unit_id               lc_sep
                    lc_dest                  lc_sep
                    lc_queue                 lc_sep
                    lc_state                 lc_sep
                    lc_fucname               lc_sep
                    lc_cnt                   lc_sep
                    lc_client                lc_sep
                    lc_tcode                 lc_sep
                    lc_cprog                 lc_sep
                    lc_host                  lc_sep
                    lc_uname                 lc_sep
                    lc_date                  lc_sep
                    lc_time                  lc_sep
                    lc_message               lc_sep
                    lc_id                    lc_sep
                    lc_number  INTO ls_output.

        APPEND ls_output TO lt_output.
        CLEAR: ls_output.

        LOOP AT lt_error INTO ls_error.

          SPLIT ls_error-dest_name_outb AT space INTO
          lv_type lv_rfctype.

          "Unit id, count of FM's
          lv_unit_id = ls_error-unit_id.
          lv_cnt     = ls_error-function_cnt.

          IF lo_monitor_utility IS BOUND.
            "Status Text
            ls_error-state_text =
            lo_monitor_utility->get_unit_state_text( ls_error-state ).
          ENDIF.

          "Appending data to output
          CONCATENATE lv_type                lc_sep
                      lv_rfctype             lc_sep
                      lv_unit_id             lc_sep
                      ls_error-dest_name_inb lc_sep
                      ls_error-queue_name    lc_sep
                      ls_error-state_text    lc_sep
                      ls_error-funcname      lc_sep
                      lv_cnt                 lc_sep
                      ls_error-client        lc_sep
                      ls_error-tcode         lc_sep
                      ls_error-cprog         lc_sep
                      ls_error-host_name     lc_sep
                      ls_error-uname         lc_sep
                      ls_error-date_c        lc_sep
                      ls_error-time_c        lc_sep
                      ls_error-message       lc_sep
                      ls_error-message_id    lc_sep
                      ls_error-message_number lc_sep
                      ls_error-lock_reason   INTO ls_output.

          APPEND ls_output TO lt_output.


          CLEAR: ls_error,
                 lv_type,
                 lv_rfctype,
                 lv_cnt,
                 lv_unit_id,
                 ls_output.
        ENDLOOP.
      ELSE.
        "Nodata Found
        ls_output = lc_nodata.
        APPEND ls_output TO lt_output.
        CLEAR: ls_output.
      ENDIF.

    WHEN OTHERS.
      "Invalid input
      ls_output = lc_title.
      APPEND ls_output TO lt_output.
      CLEAR: ls_output.

      ls_output = lc_incout.
      APPEND ls_output TO lt_output.
      CLEAR: ls_output.
  ENDCASE.

  " To add Null value into blank spaces
  DO.
    REPLACE ALL OCCURRENCES OF SUBSTRING '||'
    IN TABLE lt_output WITH '|NULL|'.
    FIND '||' IN TABLE lt_output.
    IF sy-subrc <> 0.
      EXIT .
    ENDIF.
  ENDDO.

ENDFORM.
CLASS lcl_bgrfc IMPLEMENTATION.
  METHOD get_trfc_in.

    TYPES: BEGIN OF ty_bgrfc_unit,
             unit_id TYPE bgrfc_unit_id,
             client  TYPE mandt,
           END OF   ty_bgrfc_unit.

    CONSTANTS: lc_inboundtrfc TYPE c VALUE 'Inbound TRFC' LENGTH '12',
               lc_unit        TYPE c VALUE '20'           LENGTH '2'.

    DATA: lo_ref_trfc_in_mon TYPE REF TO if_trfc_inbound_monitor,
          lt_trfc_i_unit     TYPE STANDARD TABLE OF ty_bgrfc_unit,
          ltt_info_trfc_in   TYPE trfc_inb_unit_info_tab,
          ltt_temp_tin       TYPE trfc_inb_unit_info_tab,
          lv_unit            TYPE i,
          ls_trfc_in         TYPE bgrfc_unit_information,
* Begin of changes V002
          lr_bgrfc_auth      TYPE REF TO
                             cx_bgrfc_monitor_api_authority,
          lr_bgrfc_excp      TYPE REF TO cx_bgrfc_monitor_api,
          lr_bgrfc_inv_dest  TYPE REF TO
                             cx_bgrfc_invalid_destination,
* End of changes V002
* Begin of changes in V003
          ls_trfc_i_dest     TYPE trfc_i_dest,
          ls_info_trfc_in    TYPE trfc_unit_info_inbound,
          lt_trfc_i_dest     TYPE STANDARD TABLE OF trfc_i_dest.
* End of changes in V003


    FREE: lt_bgrfc_success[],
          lt_bgrfc_lock[],
          lt_trfc_i_unit[],
          ltt_temp_tin[],
          ltt_info_trfc_in[],
          lt_bgrfc_error[],
          lt_trfc_i_dest[]. "+V003

    CLEAR: lv_unit,
           ls_trfc_in,
           ls_trfc_i_dest, ls_info_trfc_in. "+V003

    "creating instance for TRFC outbound
    lo_ref_trfc_in_mon =
    cl_bgrfc_monitor_api=>create_trfc_monitor_inbound( ).

    " Not bound returning
    IF lo_ref_trfc_in_mon IS NOT BOUND.
      RETURN.
    ENDIF.

    "get TRFC Inbound unit details
    SELECT unit_id client FROM trfc_i_unit
       INTO TABLE lt_trfc_i_unit
       WHERE client = sy-mandt.
    IF sy-subrc = 0.
      "Get TRFC Inbound destination details
      SELECT * FROM trfc_i_dest
        INTO TABLE lt_trfc_i_dest
        FOR ALL ENTRIES IN lt_trfc_i_unit
        WHERE unit_id = lt_trfc_i_unit-unit_id.
      IF sy-subrc = 0.
        "Deleting duplicate entries for destination
        SORT lt_trfc_i_dest BY dest_name.
        DELETE ADJACENT DUPLICATES FROM lt_trfc_i_dest
             COMPARING dest_name.
        lv_unit = lc_unit.

        "Get the details of TRFC by passing destination
        LOOP AT lt_trfc_i_dest INTO ls_trfc_i_dest.
          TRY.    " +V002
              "Get unit information
              ltt_info_trfc_in =
              lo_ref_trfc_in_mon->get_unit_information_by_dest(
                dest_name        = ls_trfc_i_dest-dest_name
                unit_number      = lv_unit
                show_deleted     = space ).
* Begin of changes V002
            CATCH: cx_bgrfc_monitor_api_authority INTO lr_bgrfc_auth,
                   cx_bgrfc_monitor_api INTO lr_bgrfc_excp,
                   cx_bgrfc_invalid_destination INTO lr_bgrfc_inv_dest.
          ENDTRY.
* End of changes V002
          APPEND LINES OF ltt_info_trfc_in TO ltt_temp_tin.
          CLEAR: ls_trfc_i_dest.
          FREE: ltt_info_trfc_in[].
        ENDLOOP.

        LOOP AT ltt_temp_tin INTO ls_info_trfc_in.
          MOVE-CORRESPONDING ls_info_trfc_in TO ls_trfc_in.
          "Dest name
          ls_trfc_in-dest_name_inb = ls_info_trfc_in-dest_name.
          "RFC type
          ls_trfc_in-dest_name_outb = lc_inboundtrfc.
          "Format date and time
          CONVERT TIME STAMP ls_info_trfc_in-ctimestamp
                  TIME ZONE sy-zonlo INTO
                  DATE ls_trfc_in-date_c TIME ls_trfc_in-time_c.
          "Format date and time
          CONVERT TIME STAMP ls_info_trfc_in-exe_time_stamp
                  TIME ZONE  sy-zonlo INTO
                  DATE ls_trfc_in-date_e TIME ls_trfc_in-time_e.

          CASE ls_info_trfc_in-state.

              "Appending locked records to lock table
            WHEN if_bgrfc_client=>unit_state_blocked OR
              if_bgrfc_client=>unit_state_locked OR
              if_bgrfc_client=>unit_state_retry  OR
              if_bgrfc_client=>unit_state_update_task_failed OR
              if_bgrfc_client=>unit_state_supportability.
              APPEND ls_trfc_in TO lt_bgrfc_lock.

              " Appending error records to error table
            WHEN if_bgrfc_client=>unit_state_communication_err OR
                 if_bgrfc_client=>unit_state_execution_err     OR
                 if_bgrfc_client=>unit_state_server_shutdown.
              APPEND ls_trfc_in TO lt_bgrfc_error.

              "Appending success records to success table
            WHEN if_bgrfc_client=>unit_state_executed OR
              if_bgrfc_client=>unit_state_runnable OR
              if_bgrfc_client=>unit_state_in_execution.
              APPEND ls_trfc_in TO lt_bgrfc_success.

          ENDCASE.
          CLEAR: ls_info_trfc_in, ls_trfc_in.
        ENDLOOP.
      ENDIF.
    ENDIF.
  ENDMETHOD.

  METHOD get_trfc_out.

    CONSTANTS: lc_unit         TYPE c VALUE '20' LENGTH 2,
               lc_outboundtrfc TYPE c VALUE 'Outbound TRFC' LENGTH 13.

    DATA: lo_ref_trfc_out_mon TYPE REF TO if_trfc_outbound_monitor,
          ls_luw_tab_tout     TYPE bgrfc_unit_information,
          ltt_info_trfc_out   TYPE trfc_outb_unit_info_tab,
          ltt_temp_tout       TYPE trfc_outb_unit_info_tab,
          lv_unit             TYPE i,
* Begin of changes V002
          lr_bgrfc_auth       TYPE REF TO
                              cx_bgrfc_monitor_api_authority,
          lr_bgrfc_excp       TYPE REF TO cx_bgrfc_monitor_api,
          lr_bgrfc_inv_dest   TYPE REF TO
                              cx_bgrfc_invalid_destination,
* End of changes V002
* Begin of changes in V003
          ls_tout             TYPE trfc_unit_info_outbound,
          ls_trfc_o_dest      TYPE trfc_o_dest,
          lt_trfc_o_unit1     TYPE STANDARD TABLE OF trfc_o_unit,
          lt_trfc_o_dest      TYPE STANDARD TABLE OF trfc_o_dest.
* End of changes in V003

    FREE: ltt_info_trfc_out[],
          ltt_temp_tout[],
          lt_trfc_o_unit1[], lt_trfc_o_dest[]."+V003

    CLEAR: ls_luw_tab_tout,
           lv_unit.

    "creating instance for QRFC outbound
    lo_ref_trfc_out_mon =
    cl_bgrfc_monitor_api=>create_trfc_monitor_outbound( ).

    " Not bound returning
    IF lo_ref_trfc_out_mon IS NOT BOUND.
      RETURN.
    ENDIF.

    "get TRFC outbound unit details
    SELECT * FROM trfc_o_unit
       INTO TABLE lt_trfc_o_unit1
       WHERE client = sy-mandt.
    IF sy-subrc = 0.
      "Get TRFC outbound destination details
      SELECT * FROM trfc_o_dest
        INTO TABLE lt_trfc_o_dest
        FOR ALL ENTRIES IN lt_trfc_o_unit1
        WHERE unit_id = lt_trfc_o_unit1-unit_id.
      IF sy-subrc = 0.
        "Deleting duplicate entries for destination
        SORT lt_trfc_o_dest BY dest_name.
        DELETE ADJACENT DUPLICATES FROM lt_trfc_o_dest
             COMPARING dest_name.
        lv_unit = lc_unit.

        "Get the details of TRFC by passing destination
        LOOP AT lt_trfc_o_dest INTO ls_trfc_o_dest.
          TRY.   " +V002
              "Get unit information
              ltt_info_trfc_out =
              lo_ref_trfc_out_mon->get_unit_information_by_dest(
              dest_name        = ls_trfc_o_dest-dest_name
              unit_number      = lv_unit
              show_deleted     = space ).
* Begin of changes V002
            CATCH: cx_bgrfc_monitor_api_authority INTO lr_bgrfc_auth,
                   cx_bgrfc_monitor_api INTO lr_bgrfc_excp,
                   cx_bgrfc_invalid_destination INTO lr_bgrfc_inv_dest.
          ENDTRY.
* End of changes V002

          APPEND LINES OF ltt_info_trfc_out TO ltt_temp_tout.
          CLEAR: ls_trfc_o_dest.
          FREE: ltt_info_trfc_out[].
        ENDLOOP.

        LOOP AT ltt_temp_tout INTO ls_tout.
          MOVE-CORRESPONDING ls_tout TO ls_luw_tab_tout.
          "Dest name
          ls_luw_tab_tout-dest_name_outb = lc_outboundtrfc.
          "RFC type
          ls_luw_tab_tout-dest_name_inb = ls_tout-dest_name.
          "Format date and time
          CONVERT TIME STAMP ls_tout-ctimestamp
                 TIME ZONE sy-zonlo
                 INTO DATE ls_luw_tab_tout-date_c
                 TIME ls_luw_tab_tout-time_c.
          "Format date and time
          CONVERT TIME STAMP ls_tout-exe_time_stamp
                  TIME ZONE sy-zonlo
                  INTO DATE ls_luw_tab_tout-date_e
                  TIME ls_luw_tab_tout-time_e.
          CASE ls_tout-state .
              "Appending locked records to lock table
            WHEN if_bgrfc_client=>unit_state_blocked OR
              if_bgrfc_client=>unit_state_locked OR
              if_bgrfc_client=>unit_state_retry  OR
              if_bgrfc_client=>unit_state_update_task_failed OR
              if_bgrfc_client=>unit_state_supportability.
              APPEND ls_luw_tab_tout TO lt_bgrfc_lock.

              " Appending error records to error table
            WHEN if_bgrfc_client=>unit_state_communication_err OR
           if_bgrfc_client=>unit_state_execution_err OR
            if_bgrfc_client=>unit_state_conversion_error OR
            if_bgrfc_client=>unit_state_server_shutdown.

              APPEND ls_luw_tab_tout TO lt_bgrfc_error.

              "Appending success records to success table
            WHEN if_bgrfc_client=>unit_state_executed OR
            if_bgrfc_client=>unit_state_runnable OR
            if_bgrfc_client=>unit_state_in_execution.

              APPEND ls_luw_tab_tout TO lt_bgrfc_success.
          ENDCASE.
          CLEAR: ls_tout, ls_luw_tab_tout.
        ENDLOOP.

      ENDIF.
    ENDIF.

  ENDMETHOD.

  METHOD get_qrfc_in.

    CONSTANTS: lc_inboundqrfc TYPE c VALUE 'Inbound QRFC' LENGTH '12',
               lc_unit        TYPE c VALUE '20'           LENGTH '20'.

    DATA: lo_ref_qrfc_in_mon TYPE REF TO if_qrfc_inbound_monitor,
          ltt_info_qin       TYPE qrfc_inb_unit_info_tab,
          ltt_temp_qin       TYPE qrfc_inb_unit_info_tab,
          lv_unit            TYPE i,
          ls_luw_tab_qin     TYPE bgrfc_unit_information,
* Begin of changes V002
          lr_bgrfc_auth      TYPE REF TO
                              cx_bgrfc_monitor_api_authority,
          lr_bgrfc_excp      TYPE REF TO cx_bgrfc_monitor_api,
* End of changes V002
* Begin of changes in V003
          ls_qin             TYPE qrfc_unit_info_inbound,
          ls_qrfc_i_dest     TYPE qrfc_i_qin_top,
          lt_qrfc_i_unit1    TYPE STANDARD TABLE OF qrfc_i_unit,
          lt_qrfc_i_dest     TYPE STANDARD TABLE OF qrfc_i_qin_top.
* End of changes in V003


    FREE: ltt_info_qin[],
          ltt_temp_qin[],
          lt_qrfc_i_unit1[], lt_qrfc_i_dest[]. "+V003

    CLEAR: lv_unit,
           ls_luw_tab_qin,
           ls_qin, ls_qrfc_i_dest. "+V003

    "create instance for qrfc inbound
    lo_ref_qrfc_in_mon =
cl_bgrfc_monitor_api=>create_qrfc_monitor_inbound( ).

    " Not bound returning
    IF lo_ref_qrfc_in_mon IS NOT BOUND.
      RETURN.
    ENDIF.

    "Get QRFC unit details
    SELECT * FROM qrfc_i_unit
       INTO TABLE lt_qrfc_i_unit1
       WHERE client = sy-mandt.
    IF sy-subrc = 0.
      "Get QRFC Inbound destination details
      SELECT * FROM qrfc_i_qin_top
        INTO TABLE lt_qrfc_i_dest
        FOR ALL ENTRIES IN lt_qrfc_i_unit1
        WHERE unit_id = lt_qrfc_i_unit1-unit_id.
      IF sy-subrc = 0.
        lv_unit = lc_unit.
        "Get the details of QRFC by passing destination and queue name
        LOOP AT lt_qrfc_i_dest INTO ls_qrfc_i_dest.
          TRY. " +V002
              ltt_info_qin =
              lo_ref_qrfc_in_mon->get_unit_information_by_queue(
                dest_name    = ls_qrfc_i_dest-dest_name
                queue_name   = ls_qrfc_i_dest-queue_name
                unit_number  = lv_unit
                show_deleted = space ).
* Begin of changes V002
            CATCH: cx_bgrfc_monitor_api_authority INTO lr_bgrfc_auth,
                   cx_bgrfc_monitor_api INTO lr_bgrfc_excp.
          ENDTRY.
* End of changes V002
          APPEND LINES OF ltt_info_qin TO ltt_temp_qin.
          CLEAR: ls_qrfc_i_dest.
          FREE: ltt_info_qin[].
        ENDLOOP.

        "Get unit information
        LOOP AT ltt_temp_qin INTO ls_qin.
          MOVE-CORRESPONDING ls_qin TO ls_luw_tab_qin.
          "RFC type
          ls_luw_tab_qin-dest_name_outb = lc_inboundqrfc.
          "Dest name
          ls_luw_tab_qin-dest_name_inb = ls_qin-dest_name.
          "Queue name
          ls_luw_tab_qin-queue_name    = ls_qin-queue_name.
          "Format date and time
          CONVERT TIME STAMP ls_qin-ctimestamp
                 TIME ZONE sy-zonlo
                 INTO DATE ls_luw_tab_qin-date_c
                 TIME ls_luw_tab_qin-time_c.
          "Format date and time
          CONVERT TIME STAMP ls_qin-exe_time_stamp
                  TIME ZONE sy-zonlo
                  INTO DATE ls_luw_tab_qin-date_e
                  TIME ls_luw_tab_qin-time_e.

          CASE ls_qin-state .
              "Appending locked records to lock table
            WHEN if_bgrfc_client=>unit_state_blocked OR
                  if_bgrfc_client=>unit_state_locked OR
                  if_bgrfc_client=>unit_state_retry  OR
                  if_bgrfc_client=>unit_state_update_task_failed OR
                  if_bgrfc_client=>unit_state_communication_err OR
                  if_bgrfc_client=>unit_state_execution_err OR
                  if_bgrfc_client=>unit_state_supportability OR
                  if_bgrfc_client=>unit_state_conversion_error OR
                  if_bgrfc_client=>unit_state_server_shutdown.
              IF
                ls_qin-state =
                      if_bgrfc_client=>unit_state_blocked OR
                ls_qin-state =
                if_bgrfc_client=>unit_state_locked OR
                ls_qin-state =
                if_bgrfc_client=>unit_state_retry  OR
                ls_qin-state =
                if_bgrfc_client=>unit_state_update_task_failed.
* Show locked and blocked units as yellow traffic light
                APPEND ls_luw_tab_qin TO lt_bgrfc_lock.
              ELSE.
                " Appending error records to error table
                APPEND ls_luw_tab_qin TO lt_bgrfc_error.
              ENDIF.
              " Appending success records to success table
            WHEN if_bgrfc_client=>unit_state_executed OR
                 if_bgrfc_client=>unit_state_runnable OR
                 if_bgrfc_client=>unit_state_in_execution.
* Show executable and runnable units as green traffic light
              APPEND ls_luw_tab_qin TO lt_bgrfc_success.
          ENDCASE.
          CLEAR: ls_qin, ls_luw_tab_qin.
        ENDLOOP.

      ENDIF.
    ENDIF.

  ENDMETHOD.

  METHOD get_qrfc_out.

    TYPES: BEGIN OF ty_bgrfc_unit,
             unit_id TYPE bgrfc_unit_id,
             client  TYPE mandt,
           END OF   ty_bgrfc_unit.

    CONSTANTS: lc_outboundqrfc TYPE c VALUE 'Outbound QRFC' LENGTH '13',
               lc_unit         TYPE c VALUE '20'            LENGTH '2'.

    DATA: lo_ref_qrfc_out_mon TYPE REF TO if_qrfc_outbound_monitor,
          ltt_info_qout       TYPE qrfc_outb_unit_info_tab,
          ltt_temp_qout       TYPE qrfc_outb_unit_info_tab,
          ls_luw_tab          TYPE bgrfc_unit_information,
          lv_unit             TYPE i,
          lt_qrfc_o_unit      TYPE STANDARD TABLE OF ty_bgrfc_unit,
* Begin of changes V002
          lr_bgrfc_auth       TYPE REF TO
                              cx_bgrfc_monitor_api_authority,
          lr_bgrfc_excp       TYPE REF TO cx_bgrfc_monitor_api,
* End of changes V002
* Begin of changes in V003
          ls_qout             TYPE qrfc_unit_info_outbound,
          ls_qrfc_o_dest      TYPE qrfc_o_qout_top,
          lt_qrfc_o_dest      TYPE STANDARD TABLE OF qrfc_o_qout_top.
* End of changes in V003

    FREE:lt_qrfc_o_unit[],
         ltt_temp_qout[],
         ltt_info_qout[],
         lt_qrfc_o_dest[]. "+V003

    CLEAR: ls_luw_tab,
           lv_unit,
           ls_qrfc_o_dest, ls_qout. "+V003

    "creating instance for QRFC outbound
    lo_ref_qrfc_out_mon =
    cl_bgrfc_monitor_api=>create_qrfc_monitor_outbound( ).

    " Not bound returning
    IF lo_ref_qrfc_out_mon IS NOT BOUND.
      RETURN.
    ENDIF.

    "get QRFC unit details
    SELECT unit_id client FROM qrfc_o_unit
       INTO TABLE lt_qrfc_o_unit
       WHERE client = sy-mandt.
    IF sy-subrc = 0.
      "Get QRFC outbound destination details
      SELECT * FROM qrfc_o_qout_top
        INTO TABLE lt_qrfc_o_dest
        FOR ALL ENTRIES IN lt_qrfc_o_unit
        WHERE unit_id = lt_qrfc_o_unit-unit_id.
      IF sy-subrc = 0.

        lv_unit = lc_unit.
        "Get the details of QRFC by passing destination and queue name
        LOOP AT lt_qrfc_o_dest INTO ls_qrfc_o_dest.
          TRY.   " +V002
              ltt_info_qout =
              lo_ref_qrfc_out_mon->get_unit_information_by_queue(
                dest_name    = ls_qrfc_o_dest-dest_name
                queue_name   = ls_qrfc_o_dest-queue_name
                unit_number  = lv_unit
                show_deleted = space ).
* Begin of changes V002
            CATCH: cx_bgrfc_monitor_api_authority INTO lr_bgrfc_auth,
                   cx_bgrfc_monitor_api INTO lr_bgrfc_excp.
          ENDTRY.
* End of changes V002

          APPEND LINES OF ltt_info_qout TO ltt_temp_qout.

          CLEAR:ls_qrfc_o_dest.
          FREE: ltt_info_qout[].
        ENDLOOP.

        "Get unit information
        LOOP AT ltt_temp_qout INTO ls_qout.
          MOVE-CORRESPONDING ls_qout TO ls_luw_tab.
          "RFC type
          ls_luw_tab-dest_name_outb = lc_outboundqrfc.
          "Dest name
          ls_luw_tab-dest_name_inb = ls_qout-dest_name.
          "Queue name
          ls_luw_tab-queue_name    = ls_qout-queue_name.
          "Format date and time
          CONVERT TIME STAMP ls_qout-ctimestamp
                 TIME ZONE sy-zonlo
                 INTO DATE ls_luw_tab-date_c
                 TIME ls_luw_tab-time_c.

          "Format date and time
          CONVERT TIME STAMP ls_qout-exe_time_stamp
                  TIME ZONE sy-zonlo
                  INTO DATE ls_luw_tab-date_e
                  TIME ls_luw_tab-time_e.
          CASE ls_qout-state .
              "Appending locked records to lock table
            WHEN if_bgrfc_client=>unit_state_blocked OR
                  if_bgrfc_client=>unit_state_locked OR
                  if_bgrfc_client=>unit_state_retry  OR
                  if_bgrfc_client=>unit_state_update_task_failed OR
                  if_bgrfc_client=>unit_state_communication_err OR
                  if_bgrfc_client=>unit_state_execution_err OR
                  if_bgrfc_client=>unit_state_supportability OR
                  if_bgrfc_client=>unit_state_server_shutdown.
              IF
                ls_qout-state =
                      if_bgrfc_client=>unit_state_blocked OR
                ls_qout-state =
                if_bgrfc_client=>unit_state_locked OR
                ls_qout-state =
                if_bgrfc_client=>unit_state_retry.
* Show locked and blocked units as yellow traffic light
                APPEND ls_luw_tab TO lt_bgrfc_lock.
              ELSE.
                "Appending error records to error table
                APPEND ls_luw_tab TO lt_bgrfc_error.
              ENDIF.

              " Appending success records to success table
            WHEN if_bgrfc_client=>unit_state_executed OR
                 if_bgrfc_client=>unit_state_runnable OR
                 if_bgrfc_client=>unit_state_in_execution.
* Show executable and runnable units as green traffic light
              APPEND ls_luw_tab TO lt_bgrfc_success.
          ENDCASE.
          CLEAR: ls_qout,ls_luw_tab.
        ENDLOOP.
      ENDIF.
    ENDIF.
  ENDMETHOD.
ENDCLASS.