*---------------------------------------------------------------------*
* Program Name        :   ZCM_R_DEL_D020S_DYNPSRC                     *
* Title               :   Delete Dynpros                              *
* Purpose             :   This report is used to Delete dynpros using *
*                         report RS_SCRP_D020S_CLEAN                  *
*---------------------------------------------------------------------*
* Related Transaction OR Standard Program References                  *
* RS_SCRP_D020S_CLEAN                                                 *
*---------------------------------------------------------------------*
* Tables              :   SELECT    UPDATE      INSERT      DELETE    *
* XXXXX                     X                                         *
*---------------------------------------------------------------------*
* Program Change History                                              *
*---------------------------------------------------------------------*
*Date        Version   Author       TR#/Local     Description         *
*---------------------------------------------------------------------*
*01-04-2022  Initial   Yasaswini K   Local       To delete dynpros    *
*                                                using standard report*
*---------------------------------------------------------------------*
REPORT zcm_r_del_d020s_dynpsrc.

LOAD-OF-PROGRAM.

FORM get_config
              TABLES lt_input  STRUCTURE tab512
                     lt_output STRUCTURE tab512.

  CONSTANTS: lc_noinput   TYPE c        VALUE
             'No input given'                                 LENGTH 20,
             lc_tabname1  TYPE c        VALUE
             'Delete D020S entries with illegal identification'
                                                              LENGTH 60,
             lc_inc_input TYPE c      VALUE
             'Incorrect input'                                LENGTH 20,
             lc_error     TYPE c        VALUE
             'Failed to delete dynpros'                       LENGTH 30,
             lc_sep       TYPE c        VALUE '|'             LENGTH 1,
             lc_colon     TYPE c        VALUE ':'             LENGTH 1,
             lc_delete    TYPE c        VALUE 'DELETE'        LENGTH 8,
             lc_action    TYPE c        VALUE 'DynproAction'  LENGTH 15,
             lc_count     TYPE c        VALUE 'Count'         LENGTH 6.

  DATA: lv_action   TYPE char6,
        ls_input    TYPE tab512,
        ls_output   TYPE tab512,
        lv_msg      TYPE string,
        lv_tab      TYPE string,
        lt_log      TYPE STANDARD TABLE OF listzeile,
        ls_log      TYPE listzeile,
        lt_list_tab TYPE TABLE OF abaplist.

  CLEAR: lv_action, ls_input, ls_output, lv_msg, lv_tab, ls_log.

  FREE: lt_log[], lt_list_tab[].

*Title
  ls_output = lc_tabname1.
  APPEND ls_output TO lt_output.
  CLEAR: ls_output.

  READ TABLE lt_input INTO ls_input INDEX 1.
  IF sy-subrc EQ 0.
    lv_action = ls_input.              " Action
  ELSE.
    " No input given
    ls_output = lc_noinput.
    APPEND ls_output TO lt_output.
    CLEAR ls_output.
    RETURN.
  ENDIF.

  CASE lv_action.

    WHEN lc_delete.

      SUBMIT rs_scrp_d020s_clean WITH delete EQ abap_true
        EXPORTING LIST TO MEMORY
          AND RETURN.

      CALL FUNCTION 'LIST_FROM_MEMORY'
        TABLES
          listobject = lt_list_tab
        EXCEPTIONS
          not_found  = 1
          OTHERS     = 2.

      IF sy-subrc = 0.

        CALL FUNCTION 'LIST_TO_ASCI'
          TABLES
            listasci           = lt_log
            listobject         = lt_list_tab
          EXCEPTIONS
            empty_list         = 1
            list_index_invalid = 2
            OTHERS             = 3.

        IF sy-subrc = 0.

          "Column Headings
          CONCATENATE lc_action lc_sep
          lc_count INTO ls_output.
          APPEND ls_output TO lt_output.
          CLEAR:ls_output.

          LOOP AT lt_log INTO ls_log.

            SPLIT ls_log AT lc_colon INTO lv_msg lv_tab.

            IF lv_msg IS NOT INITIAL AND lv_tab IS NOT INITIAL.
              CONDENSE lv_msg.
              CONDENSE lv_tab.
              CONCATENATE lv_msg lc_sep
              lv_tab INTO ls_output.
              APPEND ls_output TO lt_output.
            ENDIF.

            CLEAR: ls_log, ls_output, lv_msg, lv_tab.

          ENDLOOP.

        ELSE.
          "Error
          ls_output = lc_error.
          APPEND ls_output TO lt_output.
          CLEAR ls_output.
        ENDIF.

      ELSE.
        "Error
        ls_output = lc_error.
        APPEND ls_output TO lt_output.
        CLEAR ls_output.
      ENDIF.

    WHEN OTHERS.
      " Incorrect input
      ls_output = lc_inc_input.
      APPEND ls_output TO lt_output.
      CLEAR ls_output.
  ENDCASE.

ENDFORM.