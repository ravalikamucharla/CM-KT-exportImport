*---------------------------------------------------------------------*
* Program Name        :  ZCM_DXB_ST04_EXP_ALERT_MONITOR               *
* Title               :  Capture ST04 alert monitor details           *
* Purpose             :  To capture ST04 alert monitor details        *
*---------------------------------------------------------------------*
* Related Transaction OR Standard Program References                  *
* ST04                                                                *
*---------------------------------------------------------------------*
* Tables              :   SELECT    UPDATE      INSERT      DELETE    *
*                           X                                         *
*---------------------------------------------------------------------*
* Program Change History                                              *
*---------------------------------------------------------------------*
*Date        Version   Author       TR#/Local     Description         *
*---------------------------------------------------------------------*
*07-30-2021  Initial  Soumya Ray   Local     Fetch ST04 Alert monitor *
*                                            details.                 *
*09-08-2022  V001     Soumya Ray   Local     To pass no data found in *
*                                            no data in system        *
*---------------------------------------------------------------------*
REPORT zcm_dxb_st04_exp_alert_monitor.

CONSTANTS: gc_colon TYPE c VALUE ':'          LENGTH 1,
           gc_1     TYPE c VALUE '1'          LENGTH 1,
           gc_2     TYPE c VALUE '2'          LENGTH 1,
           gc_3     TYPE c VALUE '3'          LENGTH 1,
           gc_4     TYPE c VALUE '4'          LENGTH 1,
           gc_5     TYPE c VALUE '5'          LENGTH 1.

CLASS lcl_alert_tree DEFINITION.
  PUBLIC SECTION.
    METHODS get_current_value
      IMPORTING is_tid      TYPE alglobtid
      EXPORTING es_curvalue TYPE dbaal_curval.

    METHODS get_alrtattr_text
      IMPORTING is_tid     TYPE alglobtid
      EXPORTING ev_attrtxt TYPE string.

    METHODS get_perf_value_extension
      IMPORTING is_tid    TYPE alglobtid
                iv_status TYPE alvalue
                iv_value  TYPE alplastpv
      EXPORTING ev_unit   TYPE string.
ENDCLASS.

FORM get_config
TABLES lt_input  STRUCTURE tab512
  lt_output STRUCTURE tab512.
  CONSTANTS: lc_sep     TYPE c VALUE '|'               LENGTH 1,
             lc_export  TYPE c VALUE 'EXPORT'          LENGTH 20,
             lc_naction TYPE c VALUE
             'Incorrect input'                         LENGTH 23,
             lc_ninput  TYPE c VALUE 'No input passed' LENGTH 15,
             lc_x       TYPE c VALUE 'X'               LENGTH 1,
             lc_mss     TYPE c VALUE 'MSS'             LENGTH 3,
             lc_db2     TYPE c VALUE 'DB2'             LENGTH 3,
             lc_db4     TYPE c VALUE 'DB4'             LENGTH 3,
             lc_db6     TYPE c VALUE 'DB6'             LENGTH 3,
             lc_ora     TYPE c VALUE 'ORA'             LENGTH 3,
             lc_null    TYPE c VALUE 'NULL'            LENGTH 4,
             lc_sys     TYPE c VALUE '\&SY\'           LENGTH 5,
             lc_altitle TYPE c VALUE
             'Alert Monitor'                           LENGTH 13,
             lc_status  TYPE c VALUE 'Status'          LENGTH 6,
             lc_level1  TYPE c VALUE 'Level1'          LENGTH 6,
             lc_level2  TYPE c VALUE 'Level2'          LENGTH 6,
             lc_level3  TYPE c VALUE 'Level3'          LENGTH 6,
             lc_level4  TYPE c VALUE 'Level4'          LENGTH 6,
             lc_level5  TYPE c VALUE 'Level5'          LENGTH 6,
             lc_msg     TYPE c VALUE 'Message'         LENGTH 7,
             lc_date    TYPE c VALUE 'Date'            LENGTH 4,
             lc_time    TYPE c VALUE 'Time'            LENGTH 4,
             lc_ok      TYPE c VALUE 'Ok'              LENGTH 2,
             lc_error   TYPE c VALUE 'Error'           LENGTH 5,
             lc_navail  TYPE c VALUE 'Not available'   LENGTH 13,
             lc_warning TYPE c VALUE 'Warning'         LENGTH 7,
             lc_nsegmn  TYPE c VALUE
             'Alert monitor segments not available'    LENGTH 40,
             lc_nalert  TYPE c VALUE
             'Alert tree not available'                LENGTH 30,
             lc_nodata  TYPE c VALUE 'No data found'   LENGTH 20."+V001

  DATA: ls_output     TYPE tab512,
        ls_input      TYPE tab512,
        lv_action     TYPE string,
        ls_prefinal   TYPE string,
        lv_fullname   TYPE almtfullnm,
        ls_tid        TYPE alglobtid,
        ls_alerttree  TYPE almttre40b,
        lt_alerttree  TYPE STANDARD TABLE OF almttre40b,
        lv_level1(40) TYPE c,
        lv_level2(40) TYPE c,
        lv_level3(40) TYPE c,
        lv_level4(40) TYPE c,
        lv_level5(40) TYPE c,
        lv_message    TYPE string,
        lv_status(13) TYPE c,
        ls_curvalue   TYPE dbaal_curval,
        lv_msgflg     TYPE c,
        lv_tmp        TYPE string,
        lv_itemdescr  TYPE string,
        lv_date       TYPE string,
        lv_time       TYPE string,
        lv_last_char  TYPE char1,
        lo_alert_tree TYPE REF TO lcl_alert_tree.

  ls_output = lc_altitle. "Alert Monitor
  APPEND ls_output TO lt_output.
  " Read action required from Python interface
  READ TABLE lt_input INTO ls_input INDEX 1.
  IF sy-subrc EQ 0.
    lv_action = ls_input.
  ELSE.
    ls_output = lc_ninput. "No input passed
    APPEND ls_output TO lt_output.
    RETURN.
  ENDIF.
***Instantiating a class object
  CREATE OBJECT lo_alert_tree.
  CASE lv_action.
    WHEN lc_export. "EXPORT
      " To get alert monitoring full name
      "Code taken from class CL_DBA_ACTION_ALERT_TREE method
      "BUILD_MC_FULL_NAME
      CASE sy-dbsys(3).
        WHEN lc_ora.
          lv_fullname = cl_dba_alert_utils=>mc_name_db_ora."Oracle
        WHEN lc_mss.
          "'Microsoft SQL Server'
          lv_fullname = cl_dba_alert_utils=>mc_name_db_mss.
        WHEN lc_db2.
          "'DB2 Universal Database for OS/390'
          lv_fullname = cl_dba_alert_utils=>mc_name_db_db2.
        WHEN lc_db4.
          "DB2 Universal Database for AS/400'
          lv_fullname = cl_dba_alert_utils=>mc_name_db_db4.
        WHEN lc_db6.
          "'DB2 Universal Database for NT/UNIX'
          lv_fullname = cl_dba_alert_utils=>mc_name_db_db6.
        WHEN OTHERS.
      ENDCASE.
      "\&SY\<fullname> constructed
      CONCATENATE lc_sys lv_fullname INTO lv_fullname.
    "FM that returns TID for given "long" name of one MOnitoring Entity
      CALL FUNCTION 'SALR_MTE_GET_TID_BY_NAME'
        EXPORTING
          longname               = lv_fullname
        IMPORTING
          tid                    = ls_tid
        EXCEPTIONS
          segment_not_availiable = cl_db6_rc=>x_others
          name_unable_to_expand  = cl_db6_rc=>x_unable_to_expand_name
          name_not_found         = cl_db6_rc=>x_name_not_found
          c_call_failed          = cl_db6_rc=>x_c_call_failed
          communication_error    = cl_db6_rc=>x_communication_error
          internal_error         = cl_db6_rc=>x_internal_error
          unknown_error          = cl_db6_rc=>x_unknown_error
          db_error               = cl_db6_rc=>x_db_error
          OTHERS                 = cl_db6_rc=>x_others.

      IF sy-subrc EQ 0.
        " FM to get the alert tree structure
        CALL FUNCTION 'SALR_MTE_GET_TREE'
          EXPORTING
            tid                 = ls_tid
          TABLES
            sub_tree            = lt_alerttree
          EXCEPTIONS
            tid_invalid         = cl_db6_rc=>x_tid_invalid
            c_call_failed       = cl_db6_rc=>x_c_call_failed
            communication_error = cl_db6_rc=>x_communication_error
            internal_error      = cl_db6_rc=>x_internal_error
            db_error            = cl_db6_rc=>x_db_error
            unknown_error       = cl_db6_rc=>x_unknown_error
            OTHERS              = cl_db6_rc=>x_others.
        IF sy-subrc EQ 0.
*  Begin of changes in V001
          IF lt_alerttree IS INITIAL.
            ls_output = lc_nodata.
            APPEND ls_output TO lt_output.
            CLEAR ls_output.
            RETURN.
          ENDIF.
*  End of changes in V001
          CONCATENATE lc_status lc_level1 lc_level2 lc_level3 lc_level4
          lc_level5 lc_msg lc_date lc_time INTO ls_output
          SEPARATED BY lc_sep.
          APPEND ls_output TO lt_output.
          CLEAR ls_output.

          LOOP AT lt_alerttree INTO ls_alerttree.
            CASE ls_alerttree-allevintre.
              WHEN gc_1.
                CLEAR: lv_level1, lv_level2, lv_level3, lv_level4,
                lv_level5, lv_message, lv_date, lv_time.
                lv_level1 = ls_alerttree-mtnameshrt.
              WHEN gc_2.
                CLEAR: lv_level2, lv_level3, lv_level4, lv_level5,
                lv_message, lv_date, lv_time.
                lv_level2 = ls_alerttree-mtnameshrt.
              WHEN gc_3.
                CLEAR: lv_level3, lv_level4, lv_level5,
                lv_message, lv_date, lv_time.
                lv_level3 = ls_alerttree-mtnameshrt.
              WHEN gc_4.
                CLEAR: lv_level4, lv_level5, lv_msgflg, lv_date,
                lv_time.
                lv_level4 = ls_alerttree-mtnameshrt.

                IF ls_alerttree-objectname NE ls_alerttree-mtnameshrt.
                  lv_msgflg = lc_x.
                ENDIF.

              WHEN gc_5.
                CLEAR: lv_level5, lv_msgflg.
                lv_level5 = ls_alerttree-mtnameshrt.
                lv_msgflg = lc_x.

              WHEN OTHERS.
            ENDCASE.
            "Alert message
            IF lv_msgflg EQ lc_x.
              CLEAR: ls_tid, ls_curvalue, lv_message.
              MOVE-CORRESPONDING ls_alerttree TO ls_tid.
              CALL METHOD lo_alert_tree->get_current_value
                EXPORTING
                  is_tid      = ls_tid
                IMPORTING
                  es_curvalue = ls_curvalue.

              IF ls_alerttree-mtclass = db6al_mtclass_performance OR
              ls_alerttree-mtclass = db6al_mtclass_single_msg.
                IF ls_curvalue-alrt_msg IS NOT INITIAL.
                  lv_message = ls_curvalue-alrt_msg.
                ENDIF.

                "numerical value available? -> show in brackets
                IF ls_curvalue-lastperval IS NOT INITIAL AND
                lv_message IS INITIAL.

                  CALL METHOD lo_alert_tree->get_perf_value_extension
                    EXPORTING
                      is_tid    = ls_tid
                      iv_status = ls_alerttree-actualval
                      iv_value  = ls_curvalue-lastperval
                    IMPORTING
                      ev_unit   = lv_itemdescr.

                  lv_tmp = ls_curvalue-lastperval.
                  CONDENSE lv_tmp.

                  IF lv_itemdescr IS NOT INITIAL.
                    CONCATENATE lv_tmp lv_itemdescr INTO lv_itemdescr
                    SEPARATED BY space.
                  ELSE.
                    lv_itemdescr = lv_tmp.
                  ENDIF.

                  CONCATENATE lv_message lv_itemdescr INTO lv_message
                  SEPARATED BY space.
                ENDIF.

              ELSEIF ls_alerttree-mtclass = db6al_mtclass_shorttext OR
                ls_alerttree-mtclass = db6al_mtclass_longtext.
                CALL METHOD lo_alert_tree->get_alrtattr_text
                  EXPORTING
                    is_tid     = ls_tid
                  IMPORTING
                    ev_attrtxt = lv_message.

              ENDIF.

              CLEAR: lv_date, lv_time.
              IF ls_curvalue-valtime IS NOT INITIAL.
                lv_date = ls_curvalue-valdate.
              ELSE.
                CLEAR lv_date.
              ENDIF.
              IF ls_curvalue-valtime IS NOT INITIAL.
                lv_time = ls_curvalue-valtime.
              ELSE.
                CLEAR lv_time.
              ENDIF.
            ENDIF.

            "// To get the status of the levels in alert tree
     "//From Method 'GET_LED_LIGHT' in Class 'CL_DBA_ACTION_ALERT_TREE'
            CLEAR lv_status.
            CASE ls_alerttree-actualval.
              WHEN gc_1.
                lv_status = lc_ok.
              WHEN gc_2.
                lv_status = lc_warning.
              WHEN gc_3.
                lv_status = lc_error.
              WHEN OTHERS.
                lv_status = lc_navail.
            ENDCASE.

            CONCATENATE lv_status lv_level1 lv_level2 lv_level3
            lv_level4 lv_level5 lv_message lv_date lv_time
            INTO ls_prefinal SEPARATED BY lc_sep.

            " To replace value of last field value if blank to NULL
            lv_last_char = substring( val = ls_prefinal
            off = strlen( ls_prefinal ) - 1
            len = 1 ).
            IF lv_last_char = lc_sep.
              CONCATENATE ls_prefinal lc_null INTO ls_prefinal.
            ENDIF.

            ls_output = ls_prefinal.
            APPEND ls_output TO lt_output.
            CLEAR: ls_output, ls_prefinal, ls_alerttree, lv_level5,
            lv_message, lv_date, lv_time.
          ENDLOOP.
        ELSE.
          ls_output = lc_nalert.
          APPEND ls_output TO lt_output.
          CLEAR ls_output.
        ENDIF.
      ELSE.
        ls_output = lc_nsegmn.
        APPEND ls_output TO lt_output.
        CLEAR ls_output.
      ENDIF.
      "To replace blank value in middle fields with NULL
      DO .
        REPLACE ALL OCCURRENCES OF SUBSTRING '||'
        IN TABLE lt_output WITH '|NULL|'.
        FIND '||' IN TABLE lt_output.
        IF sy-subrc <> 0.
          EXIT .
        ENDIF.
      ENDDO.

    WHEN OTHERS.

      ls_output = lc_naction."Incorrect input
      APPEND ls_output TO lt_output.
      CLEAR: ls_output.

  ENDCASE.

ENDFORM.
*&--------------------------------------------------------------------*
*& Class (Implementation)  lcl_alert_tree
*&--------------------------------------------------------------------*
*  Text
*---------------------------------------------------------------------*
CLASS lcl_alert_tree IMPLEMENTATION.
*//------- Class CL_DBA_ACTION_ALERT_TREE------------//*
  METHOD get_current_value.
    "To get the current value of the alert monitor tree segment

    DATA:ls_perfval TYPE alperfval,
         ls_msgval  TYPE alsmsgval.

    IF is_tid-mtclass = db6al_mtclass_performance.
      "FM to read the actual value of one performance attribute
      CALL FUNCTION 'SALR_MTE_PERF_READ_CUR_VAL'
        EXPORTING
          tid                 = is_tid
        IMPORTING
          current_value       = ls_perfval
        EXCEPTIONS
          tid_invalid         = 1
          c_call_failed       = 2
          communication_error = 3
          internal_error      = 4
          unknown_error       = 5
          db_error            = 6
          OTHERS              = cl_db6_rc=>x_others.
      IF sy-subrc = 0.
        MOVE ls_perfval-alrelvaldt TO es_curvalue-valdate.
        MOVE ls_perfval-alrelvalti TO es_curvalue-valtime.
        MOVE ls_perfval-lastalstat TO es_curvalue-lastalstat.
        MOVE ls_perfval-lastperval TO es_curvalue-lastperval.
      ENDIF.
    ELSEIF is_tid-mtclass = db6al_mtclass_single_msg.
      "FM to read the current value of one status message attribute
      CALL FUNCTION 'SALR_MTE_STAT_MSG_READ_CUR_VAL'
        EXPORTING
          tid                 = is_tid
        IMPORTING
          value               = ls_msgval
        EXCEPTIONS
          tid_invalid         = 1
          c_call_failed       = 2
          communication_error = 3
          internal_error      = 4
          unknown_error       = 5
          db_error            = 6
          OTHERS              = 7.
      IF sy-subrc = 0.
        MOVE ls_msgval-smsgdate  TO es_curvalue-valdate.
        MOVE ls_msgval-smsgtime  TO es_curvalue-valtime.
        MOVE ls_msgval-smsgvalue TO es_curvalue-lastperval.
        MOVE ls_msgval-msg       TO es_curvalue-alrt_msg.
      ENDIF.

    ENDIF.
  ENDMETHOD.

  METHOD get_alrtattr_text.
    "Method to get the alert attribute text message.
    DATA: lt_tidtab TYPE STANDARD TABLE OF alglobtid,
          lt_txttab TYPE STANDARD TABLE OF altextattr,
          lv_txtval TYPE altextattr.

    IF is_tid-mtclass = db6al_mtclass_shorttext OR
    is_tid-mtclass = db6al_mtclass_longtext.
      FREE lt_tidtab.
      APPEND is_tid TO lt_tidtab.
      "FM to read Class-specific Data of a 'Text Attribute' Moni.
      "Tree Elem.
      CALL FUNCTION 'SALC_TEXTATTR_READ'
        EXPORTING
          only_local    = space
          bypass_cache  = space
        TABLES
          tid           = lt_tidtab
          textattrrc    = lt_txttab
        EXCEPTIONS
          c_call_failed = 1
          OTHERS        = 2.
      IF sy-subrc = 0.
        READ TABLE lt_txttab INDEX 1 INTO lv_txtval.
        MOVE lv_txtval-attrtext TO ev_attrtxt.
      ELSE.
        CLEAR ev_attrtxt.
      ENDIF.
    ENDIF.

  ENDMETHOD.

  METHOD get_perf_value_extension.
    "Method to get the extension message value of the final segments
    "of the alert tree

    CONSTANTS: lc_between TYPE c VALUE 'between'  LENGTH 7,
               lc_sapt100 TYPE c VALUE 'SAP-T100' LENGTH 8,
               lc_less    TYPE c VALUE '<'        LENGTH 1,
               lc_greater TYPE c VALUE '>'        LENGTH 1,
               lc_bar     TYPE c VALUE '-'        LENGTH 1.

    DATA: ls_props  TYPE alperfcus,
          lv_value1 TYPE string,
          lv_value2 TYPE string,
          lv_ext    TYPE string,
          lv_msgid  TYPE symsgid,
          lv_msgno  TYPE symsgno,
          lv_msg    TYPE string,
          lv_should TYPE string.

    "FM to read the specific properties of one performance attribute
    CALL FUNCTION 'SALR_MTE_PERF_READ_PROPERTIES'
      EXPORTING
        tid                 = is_tid
      IMPORTING
        properties          = ls_props
      EXCEPTIONS
        tid_invalid         = 1
        c_call_failed       = 2
        communication_error = 3
        internal_error      = 4
        unknown_error       = 5
        db_error            = 6
        OTHERS              = 7.

    IF sy-subrc = 0.
      ev_unit = ls_props-valunit.
    ELSE.
      CLEAR ev_unit.
    ENDIF.

    CASE ls_props-threshdir.
      WHEN cl_dba_alert_perf_attr=>al_threshdir_above. "1
        IF iv_value > ls_props-activthy2r.
          lv_value1 = ls_props-activthy2r.
          lv_should = lv_value1.
          CONCATENATE '>' lv_value1 INTO lv_ext SEPARATED BY space.

        ELSEIF iv_value >= ls_props-activthg2y.
          lv_value1 = ls_props-activthg2y.
          lv_value2 = ls_props-activthy2r.
          CONCATENATE lv_value1 lv_value2 INTO lv_ext
          SEPARATED BY gc_colon.
          lv_should = lv_ext.
          CONCATENATE lc_between lv_ext INTO lv_ext
          SEPARATED BY space.
        ELSE.
          lv_value1 = ls_props-activthg2y.
          lv_should = lv_value1.
          CONCATENATE lc_less lv_value1 INTO lv_ext
          SEPARATED BY space.
        ENDIF.

      WHEN cl_dba_alert_perf_attr=>al_threshdir_below. "2
        IF iv_value < ls_props-activthy2r.
          lv_value1 = ls_props-activthy2r.
          lv_should = lv_value1.
          CONCATENATE lc_less lv_value1 INTO lv_ext
          SEPARATED BY space.

        ELSEIF iv_value <= ls_props-activthg2y.
          lv_value1 = ls_props-activthy2r.
          lv_value2 = ls_props-activthg2y.
          CONCATENATE lv_value1 lv_value2 INTO lv_ext
          SEPARATED BY gc_colon.
          lv_should = lv_ext.
          CONCATENATE lc_between lv_ext INTO lv_ext
          SEPARATED BY space.
        ELSE.
          lv_value1 = ls_props-activthg2y.
          lv_should = lv_value1.
          CONCATENATE lc_greater lv_value1 INTO lv_ext
          SEPARATED BY space.
        ENDIF.

      WHEN OTHERS.
        CLEAR lv_ext.
    ENDCASE.

    IF ls_props-msgclass CS lc_sapt100 AND iv_status > gc_1.
      SPLIT ls_props-msgid AT space INTO lv_msgid lv_msgno.
      IF lv_msgno > 0 AND lv_msgid IS NOT INITIAL.
        lv_msg = cl_db6_advisor=>message_text( msgid = lv_msgid
        msgno = lv_msgno
        msgv1 = iv_value
        msgv2 = lv_should
        msgv3 = ''
        msgv4 = '' ).
      ENDIF.
    ENDIF.

    IF lv_ext IS NOT INITIAL.
      CONCATENATE ev_unit lv_ext ev_unit INTO ev_unit
      SEPARATED BY space.
    ENDIF.
    IF lv_msg IS NOT INITIAL.
      CONCATENATE ev_unit lc_bar lv_msg INTO ev_unit
      SEPARATED BY space.
    ENDIF.
  ENDMETHOD.
ENDCLASS.