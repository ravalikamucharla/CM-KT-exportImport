*---------------------------------------------------------------------*
* Program Name        :  ZCM_SM61_EXP_SERVER_GROUPS                   *
* Title               :  To fetch server group & information          *
* Purpose             :  Check server groups in SM61 and get the      *
*                        server details                               *
*---------------------------------------------------------------------*
* Related Transaction OR Standard Program References                  *
* SM61                                                                *
*---------------------------------------------------------------------*
* Tables              :   SELECT    UPDATE      INSERT      DELETE    *
* TSRVGRP                   X                                         *
* TSRVLST                   X                                         *
*---------------------------------------------------------------------*
* Program Change History                                              *
*---------------------------------------------------------------------*
*Date        Version   Author       TR#/Local     Description         *
*---------------------------------------------------------------------*
*11-26-2020  Initial   Soumya Ray   Local      To get server groups & *
*                                              information            *
*05-04-2022  V001      Soumya Ray   Local      To correct the message *
*                                            in case of no data, wrong*
*                                              input and remove inline*
*                                              declarations           *
*---------------------------------------------------------------------*

"BP_SERVER_GROUP is the standard program

REPORT zcm_sm61_exp_server_groups.

LOAD-OF-PROGRAM.

FORM get_config
               TABLES lt_input  STRUCTURE tab512
                      lt_output STRUCTURE tab512.

  CONSTANTS:lc_sep         TYPE c VALUE '|',
            lc_export      TYPE char20 VALUE 'EXPORT',
            lc_group       TYPE char30 VALUE 'Group',
            lc_instance    TYPE char30 VALUE 'Server',
            lc_index       TYPE char10 VALUE 'Index',
            lc_host        TYPE char30 VALUE 'Host',
            lc_status      TYPE char30 VALUE 'Status',
            lc_wptype      TYPE char30 VALUE 'Wptypes',
            lc_backwp      TYPE char30 VALUE 'Backwp',
            lc_backupclass TYPE char30 VALUE 'Backwpclassa',
            lc_head        TYPE char30 VALUE 'Servergroupdetails',
            lc_wpident(20) VALUE 'BTC_CLASS_A_WP',
            lc_batch       LIKE msxxlist-msgtypes VALUE 8,
* Begin of changes in V001
            lc_noinput     TYPE c VALUE 'No input passed' LENGTH 15,
            lc_inc_input   TYPE c VALUE 'Incorrect input' LENGTH 20,
            lc_nodata      TYPE c VALUE 'No data found'   LENGTH 20.
* End of changes in V001
  DATA:BEGIN OF sys_tabl OCCURS 50.
      INCLUDE STRUCTURE msxxlist.
  DATA: END OF sys_tabl.

  DATA: lv_srhost(32)  TYPE c,
        lv_srwp(50)    TYPE c,
        lv_srstate(15) TYPE c,
        lv_srbtcwp     TYPE c,
        lv_srbtcwpca   TYPE c,
        lv_nbtcwps     TYPE i,
        lv_dialog      LIKE sys_tabl-msgtypes,
        lv_batch       LIKE sys_tabl-msgtypes,
        lv_update      LIKE sys_tabl-msgtypes,
        lv_update2     LIKE sys_tabl-msgtypes,
        lv_spool       LIKE sys_tabl-msgtypes,
        lv_enqueue     LIKE sys_tabl-msgtypes,
        lv_atp         LIKE sys_tabl-msgtypes,
        lv_icman       LIKE sys_tabl-msgtypes,
        count          TYPE i VALUE 0,
        lv_srconv1     TYPE msname2,
        lv_srconv2     TYPE spfid-apserver,
        lv_classchar   TYPE char40,
        lv_classnum(5) TYPE n,
        lv_classint    TYPE i,
        ls_output      TYPE tab512,
        ls_prefinal    TYPE string,
        lv_index       TYPE i,
        lv_count       TYPE c,
*  Begin of changes in V001
        ls_input       TYPE tab512,
        lv_action      TYPE string,
        ls_tsrvgrp     TYPE tsrvgrp,
        ls_tsrvlst     TYPE tsrvlst,
        ls_serverinfo  TYPE msxxlist,
        lt_tsrvgrp     TYPE STANDARD TABLE OF tsrvgrp,
        lt_tsrvlst     TYPE STANDARD TABLE OF tsrvlst.

  CLEAR: ls_output, ls_serverinfo,ls_tsrvgrp, ls_tsrvlst,
  lv_srwp, lv_srbtcwp, lv_srbtcwpca,count,lv_srstate,
  lv_classchar, lv_classnum, lv_classint, lv_srconv2,
  lv_srconv1, lv_nbtcwps, lv_dialog, lv_batch,lv_update,
  lv_update2, lv_spool,lv_enqueue, lv_atp, lv_icman,
  lv_srhost.
  FREE: lt_tsrvgrp, lt_tsrvlst, sys_tabl .

*  Begin of changes in V001
  ls_output = lc_head. " Heading of the script
  APPEND ls_output TO lt_output.
  CLEAR ls_output.
*  End of changes in V001

  READ TABLE lt_input INTO ls_input INDEX 1. "To read the action
*  Begin of changes in V001
  IF sy-subrc NE 0.
    ls_output = lc_noinput.
    APPEND ls_output TO lt_output.
    CLEAR ls_output.
    RETURN.
  ENDIF.
*  End of changes in V001
  lv_action = ls_input.

  CASE lv_action.

    WHEN lc_export. " EXPORT is the action
      SELECT * FROM tsrvgrp
      INTO TABLE lt_tsrvgrp. " To get the server Groups "+V001

      SELECT * FROM tsrvlst
      INTO TABLE lt_tsrvlst.  " To get the instance names "+V001
* FM to get the instance services details
      CALL FUNCTION 'TH_SERVER_LIST'
        EXPORTING
          services = lc_batch
        TABLES
          list     = sys_tabl
        EXCEPTIONS
          OTHERS   = 99.

      CLEAR lv_index.
      IF NOT lt_tsrvgrp IS INITIAL.
        CONCATENATE lc_index lc_sep
        lc_group INTO ls_output. " Heading of the Groups
        APPEND ls_output TO lt_output.
        CLEAR ls_output.
*     Details of the groups
        LOOP AT lt_tsrvgrp INTO ls_tsrvgrp. "+V001
          lv_index = lv_index + 1.
          lv_count = lv_index.
          CONCATENATE lv_count lc_sep
          ls_tsrvgrp-grpname INTO ls_output .
          APPEND ls_output TO lt_output.
          CLEAR: ls_output, ls_tsrvgrp,lv_count .
        ENDLOOP.
        APPEND ls_output TO lt_output.
        ls_output = lc_instance. " Heading of ther server
        APPEND ls_output TO lt_output.
        CLEAR ls_output.
        IF lt_tsrvlst IS NOT INITIAL.
*   Header of the group and instances to be migrated
          CONCATENATE lc_group    lc_sep
          lc_instance lc_sep
          lc_host     lc_sep
          lc_status   lc_sep
          lc_wptype   lc_sep
          lc_backwp   lc_sep
          lc_backupclass INTO ls_output.
          APPEND ls_output TO lt_output.
          CLEAR: ls_output, ls_tsrvgrp.

          LOOP AT lt_tsrvlst INTO ls_tsrvlst. "+V001

            READ TABLE lt_tsrvgrp INTO ls_tsrvgrp
            WITH KEY guid = ls_tsrvlst-guid.
*//Start of logic to get details of the instance and attach it
* to group standard form fill_server_info.
*  The logic to get the WP TYPES taken from
*    FORM: fill_server_info(BP_SERVER_GROUP).
            READ TABLE sys_tabl
            WITH KEY name = ls_tsrvlst-appsrvname
            INTO ls_serverinfo. "+V001
*   Logic for Host
            IF sy-subrc <> 0.
              lv_srhost = 'Unknown'.
            ELSE.
              lv_srhost  = ls_serverinfo-host.
            ENDIF.
*   Logic for status
            IF ls_serverinfo-state EQ 1.
              lv_srstate = 'Active'.
            ELSE.
              lv_srstate = 'Inactive'.
            ENDIF.
*  FM to get the details of instances based on msgtypes
            CALL FUNCTION 'TH_SERVER_TYPE'
              EXPORTING
                services     = ls_serverinfo-msgtypes
              IMPORTING
                is_a_dialog  = lv_dialog
                is_a_batch   = lv_batch
                is_a_update  = lv_update
                is_a_update2 = lv_update2
                is_a_spool   = lv_spool
                is_a_enqueue = lv_enqueue
                is_a_atp     = lv_atp
                is_a_icman   = lv_icman.
* // Start of logioc for WP Types :
            lv_srwp = '$ $ $ $ $ $ $ $'.
            IF lv_dialog EQ 1.
              count = count + 1.
              REPLACE '$' WITH 'Dialog' INTO lv_srwp.
            ENDIF.

            IF lv_batch EQ 1.
              count = count + 1.
              REPLACE '$' WITH 'Batch' INTO lv_srwp.
            ENDIF.

            IF lv_update EQ 1.
              count = count + 1.
              REPLACE '$' WITH 'Update' INTO lv_srwp.
            ENDIF.

            IF lv_update2 EQ 1.
              count = count + 1.
              REPLACE '$' WITH 'Update2' INTO lv_srwp.
            ENDIF.

            IF lv_spool EQ 1.
              count = count + 1.
              REPLACE '$' WITH 'Spool' INTO lv_srwp.
            ENDIF.

            IF lv_enqueue EQ 1.
              count = count + 1.
              REPLACE '$' WITH 'Enqueue' INTO lv_srwp.
            ENDIF.

            IF lv_atp EQ 1.
              count = count + 1.
              REPLACE '$' WITH 'ATP' INTO lv_srwp.
            ENDIF.

            IF lv_icman EQ 1.
              count = count + 1.
              REPLACE '$' WITH 'ICM' INTO lv_srwp.
            ENDIF.

            WHILE count < 8.
              REPLACE '$' WITH '' INTO lv_srwp.
              count = count + 1.
            ENDWHILE.
* // End of logioc for WP Types :
            lv_srconv1 = ls_tsrvlst-appsrvname.
            lv_srconv2 = ls_tsrvlst-appsrvname.
*   FM to fetch data of Back. WP
            CALL FUNCTION 'TH_COUNT_WPS'
              EXPORTING
                server  = lv_srconv1
              IMPORTING
                btc_wps = lv_nbtcwps
              EXCEPTIONS
                failed  = 1
                OTHERS  = 2.

            lv_srbtcwp = lv_nbtcwps."Converting Back.WP value to string
* FM read number of  Back. WP Class A  value
            CALL FUNCTION 'RZL_STRG_READ_C'
              EXPORTING
                name           = lc_wpident
                srvname        = lv_srconv2
              IMPORTING
                value          = lv_classchar
              EXCEPTIONS
                argument_error = 1
                not_found      = 2
                send_error     = 3
                OTHERS         = 4.
            IF sy-subrc EQ 0.
              lv_classnum = lv_classchar. " Type casting to number
              lv_classint = lv_classnum.  " Type casting to integer
            ELSE.
              lv_classint = 0.
            ENDIF.
            lv_srbtcwpca =  lv_classint .  " Type casting to string

*  Data of field migrated
            CONCATENATE ls_tsrvgrp-grpname    lc_sep
            ls_tsrvlst-appsrvname lc_sep
            lv_srhost             lc_sep
            lv_srstate            lc_sep
            lv_srwp               lc_sep
            lv_srbtcwp            lc_sep
            lv_srbtcwpca INTO ls_prefinal.
* Form to replace blank value of last field with NULL
            PERFORM end_null_check CHANGING ls_prefinal.
            ls_output = ls_prefinal.
            APPEND ls_output TO lt_output.
*//End of logic to get details of the instance and attach it to group
            CLEAR: ls_output,ls_serverinfo,ls_tsrvgrp, ls_tsrvlst,
            lv_srwp, lv_srbtcwp, lv_srbtcwpca,count,lv_srstate,
            lv_classchar, lv_classnum, lv_classint, lv_srconv2,
            lv_srconv1, lv_nbtcwps, lv_dialog, lv_batch,lv_update,
            lv_update2, lv_spool,lv_enqueue, lv_atp, lv_icman,
            lv_srhost.
          ENDLOOP.
        ELSE.
          " If no server  are maintained.
          ls_output = lc_nodata.  "+V001
          APPEND ls_output TO lt_output.
        ENDIF.
      ELSE.
        " If no server groups are maintained.
        ls_output = lc_nodata.  "+V001
        APPEND ls_output TO lt_output.
      ENDIF.

*  Begin of changes in V001
    WHEN OTHERS.
      ls_output = lc_inc_input. "Incorrect input
      APPEND ls_output TO lt_output.
      CLEAR ls_output.
*  End of changes in V001

  ENDCASE.
* Form to replace blank value of middle field with NULL
  PERFORM null_check TABLES  lt_output.
  CLEAR: ls_output, ls_serverinfo,ls_tsrvgrp, ls_tsrvlst,
  lv_srwp, lv_srbtcwp, lv_srbtcwpca,count,lv_srstate,
  lv_classchar, lv_classnum, lv_classint, lv_srconv2,
  lv_srconv1, lv_nbtcwps, lv_dialog, lv_batch,lv_update,
  lv_update2, lv_spool,lv_enqueue, lv_atp, lv_icman,
  lv_srhost.
  FREE: lt_tsrvgrp, lt_tsrvlst, sys_tabl .
ENDFORM.

FORM end_null_check  CHANGING ls_string TYPE string.

  DATA lv_last_char TYPE char1.

  lv_last_char = substring( val = ls_string
  off = strlen( ls_string ) - 1
  len = 1 ).
  IF lv_last_char = '|'.
    CONCATENATE ls_string 'NULL'
    INTO ls_string.
  ENDIF.

ENDFORM.

FORM null_check  TABLES   lt_table TYPE table.

  DO .
    REPLACE ALL OCCURRENCES OF SUBSTRING '||'
    IN TABLE lt_table WITH '|NULL|'.
    FIND '||' IN TABLE lt_table.
    IF sy-subrc <> 0.
      EXIT .
    ENDIF.
  ENDDO.
ENDFORM.