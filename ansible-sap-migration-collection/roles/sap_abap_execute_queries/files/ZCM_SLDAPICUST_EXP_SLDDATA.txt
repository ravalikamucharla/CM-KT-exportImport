*---------------------------------------------------------------------*
* Program Name        :  ZCM_SLDAPICUST_EXP_SLDDATA                   *
* Title               :  Display SLD access data                      *
* Purpose             :  This report is used to display SLD access    *
*                     :  migrate                                      *
*---------------------------------------------------------------------*
* Related Transaction OR Standard Program References                  *
* SLDAPICUST                                                          *
*---------------------------------------------------------------------*
* Tables              :   SELECT    UPDATE      INSERT      DELETE    *
* XXXXX                     X                                         *
*---------------------------------------------------------------------*
* Program Change History                                              *
*---------------------------------------------------------------------*
*Date        Version   Author         TR#/Local     Description       *
*---------------------------------------------------------------------*
*09-22-2020  Initial   Yasaswini K   Local      To display SLD access *
*09-20-2022  V001      Soumya Ray    Local      To pass 'No data found*
*                                               in case no data found *
*                                               in system             *
*---------------------------------------------------------------------*
REPORT zcm_sldapicust_exp_slddata.

FORM get_config
              TABLES lt_input  STRUCTURE tab512
                     lt_output STRUCTURE tab512.


  DATA: ls_input        TYPE tab512,
        ls_output       TYPE tab512,
        ls_prefinal     TYPE string,
        lv_password     TYPE sld_password,
        lv_action       TYPE char8,
        ls_indx         TYPE lcrt_indx,
        t_dbdata        TYPE sld_t_accessdata,
        ls_dbdata       TYPE sld_s_accessdata,
        use_wbem_client TYPE abap_bool,
        use_http_dest   TYPE abap_bool,
        db_is_initial   TYPE abap_bool,
        lv_param        TYPE abap_bool,
        lv_rfc          TYPE abap_bool. "+V001

  CONSTANTS: lc_srtfd       TYPE indx_srtfd VALUE 'SLDACCESSDATA',
             lc_sep         TYPE c          VALUE '|',
             lc_x           TYPE c          VALUE 'X',
             lc_sld         TYPE char20     VALUE 'SLDServers',
             lc_action      TYPE char20     VALUE 'Action',
             lc_export      TYPE char20     VALUE 'EXPORT',
             lc_null        TYPE char4      VALUE 'NULL',
             lc_radiobutton TYPE char80   VALUE
             'Access to SLD',
             lc_slddata     TYPE char80     VALUE
             'SLD Access data',
             lc_rfc         TYPE char80     VALUE
             'Access to SLD Server Using RFC',
             lc_http        TYPE char80     VALUE
             'Access to SLD Server Using HTTP',
             lc_param       TYPE char80     VALUE
             'Connection Parameter Entered Here',
             lc_des         TYPE char80     VALUE
             'Connection Using HTTP Destination',
             lc_destsrtfd   TYPE indx_srtfd VALUE
             'WBEMDESTINATIONS',
             lc_alias       TYPE char20     VALUE 'AliasName',
             lc_primary     TYPE char20     VALUE 'Primary',
             lc_hostname    TYPE char20     VALUE 'HostName',
             lc_port        TYPE char20     VALUE 'PortNo',
             lc_user        TYPE char20     VALUE 'User',
             lc_password    TYPE char20     VALUE 'Password',
* Begin of changes in V001
             lc_inc_input   TYPE c VALUE 'Incorrect input'    LENGTH 20,
             lc_noinput     TYPE c VALUE 'No input given'     LENGTH 20,
             lc_nodata      TYPE c VALUE 'No data found'      LENGTH 20.
* End of changes in V001

  REFRESH: t_dbdata[].

  CLEAR: ls_indx,
         lv_password,
         use_wbem_client,
         use_http_dest,
         ls_dbdata.

* Begin of changes in V001
  "Tittle
  CLEAR: ls_output.
  ls_output = lc_radiobutton.
  APPEND ls_output TO lt_output.
* End of changes in V001

  READ TABLE lt_input INTO ls_input INDEX 1.
* Begin of changes in V001
  IF sy-subrc NE 0.
    " No input given
    ls_output = lc_noinput.
    APPEND ls_output TO lt_output.
    CLEAR ls_output.
    RETURN.
  ENDIF.
* End of changes in V001
  lv_action = ls_input.

  CASE lv_action.

    WHEN lc_export.

      CLEAR: ls_output.
      CONCATENATE lc_sld lc_sep lc_action
      INTO ls_output.
      APPEND ls_output TO lt_output.

      cl_sld_accessor_wbem_client=>load_srvr_access_setting(
      IMPORTING
        flg_use_wbem_client = use_wbem_client
        flg_use_http_dest   = use_http_dest
        no_settings_in_db   = db_is_initial   ).

      IF use_wbem_client = abap_true.
        "HTTP
        CONCATENATE lc_http lc_sep lc_x
      INTO ls_output.
        APPEND ls_output TO lt_output.

        "RFC
        CONCATENATE lc_rfc lc_sep lc_null
        INTO ls_output.
        APPEND ls_output TO lt_output.

        "HTTP Destination
        IF use_http_dest = abap_true.
          CONCATENATE lc_des lc_sep lc_x
                      INTO ls_output.
          APPEND ls_output TO lt_output.

          CONCATENATE lc_param lc_sep lc_null
                      INTO ls_output.
          APPEND ls_output TO lt_output.

        ELSE.
          CONCATENATE lc_param lc_sep lc_x
                       INTO ls_output.
          APPEND ls_output TO lt_output.

          lv_param = 'X'.

          CONCATENATE lc_des lc_sep lc_null
                      INTO ls_output.
          APPEND ls_output TO lt_output.
        ENDIF.
      ELSE.
        CONCATENATE lc_http lc_sep lc_null
        INTO ls_output.
        APPEND ls_output TO lt_output.

        CONCATENATE lc_rfc lc_sep lc_x
        INTO ls_output.
        APPEND ls_output TO lt_output.

        lv_rfc = 'X'.

        CONCATENATE lc_param lc_sep lc_null
                      INTO ls_output.
        APPEND ls_output TO lt_output.

        CONCATENATE lc_des lc_sep lc_null
                    INTO ls_output.
        APPEND ls_output TO lt_output.
      ENDIF.


      "Blank line
      CLEAR: ls_output, ls_prefinal.
      APPEND ls_output TO lt_output.

      IF lv_rfc = 'X' OR lv_param = 'X'.

        IMPORT sldaccdata TO t_dbdata
               FROM DATABASE lcrt_indx(ld)
               ID lc_srtfd TO ls_indx.
      ELSE.

        IMPORT wbemdest TO t_dbdata
         FROM DATABASE lcrt_indx(ld)
         ID lc_destsrtfd TO ls_indx.

      ENDIF.

      "output heading
      CLEAR: ls_output.
      ls_output = lc_slddata.
      APPEND ls_output TO lt_output.
      CLEAR: ls_output.

      IF t_dbdata[] IS NOT INITIAL.
        "Headings
        CONCATENATE lc_alias     lc_sep
        lc_primary  lc_sep
        lc_hostname lc_sep
        lc_port     lc_sep
        lc_user     lc_sep
        lc_password
        INTO ls_output.
        APPEND ls_output TO lt_output.
        CLEAR: ls_output.
        "Data
        LOOP AT t_dbdata INTO ls_dbdata.
          CLEAR ls_dbdata-password.
          CONCATENATE ls_dbdata-alias   lc_sep
                      ls_dbdata-primary lc_sep
                      ls_dbdata-host    lc_sep
                      ls_dbdata-port    lc_sep
                      ls_dbdata-user    lc_sep
                      ls_dbdata-password
                      INTO ls_prefinal.
          "End Null Check
          PERFORM end_null_check CHANGING ls_prefinal.
          ls_output = ls_prefinal.
          APPEND ls_output TO lt_output.
          "Clear variables
          CLEAR: ls_dbdata,
                 ls_output,
                 ls_prefinal.
        ENDLOOP.
* Begin of changes in V001
      ELSE.
        ls_output = lc_nodata.
        APPEND ls_output TO lt_output.
        CLEAR ls_output.
      ENDIF.
* End of changes in V001
      "adding null to blanks - in betweeen
      PERFORM null_check TABLES  lt_output.

*   Begin of changes in V001

    WHEN OTHERS.
      " Incorrect input
      ls_output = lc_inc_input.
      APPEND ls_output TO lt_output.
      CLEAR ls_output.
*   End of changes in V001

  ENDCASE.
ENDFORM.
FORM end_null_check CHANGING ls_string TYPE string.

  DATA lv_last_char TYPE char1.

  lv_last_char = substring( val = ls_string
                   off = strlen( ls_string ) - 1
                   len = 1 ).
  IF lv_last_char = '|'.
    CONCATENATE ls_string 'NULL'
      INTO ls_string.
  ENDIF.

ENDFORM.
FORM null_check TABLES lt_table TYPE table.
  DO .
    REPLACE ALL OCCURRENCES OF SUBSTRING '||'
    IN TABLE lt_table WITH '|NULL|'.
    FIND '||' IN TABLE lt_table.
    IF sy-subrc <> 0.
      EXIT.
    ENDIF.
  ENDDO.
ENDFORM.