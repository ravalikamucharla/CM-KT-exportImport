*---------------------------------------------------------------------*
* Program Name        :  ZCM_ORA_ST04_SYSTEM_PERFORMANC               *
* Title               :  Capture system configuration & Performance   *
*                        overview                                     *
* Purpose             :  To capture system configuration & Performance*
*                        overview in ST04 for Oracle DB               *
*---------------------------------------------------------------------*
* Related Transaction OR Standard Program References                  *
* ST04                                                                *
*---------------------------------------------------------------------*
* Tables              :   SELECT    UPDATE      INSERT      DELETE    *
* DB6NAVSYST                X                                         *
*---------------------------------------------------------------------*
* Program Change History                                              *
*---------------------------------------------------------------------*
*Date        Version   Author       TR#/Local     Description         *
*---------------------------------------------------------------------*
*03-31-2021  Initial  Soumya Ray   Local       Capture system config. *
*                                              & performance overview *
*---------------------------------------------------------------------*

*//SQL queries are taken from class CL_ORA_ACTION_MM2
REPORT zcm_ora_st04_system_performanc.

CONSTANTS: gc_elapsetm   TYPE c VALUE 'Elapsetm'   LENGTH 10,
           gc_poolsize   TYPE c VALUE 'Poolsize'   LENGTH 10,
           gc_inmemsize  TYPE c VALUE 'Inmemsize'  LENGTH 10,
           gc_shplsize   TYPE c VALUE 'Shrplsize'  LENGTH 10,
           gc_lprw       TYPE c VALUE 'LPRW'       LENGTH 4,
           gc_rdbyothses TYPE c VALUE 'Rdbyothses' LENGTH 10,
           gc_redolgrp   TYPE c VALUE 'Redolgrp'   LENGTH 8,
           gc_wrkarexec  TYPE c VALUE 'Wrkarexec'  LENGTH 9,
           gc_timestat   TYPE c VALUE 'Timestat'   LENGTH 8,
           gc_event      TYPE c VALUE 'Event'      LENGTH 5,
           gc_timepara   TYPE c VALUE 'Timepara'   LENGTH 8,
           gc_ttlwttm    TYPE c VALUE 'Ttlwttm'    LENGTH 7,
           gc_remsys     TYPE dbcon_name VALUE 'DEFAULT'.


CLASS lcl_sql_export DEFINITION.
  PUBLIC SECTION.
    METHODS     read_sql
      IMPORTING iv_tbhead    TYPE string
                iv_parameter TYPE string OPTIONAL
      EXPORTING et_result    TYPE ANY TABLE
                ev_query     TYPE string .

    METHODS convert_seconds
      IMPORTING iv_second TYPE ora_s_st04_main_data-nelapsetimesec
      EXPORTING ev_time   TYPE string.

    METHODS chg_unit
      IMPORTING iv_fieldsymbol_num  TYPE any
      EXPORTING ev_fieldsymbol_char TYPE any.

ENDCLASS.


FORM get_config
               TABLES lt_input  STRUCTURE tab512
                      lt_output STRUCTURE tab512.

  CONSTANTS: lc_sep       TYPE c VALUE '|'               LENGTH 1,
             lc_1         TYPE c VALUE '1'               LENGTH 1,
             lc_2         TYPE c VALUE '2'               LENGTH 1,
             lc_3         TYPE c VALUE '3'               LENGTH 1,
             lc_export    TYPE c VALUE 'EXPORT'          LENGTH 20,
             lc_ninput    TYPE c VALUE 'No input passed' LENGTH 15,
             lc_head      TYPE c VALUE
             'System configuration details'              LENGTH 30,
             lc_head2     TYPE c VALUE
             'Performance overview details'              LENGTH 30,
             lc_naction   TYPE c VALUE
             'Incorrect input command'                   LENGTH 23,
             lc_nodata    TYPE c VALUE
             'No system data available'                  LENGTH 30,
             lc_lrdate    TYPE c VALUE 'Refreshdate'     LENGTH 15,
             lc_lrtime    TYPE c VALUE 'Refreshtime'     LENGTH 15,
             lc_config    TYPE c VALUE
             'Configuredsystems'                         LENGTH 20,
             lc_incomp    TYPE c VALUE
             'Incompletesystems'                         LENGTH 20,
             lc_system    TYPE c VALUE 'System'          LENGTH 6,
             lc_dbsys     TYPE c VALUE 'Dbsystem'        LENGTH 10,
             lc_dbrelse   TYPE c VALUE 'Dbrelease'       LENGTH 10,
             lc_dbhost    TYPE c VALUE 'Dbhost'          LENGTH 10,
             lc_relse     TYPE c VALUE 'Release'         LENGTH 10,
             lc_conname   TYPE c VALUE 'Connectionname'  LENGTH 15,
             lc_dbuser    TYPE c VALUE 'Dbuser'          LENGTH 6,
             lc_rfcdest   TYPE c VALUE 'Rfcdestination'  LENGTH 20,
             lc_domname   TYPE dd07l-domname VALUE 'DBCON_DBMS',
             lc_set       TYPE ddrefstruc-bool  VALUE 'X',
             lc_sap       TYPE c VALUE 'SAP'             LENGTH 3,
             lc_general   TYPE c VALUE
             'General information'                       LENGTH 20,
             lc_sizes     TYPE c VALUE 'Sizes'           LENGTH 5,
             lc_quality   TYPE c VALUE 'Quality'         LENGTH 7,
             lc_logbuf    TYPE c VALUE 'Log buffer'      LENGTH 10,
             lc_timest    TYPE c VALUE 'Time statistics' LENGTH 15,
             lc_calls     TYPE c VALUE 'Calls'           LENGTH 5,
             lc_redolog   TYPE c VALUE 'Redo loggings'   LENGTH 15,
             lc_tbscan    TYPE c VALUE
             'Table scans and fetches'                   LENGTH 30,
             lc_sorts     TYPE c VALUE 'Sorts'           LENGTH 5,
             lc_blhead    TYPE c VALUE 'Blockheading'    LENGTH 12,
             lc_fldhead   TYPE c VALUE 'Fieldheading'    LENGTH 12,
             lc_value     TYPE c VALUE 'Value'           LENGTH 5,
             lc_sec       TYPE c VALUE 's'               LENGTH 1,
             lc_per       TYPE c VALUE '%'               LENGTH 1,
             lc_lbr       TYPE c VALUE '['               LENGTH 1,
             lc_rbr       TYPE c VALUE ']'               LENGTH 1,
             lc_msec      TYPE c VALUE 'ms'              LENGTH 2,
             lc_dbinst    TYPE c VALUE 'Dbinstance'      LENGTH 10,
             lc_dbnode    TYPE c VALUE 'Dbnode'          LENGTH 6,
             lc_dbrels    TYPE c VALUE 'Dbrelease'       LENGTH 10,
             lc_dytm      TYPE c VALUE 'Day,time'        LENGTH 10,
             lc_strtup    TYPE c VALUE 'Start up at'     LENGTH 15,
             lc_tmstrt    TYPE c VALUE
             'Timesincestart'                            LENGTH 20,
             lc_dbtime    TYPE c VALUE 'Dbtime'          LENGTH 6,
             lc_dbuffer   TYPE c VALUE
             'Database buffer size'                      LENGTH 20,
             lc_sdpool    TYPE c VALUE
             'Size default pool'                         LENGTH 20,
             lc_skpool    TYPE c VALUE
             'Size keep pool'                            LENGTH 20,
             lc_sothers   TYPE c VALUE 'Size others'     LENGTH 15,
             lc_msize     TYPE c VALUE
             'In_memory_size'                            LENGTH 20,
             lc_spsize    TYPE c VALUE
             'Shared pool size'                          LENGTH 20,
             lc_lreads    TYPE c VALUE 'Logical reads'   LENGTH 13,
             lc_preads    TYPE c VALUE 'Physical reads'  LENGTH 15,
             lc_pwrites   TYPE c VALUE
             'Physical writes'                           LENGTH 15,
             lc_rothses   TYPE c VALUE
             'Read by other sess'                        LENGTH 20,
             lc_rothset   TYPE c VALUE
             'Read by other sess time'                   LENGTH 30,
             lc_dbquality TYPE c VALUE
             'Data Buffer Quality'                       LENGTH 20,
             lc_dcquality TYPE c VALUE
             'DD-cache Quality'                          LENGTH 20,
             lc_sagratio  TYPE c VALUE
             'SQL area getratio'                         LENGTH 20,
             lc_sapratio  TYPE c VALUE
             'SQL area pinratio'                         LENGTH 20,
             lc_srepins   TYPE c VALUE
             'SQLA.Reloads/pins'                         LENGTH 20,
             lc_entry     TYPE c VALUE 'Entries'         LENGTH 7,
             lc_alntry    TYPE c VALUE
             'Allocation retries'                        LENGTH 20,
             lc_rlsw      TYPE c VALUE
             'Redo log space wait'                       LENGTH 20,
             lc_rlgrps    TYPE c VALUE 'Redo log groups' LENGTH 20,
             lc_lfile     TYPE c VALUE
             'Log files [in use]'                        LENGTH 20,
             lc_usrcall   TYPE c VALUE 'User calls'      LENGTH 10,
             lc_usrcomt   TYPE c VALUE 'User Commits'    LENGTH 12,
             lc_usrroll   TYPE c VALUE 'User rollbacks'  LENGTH 20,
             lc_recucal   TYPE c VALUE
             'Recursive Calls'                           LENGTH 15,
             lc_parscal   TYPE c VALUE 'Parse Count'     LENGTH 11,
             lc_usrrcal   TYPE c VALUE
             'User/recursive calls'                      LENGTH 20,
             lc_lgrdusr   TYPE c VALUE
             'Log.Reads/User Calls'                      LENGTH 30,
             lc_redowrt   TYPE c VALUE 'Redo writes'     LENGTH 11,
             lc_oblkwrt   TYPE c VALUE
             'OS blocks written'                         LENGTH 20,
             lc_ltchtm    TYPE c VALUE 'Latching time'   LENGTH 13,
             lc_rdwrtm    TYPE c VALUE 'Redo write time' LENGTH 15,
             lc_vlmwrt    TYPE c VALUE 'Volume written'  LENGTH 15,
             lc_shrtscn   TYPE c VALUE
             'Short table scans'                         LENGTH 20,
             lc_lngtbscn  TYPE c VALUE
             'Long table scan'                           LENGTH 15,
             lc_tblftrw   TYPE c VALUE
             'Table fetch by rowid'                      LENGTH 25,
             lc_ftchrw    TYPE c VALUE
             'Fetch by contin. row'                      LENGTH 20,
             lc_srtmem    TYPE c VALUE 'Sorts(memory)'   LENGTH 15,
             lc_srtdsk    TYPE c VALUE 'Sorts(disk)'     LENGTH 12,
             lc_srtrws    TYPE c VALUE 'Sorts(rows)'     LENGTH 12,
             lc_waopmd    TYPE c VALUE
             'WA exec. optimal mode'                     LENGTH 22,
             lc_waonmd    TYPE c VALUE
             'WA exec. one pass mode'                    LENGTH 22,
             lc_wamlmd    TYPE c VALUE
             'WA exec. multipass mode'                   LENGTH 30,
             lc_cptmses   TYPE c VALUE
             'CPU time session'                          LENGTH 16,
             lc_tmuser    TYPE c VALUE 'Time/User call'  LENGTH 14,
             lc_bsywttm   TYPE c VALUE 'Busy wait time'  LENGTH 14,
             lc_sessbsy   TYPE c VALUE 'Sessions busy'   LENGTH 14,
             lc_nocpu     TYPE c VALUE 'Number of CPUs'  LENGTH 16,
             lc_cpusage   TYPE c VALUE 'CPU usage'       LENGTH 10.

  TYPES: BEGIN OF lty_elapsetm,
           inst_id  TYPE ora_s_st04_main_data-db_inst_id,
           elaptime TYPE ora_s_st04_main_data-nelapsetimesec,
         END OF lty_elapsetm,
         BEGIN OF lty_poolvl,
           inst_id    TYPE ora_s_st04_main_data-db_inst_id,
           size_def   TYPE ora_s_st04_main_data-nsize_default_pool,
           size_keep  TYPE ora_s_st04_main_data-nsize_keep_pool,
           size_other TYPE ora_s_st04_main_data-nsize_others,
         END OF lty_poolvl,
         BEGIN OF lty_memory,
           memory_target TYPE ora_s_st04_main_data-nmemory_target,
           inmemory_size TYPE ora_s_st04_main_data-ninmemory_size,
         END OF lty_memory,
         BEGIN OF lty_shpool,
           inst_id  TYPE ora_s_st04_main_data-db_inst_id,
           shplsize TYPE ora_s_st04_main_data-nshpl_size,
         END OF lty_shpool,
         BEGIN OF lty_lpread,
           inst_id       TYPE ora_s_st04_main_data-db_inst_id,
           logreads      TYPE ora_s_st04_main_data-ndbuff_logreads,
           physreads     TYPE ora_s_st04_main_data-ndbuff_physreads,
           physwrites    TYPE ora_s_st04_main_data-ndbuff_physwrites,
           physreadsd    TYPE ora_s_st04_main_data-ndbuff_physreadd,
           physreadsdlob TYPE ora_s_st04_main_data-ndbuff_physreaddl,
         END OF lty_lpread,
         BEGIN OF lty_othsess,
           inst_id  TYPE ora_s_st04_main_data-db_inst_id,
           numwaits TYPE ora_s_st04_main_data-nreadbyothersess,
           waittime TYPE ora_s_st04_main_data-nreadbyothersesstw,
         END OF lty_othsess,
         BEGIN OF lty_wastat,
           inst_id         TYPE ora_s_st04_main_data-db_inst_id,
           usercalls       TYPE ora_s_st04_main_data-ncll_usercalls,
           redowrtltchtime TYPE ora_s_st04_main_data-nrdlg_ltchtim,
           redosize        TYPE ora_s_st04_main_data-nrdlg_mbwritten,
           waexopt         TYPE ora_s_st04_main_data-nsort_waexopt,
           waexone         TYPE ora_s_st04_main_data-nsort_waexonep,
           waexmult        TYPE ora_s_st04_main_data-nsort_waexmultp,
         END OF lty_wastat,
         BEGIN OF lty_timsess,
           inst_id    TYPE ora_s_st04_main_data-db_inst_id,
           cpusession TYPE ora_s_st04_main_data-ncpusession,
         END OF lty_timsess,
         BEGIN OF lty_bsywttm,
           inst_id      TYPE ora_s_st04_main_data-db_inst_id,
           busywaittime TYPE ora_s_st04_main_data-ntims_busywt,
         END OF lty_bsywttm,
         BEGIN OF lty_ntotalwtm,
           inst_id        TYPE ora_s_st04_main_data-db_inst_id,
           ntotalwaittime TYPE ora_s_st04_main_data-ntotalwaittime,
         END OF lty_ntotalwtm,
         BEGIN OF lty_redologrp,
           inst_id        TYPE ora_s_st04_main_data-db_inst_id,
           redolog_groups TYPE ora_s_st04_main_data-nredolog_groups,
         END OF lty_redologrp.

  DATA: ls_output      TYPE tab512,
        ls_input       TYPE tab512,
        lv_action      TYPE string,
        ls_prefinal    TYPE string,
        lv_date        TYPE string,
        lv_time        TYPE string,
        lv_lconfig     TYPE string,
        lv_lincomp     TYPE string,
        lv_query       TYPE string,
        lv_size        TYPE string,
        lv_size1       TYPE string,
        lv_size2       TYPE string,
        lv_parameter   TYPE string,
        ls_orarelse    TYPE oracle_release,
        lv_langu       TYPE dd07t-ddlanguage,
        lt_dbsys       TYPE STANDARD TABLE OF dd07v,
        lv_last_char   TYPE char1,
        lv_ntimsp_ucll TYPE ora_s_st04_main_data-ntims_tim_per_ucll,
        lv_ntm_sessbsy TYPE ora_s_st04_main_data-ntims_sess_busy,
        lv_ntmcpuusg   TYPE ora_s_st04_main_data-ntims_cpuusage,
        ls_navsyst     TYPE db6navsyst,
        ls_tst04       TYPE tst04,
        ls_elapsetm    TYPE lty_elapsetm,
        ls_poolvl      TYPE lty_poolvl,
        ls_memory      TYPE lty_memory,
        ls_shpool      TYPE lty_shpool,
        ls_lpread      TYPE lty_lpread,
        ls_othsess     TYPE lty_othsess,
        ls_redologrp   TYPE lty_redologrp,
        ls_wastat      TYPE lty_wastat,
        ls_timses      TYPE lty_timsess,
        ls_ntotalwtm   TYPE lty_ntotalwtm,
        lv_dbtime      TYPE sy-uzeit,
        ls_bsywttm     TYPE lty_bsywttm,
        ls_dbsys       TYPE dd07v,
        lv_length      TYPE i,
        lv_cputime     TYPE ora_s_st04_main_data-ncpusession,
        lt_preoutput   TYPE STANDARD TABLE OF string,
        lt_tst04       TYPE STANDARD TABLE OF tst04,
        lt_elapsetm    TYPE STANDARD TABLE OF lty_elapsetm,
        lt_poolvl      TYPE STANDARD TABLE OF lty_poolvl,
        lt_memory      TYPE STANDARD TABLE OF lty_memory,
        lt_shpool      TYPE STANDARD TABLE OF lty_shpool,
        lt_lpread      TYPE STANDARD TABLE OF lty_lpread,
        lt_othsess     TYPE STANDARD TABLE OF lty_othsess,
        lt_wastat      TYPE STANDARD TABLE OF lty_wastat,
        lt_timsess     TYPE STANDARD TABLE OF lty_timsess,
        lt_bsywttm     TYPE STANDARD TABLE OF lty_bsywttm,
        lt_ntotalwtm   TYPE STANDARD TABLE OF lty_ntotalwtm,
        lt_redologrp   TYPE STANDARD TABLE OF lty_redologrp,
        lt_idle_events TYPE STANDARD TABLE OF ora_event
        WITH DEFAULT KEY,
        lo_sql_export  TYPE REF TO lcl_sql_export,
        lo_adbc_cmd    TYPE REF TO cl_ora_adbc_cmd,
        lv_tbhead      TYPE string,
        ls_raw_sys     TYPE db6navsyst,
        lo_sys_ref     TYPE REF TO cl_db6_sys,
        lv_dbuser      TYPE dbcon_name.

* Heading of the script
  "System Configuration details & performance overview details
  ls_output = lc_head.
  APPEND ls_output TO lt_preoutput.
  CLEAR: ls_output, ls_input, lv_action.

  " Read action required from Python interface
  READ TABLE lt_input INTO ls_input INDEX 1.
  IF sy-subrc EQ 0.
    lv_action = ls_input.
  ELSE.
    ls_output = lc_ninput. "No input passed
    APPEND ls_output TO lt_preoutput.
    lt_output[] = lt_preoutput[].
    RETURN.
  ENDIF.

  CLEAR: ls_output, ls_prefinal, lv_date, lv_time, lv_lconfig,
  lv_lincomp, lv_query,lv_size, lv_size1, lv_size2, lv_parameter,
  ls_orarelse, lv_langu, lv_last_char, ls_navsyst, lv_ntimsp_ucll,
  lv_ntm_sessbsy, lv_ntmcpuusg, lv_tbhead, ls_tst04, ls_elapsetm,
  ls_poolvl, ls_memory, ls_shpool, ls_lpread, ls_othsess, ls_bsywttm,
  ls_redologrp, ls_wastat, ls_timses, ls_ntotalwtm, lv_dbtime,
  ls_dbsys, lv_cputime, lv_dbuser.

  FREE: lt_dbsys,lt_tst04, lt_elapsetm, lt_poolvl,
  lt_memory, lt_shpool, lt_lpread, lt_othsess, lt_wastat, lt_timsess,
  lt_idle_events, lt_bsywttm, lt_ntotalwtm, lt_redologrp, lt_lpread,
  lt_poolvl.

  CASE lv_action.

    WHEN lc_export. "EXPORT
      "To fetch details of system registered
      SELECT SINGLE *  FROM db6navsyst
      INTO ls_navsyst WHERE sysid = sy-sysid.
      IF sy-subrc NE 0.
        ls_output = lc_nodata.
        APPEND ls_output TO lt_preoutput.
        CLEAR ls_output.
        lt_output[] = lt_preoutput[].
        RETURN.
      ENDIF.

      " To get number of  system configured  successfully
      IF ls_navsyst-entrystate EQ lc_2."2=COMPLETE
        lv_lconfig = lc_1.
        CLEAR lv_lincomp.
      ELSEIF ls_navsyst-entrystate EQ lc_3. "3=DISABLED
        lv_lincomp = lc_1.
        CLEAR lv_lconfig.
      ENDIF.

      lv_date = sy-datum. "System date
      lv_time = sy-uzeit. "System time
      lv_langu = sy-langu. " System language
      " FM to get DB system name
      CALL FUNCTION 'DD_DOMVALUES_GET'
        EXPORTING
          domname        = lc_domname
          text           = lc_set
          langu          = lv_langu
        TABLES
          dd07v_tab      = lt_dbsys
        EXCEPTIONS
          wrong_textflag = 1
          OTHERS         = 2.
      IF sy-subrc NE 0.
        " The FM is used to get system name and if it fails the
        "processing has to continue
        FREE: lt_dbsys.
      ENDIF.
      SORT lt_dbsys BY domname ASCENDING.
      "DB User
      LOOP AT cl_db6_sys=>systems INTO ls_raw_sys.
        TRY.
            IF ls_raw_sys-sysid = cl_db6_sys=>local_sysid.
              lo_sys_ref = cl_db6_sys=>get_local_sys_ref( ).
              IF lo_sys_ref->con_ref IS BOUND.
                lv_dbuser = lo_sys_ref->con_ref->get_user( ).
              ENDIF.
            ELSEIF ls_raw_sys-dbcname IS NOT INITIAL AND
              ls_raw_sys-dbcon_via_rfc = abap_true.
              lv_dbuser =
       cl_dba_dbcon=>read_buffer( connection_name = ls_raw_sys-dbcname
              rfcdest  = ls_raw_sys-rfcdest )-user_name.
            ELSEIF ls_raw_sys-dbcname IS NOT INITIAL.
              lv_dbuser = cl_dba_dbcon=>read_buffer( connection_name =
              ls_raw_sys-dbcname )-user_name.
            ENDIF.
          CATCH cx_dba_root.
            CLEAR lv_dbuser.
        ENDTRY.
        CLEAR: ls_raw_sys.
      ENDLOOP.

      "Subheading of system configuration
      CONCATENATE lc_lrdate lc_lrtime lc_config lc_incomp lc_system
      lc_dbsys lc_dbrelse lc_dbhost lc_relse lc_conname
      lc_dbuser lc_rfcdest INTO ls_output
      SEPARATED BY lc_sep.
      APPEND ls_output TO lt_preoutput.
      CLEAR ls_output.

      READ TABLE lt_dbsys INTO ls_dbsys
      WITH KEY domvalue_l = ls_navsyst-dbsys.
      IF sy-subrc NE 0.
        " System name is passed as blank if long text is
        "not maintained
        CLEAR ls_dbsys-ddtext.
      ENDIF.
      CONCATENATE lv_date lv_time lv_lconfig lv_lincomp
      ls_navsyst-sysid ls_dbsys-ddtext ls_navsyst-dbrel
      ls_navsyst-dbhost ls_navsyst-saprel ls_navsyst-dbcname
      lv_dbuser ls_navsyst-rfcdest_2
      INTO ls_prefinal SEPARATED BY lc_sep.
      CONDENSE ls_prefinal.
      ls_output = ls_prefinal.
      APPEND ls_output TO lt_preoutput.
      CLEAR: ls_output, ls_navsyst, ls_prefinal, ls_dbsys.

      APPEND ls_output TO lt_preoutput.
      ls_orarelse-r3 = lc_sap.
      "Heading of performance overview table
      ls_output = lc_head2.
      APPEND ls_output TO lt_preoutput.
      CLEAR ls_output.

* FM to get details of performance overview
      CALL FUNCTION 'DB_ORA_MAIN_LIST'
        EXPORTING
          ora_release         = ls_orarelse
          all_instances       = 'X'
        TABLES
          dbora_per_instances = lt_tst04
        EXCEPTIONS
          generation_error    = 1
          wrong_database      = 2
          x_error             = 3
          OTHERS              = 4.
      IF sy-subrc <> 0.
        ls_output = lc_nodata."No system data available
        APPEND ls_output TO lt_preoutput.
        CLEAR ls_output.
        lt_output[] = lt_preoutput[].
        RETURN.
      ENDIF.

      READ TABLE lt_tst04 INTO ls_tst04 INDEX 1.
      IF sy-subrc NE 0.
        ls_output = lc_nodata."No system data available
        APPEND ls_output TO lt_preoutput.
        CLEAR ls_output.
        lt_output[] = lt_preoutput[].
        RETURN.
      ENDIF.
      CONCATENATE lc_blhead lc_sep lc_fldhead lc_sep
      lc_value INTO ls_output.
      APPEND ls_output TO lt_preoutput.
      CLEAR ls_output.

*//-------------General information-----------------------------//*
      CONCATENATE lc_general lc_sep lc_dbinst lc_sep
      ls_tst04-db_name INTO ls_output. "DB instance
      APPEND ls_output TO lt_preoutput.
      CLEAR ls_output.
      CONCATENATE lc_general lc_sep lc_dbnode lc_sep
      ls_tst04-db_server INTO ls_output. "DB node
      APPEND ls_output TO lt_preoutput.
      CLEAR ls_output.
      CONCATENATE lc_general lc_sep lc_dbrels lc_sep
      ls_tst04-version INTO ls_output. "DB release
      APPEND ls_output TO lt_preoutput.
      CLEAR: ls_output, lv_date.
      CONCATENATE ls_tst04-curr_date ls_tst04-curr_time
      INTO lv_date SEPARATED BY space. "Day, Time
      CONCATENATE lc_general lc_sep lc_dytm lc_sep lv_date
      INTO ls_output.
      APPEND ls_output TO lt_preoutput.
      CLEAR: ls_output, lv_date.
      CONCATENATE ls_tst04-db_up_date ls_tst04-db_up_time
      INTO lv_date SEPARATED BY space.
      CONCATENATE lc_general lc_sep lc_strtup lc_sep lv_date
      INTO ls_output. "Start up at
      APPEND ls_output TO lt_preoutput.
      CLEAR: ls_output, lv_tbhead.

***Instantiating a class object
      CREATE OBJECT lo_sql_export.
      " To get elapse time in second
      lv_tbhead = gc_elapsetm.
      CALL METHOD lo_sql_export->read_sql
        EXPORTING
          iv_tbhead = lv_tbhead
        IMPORTING
          et_result = lt_elapsetm.

      READ TABLE lt_elapsetm INTO ls_elapsetm INDEX 1.
      IF sy-subrc EQ 0.
        "Convert elapse time in seconds to hours, minutes and day
        CALL METHOD lo_sql_export->convert_seconds
          EXPORTING
            iv_second = ls_elapsetm-elaptime
          IMPORTING
            ev_time   = lv_time.
      ENDIF.
      CONCATENATE lc_general lc_sep lc_tmstrt lc_sep lv_time
      INTO ls_output. "Time since start
      APPEND ls_output TO lt_preoutput.
      CLEAR: ls_output, ls_prefinal, lv_size.
*//-------------General information-----------------------------//*

*//-------------Sizes------------------------------------------//*
      " To change buffer size in KB to GB
      CALL METHOD lo_sql_export->chg_unit
        EXPORTING
          iv_fieldsymbol_num  = ls_tst04-bufsize
        IMPORTING
          ev_fieldsymbol_char = lv_size.

      CONCATENATE lc_sizes lc_sep lc_dbuffer lc_sep
      lv_size INTO ls_prefinal. "Database buffer size
      CONDENSE ls_prefinal.
      ls_output = ls_prefinal.
      APPEND ls_output TO lt_preoutput.
      CLEAR: ls_output, ls_prefinal, lv_tbhead, lv_size.

      "Pool sizes
      " To get shared pool size
      lv_tbhead = gc_poolsize.
      CALL METHOD lo_sql_export->read_sql
        EXPORTING
          iv_tbhead = lv_tbhead
        IMPORTING
          et_result = lt_poolvl.

      READ TABLE lt_poolvl INTO ls_poolvl INDEX 1.
      IF sy-subrc EQ 0.
        " -Size default pool unit conversion
        CALL METHOD lo_sql_export->chg_unit
          EXPORTING
            iv_fieldsymbol_num  = ls_poolvl-size_def
          IMPORTING
            ev_fieldsymbol_char = lv_size.
        " -Size keep pool unit conversion
        CALL METHOD lo_sql_export->chg_unit
          EXPORTING
            iv_fieldsymbol_num  = ls_poolvl-size_keep
          IMPORTING
            ev_fieldsymbol_char = lv_size1.
        " -Size others unit conversion
        CALL METHOD lo_sql_export->chg_unit
          EXPORTING
            iv_fieldsymbol_num  = ls_poolvl-size_other
          IMPORTING
            ev_fieldsymbol_char = lv_size2.
      ENDIF.
      CONCATENATE lc_sizes lc_sep lc_sdpool lc_sep lv_size
      INTO ls_prefinal.
      CONDENSE ls_prefinal. "-Size default pool
      ls_output = ls_prefinal.
      APPEND ls_output TO lt_preoutput.
      CLEAR: ls_output, ls_prefinal.
      CONCATENATE lc_sizes lc_sep lc_skpool lc_sep lv_size1
      INTO ls_prefinal."-Size keep pool
      CONDENSE ls_prefinal.
      ls_output = ls_prefinal.
      APPEND ls_output TO lt_preoutput.
      CLEAR: ls_output, ls_prefinal.
      CONCATENATE lc_sizes lc_sep lc_sothers lc_sep lv_size2
      INTO ls_prefinal."-Size others
      CONDENSE ls_prefinal.
      ls_output = ls_prefinal.
      APPEND ls_output TO lt_preoutput.

      CLEAR: ls_output, ls_prefinal, lv_size,lv_tbhead,
      lv_size1, lv_size2.

      " To get inmemory size
      lv_tbhead = gc_inmemsize.
      CALL METHOD lo_sql_export->read_sql
        EXPORTING
          iv_tbhead = lv_tbhead
        IMPORTING
          et_result = lt_memory.

      READ TABLE lt_memory INTO ls_memory INDEX 1.
      IF sy-subrc EQ 0.
        "In-memory-size unit change
        CALL METHOD lo_sql_export->chg_unit
          EXPORTING
            iv_fieldsymbol_num  = ls_memory-inmemory_size
          IMPORTING
            ev_fieldsymbol_char = lv_size.
      ENDIF.
      CONCATENATE lc_sizes lc_sep lc_msize lc_sep lv_size
      INTO ls_prefinal."In-memory-size
      CONDENSE ls_prefinal.
      ls_output = ls_prefinal.
      APPEND ls_output TO lt_preoutput.
      CLEAR: ls_prefinal, ls_output, lv_size, lv_tbhead.

      "Shared pool sizes
      lv_tbhead = gc_shplsize.
      CALL METHOD lo_sql_export->read_sql
        EXPORTING
          iv_tbhead = lv_tbhead
        IMPORTING
          et_result = lt_shpool.

      READ TABLE lt_shpool INTO ls_shpool INDEX 1.
      IF sy-subrc EQ 0.
        "Shared Pool Size unit change
        CALL METHOD lo_sql_export->chg_unit
          EXPORTING
            iv_fieldsymbol_num  = ls_shpool-shplsize
          IMPORTING
            ev_fieldsymbol_char = lv_size.
      ENDIF.
      CONCATENATE lc_sizes lc_sep lc_spsize lc_sep lv_size
      INTO ls_prefinal."Shared Pool Size
      CONDENSE ls_prefinal.
      ls_output = ls_prefinal.
      APPEND ls_output TO lt_preoutput.
      CLEAR: ls_output, ls_prefinal, lv_size, lv_tbhead.

      "Logical, physical read and write
      lv_tbhead = gc_lprw.
      CALL METHOD lo_sql_export->read_sql
        EXPORTING
          iv_tbhead = lv_tbhead
        IMPORTING
          et_result = lt_lpread.

      READ TABLE lt_lpread INTO ls_lpread INDEX 1.
      IF sy-subrc EQ 0.
        lv_size   = ls_lpread-logreads.
        lv_size1  = ls_lpread-physreads.
        lv_size2 = ls_lpread-physwrites.
      ENDIF.
      CONCATENATE lc_sizes lc_sep lc_lreads lc_sep
      lv_size INTO ls_prefinal."Logical reads
      CONDENSE ls_prefinal.
      ls_output = ls_prefinal.
      APPEND ls_output TO lt_preoutput.
      CLEAR: ls_output, ls_prefinal.
      CONCATENATE lc_sizes lc_sep lc_preads lc_sep
      lv_size1 INTO ls_prefinal."Physical reads
      CONDENSE ls_prefinal.
      ls_output = ls_prefinal.
      APPEND ls_output TO lt_preoutput.
      CLEAR: ls_output, ls_prefinal.
      CONCATENATE lc_sizes lc_sep lc_pwrites lc_sep
      lv_size2 INTO ls_prefinal."Physical writes
      CONDENSE ls_prefinal.
      ls_output = ls_prefinal.
      APPEND ls_output TO lt_preoutput.
      CLEAR: ls_output, ls_prefinal, lv_size, lv_tbhead,
      lv_size1, lv_size2.

      "Read by other sess, Read by other sess time
      lv_tbhead = gc_rdbyothses.
      CALL METHOD lo_sql_export->read_sql
        EXPORTING
          iv_tbhead = lv_tbhead
        IMPORTING
          et_result = lt_othsess.

      READ TABLE lt_othsess INTO ls_othsess INDEX 1.
      IF sy-subrc EQ 0.
        lv_size = ls_othsess-numwaits.
        lv_size1 = ls_othsess-waittime.
      ENDIF.
      CONCATENATE lc_sizes lc_sep lc_rothses lc_sep
      lv_size INTO ls_prefinal."Read by other sess
      CONDENSE ls_prefinal.
      ls_output = ls_prefinal.
      APPEND ls_output TO lt_preoutput.
      CLEAR: ls_output, ls_prefinal.
      CONCATENATE lc_sizes lc_sep lc_rothset lc_sep lv_size1
      lc_lbr lc_sec lc_rbr INTO ls_prefinal."Read by other sess time
      CONDENSE ls_prefinal.
      ls_output = ls_prefinal.
      APPEND ls_output TO lt_preoutput.
      CLEAR: ls_output, lv_size, ls_prefinal, lv_size1.
*//-------------Sizes------------------------------------------//*

*//-------------Quality----------------------------------------//*
      "Data Buffer Quality
      CONCATENATE lc_quality lc_sep lc_dbquality lc_sep
      ls_tst04-bufqual lc_lbr lc_per lc_rbr INTO ls_prefinal.
      CONDENSE ls_prefinal.
      ls_output = ls_prefinal.
      APPEND ls_output TO lt_preoutput.
      CLEAR: ls_output, ls_prefinal.
      "DD-cache Quality
      CONCATENATE lc_quality lc_sep lc_dcquality lc_sep
      ls_tst04-ddqual lc_lbr lc_per lc_rbr INTO ls_prefinal.
      CONDENSE ls_prefinal.
      ls_output = ls_prefinal.
      APPEND ls_output TO lt_preoutput.
      CLEAR: ls_output, ls_prefinal.
      "SQL area getratio
      CONCATENATE lc_quality lc_sep lc_sagratio lc_sep
      ls_tst04-getratio lc_lbr lc_per lc_rbr INTO ls_prefinal.
      CONDENSE ls_prefinal.
      ls_output = ls_prefinal.
      APPEND ls_output TO lt_preoutput.
      CLEAR: ls_output, ls_prefinal.
      "SQL area pinratio
      CONCATENATE lc_quality lc_sep lc_sapratio lc_sep
      ls_tst04-pinratio lc_lbr lc_per lc_rbr INTO ls_prefinal.
      CONDENSE ls_prefinal.
      ls_output = ls_prefinal.
      APPEND ls_output TO lt_preoutput.
      CLEAR: ls_output, ls_prefinal.
      "SQLA.Reloads/pins
      CONCATENATE lc_quality lc_sep lc_srepins lc_sep
      ls_tst04-sqlreloads lc_lbr lc_per lc_rbr INTO ls_prefinal.
      CONDENSE ls_prefinal.
      ls_output = ls_prefinal.
      APPEND ls_output TO lt_preoutput.
      CLEAR: ls_output, ls_prefinal, lv_tbhead. "lv_query
      "Log buffer
      lv_tbhead = gc_redolgrp.
      CALL METHOD lo_sql_export->read_sql
        EXPORTING
          iv_tbhead = lv_tbhead
        IMPORTING
          et_result = lt_redologrp.
*//-------------Quality----------------------------------------//*

*//-------------Log Buffer------------------------------------//*
      "Size
      CLEAR lv_size.
      " log buffer unit change
      CALL METHOD lo_sql_export->chg_unit
        EXPORTING
          iv_fieldsymbol_num  = ls_tst04-logsize
        IMPORTING
          ev_fieldsymbol_char = lv_size.
      CONCATENATE lc_logbuf lc_sep lc_sizes lc_sep lv_size
      INTO ls_prefinal.
      CONDENSE ls_prefinal.
      ls_output = ls_prefinal.
      APPEND ls_output TO lt_preoutput.
      CLEAR: ls_output, ls_prefinal.
      "Entries
      CONCATENATE lc_logbuf lc_sep lc_entry lc_sep
      ls_tst04-logentries  INTO ls_prefinal.
      CONDENSE ls_prefinal.
      ls_output = ls_prefinal.
      APPEND ls_output TO lt_preoutput.
      CLEAR: ls_output, ls_prefinal.
      "Allocation retries
      CONCATENATE lc_logbuf lc_sep lc_alntry lc_sep
      ls_tst04-logalloc INTO ls_prefinal.
      CONDENSE ls_prefinal.
      ls_output = ls_prefinal.
      APPEND ls_output TO lt_preoutput.
      CLEAR: ls_output, ls_prefinal.
      "Redo log space wait
      CONCATENATE lc_logbuf lc_sep lc_rlsw lc_sep
      ls_tst04-logalloc lc_lbr lc_sec lc_rbr INTO ls_prefinal.
      CONDENSE ls_prefinal.
      ls_output = ls_prefinal.
      APPEND ls_output TO lt_preoutput.
      CLEAR: ls_output, ls_prefinal, lv_size.
      "Redo log groups
      READ TABLE lt_redologrp INTO ls_redologrp INDEX 1.
      IF sy-subrc EQ 0.
        lv_size = ls_redologrp-redolog_groups.
      ENDIF.
      CONCATENATE lc_logbuf lc_sep lc_rlgrps lc_sep
      lv_size INTO ls_prefinal.
      CONDENSE ls_prefinal.
      ls_output = ls_prefinal.
      APPEND ls_output TO lt_preoutput.
      CLEAR: ls_output, ls_prefinal, lv_size.
      "Log files [in use]
      CONCATENATE lc_logbuf lc_sep lc_lfile lc_sep
      ls_tst04-redo_probl  INTO ls_prefinal.
      CONDENSE ls_prefinal.
      ls_output = ls_prefinal.
      APPEND ls_output TO lt_preoutput.
      CLEAR: ls_output, ls_prefinal.
*//-------------Log Buffer------------------------------------//*

*//-------------Calls----------------------------------------//*
      CONCATENATE lc_calls lc_sep lc_usrcall lc_sep
      ls_tst04-usercalls INTO ls_prefinal."User calls
      CONDENSE ls_prefinal.
      ls_output = ls_prefinal.
      APPEND ls_output TO lt_preoutput.
      CLEAR: ls_output, ls_prefinal.
      CONCATENATE lc_calls lc_sep lc_usrcomt lc_sep
      ls_tst04-commits INTO ls_prefinal. "User commits
      CONDENSE ls_prefinal.
      ls_output = ls_prefinal.
      APPEND ls_output TO lt_preoutput.
      CLEAR: ls_output, ls_prefinal.
      CONCATENATE lc_calls lc_sep lc_usrroll lc_sep
      ls_tst04-rollbacks INTO ls_prefinal.
      CONDENSE ls_prefinal.
      ls_output = ls_prefinal. "User rollbacks
      APPEND ls_output TO lt_preoutput.
      CLEAR: ls_output, ls_prefinal.
      CONCATENATE lc_calls lc_sep lc_recucal lc_sep
      ls_tst04-recurcalls INTO ls_prefinal.
      CONDENSE ls_prefinal.
      ls_output = ls_prefinal. "Recursive calls
      APPEND ls_output TO lt_preoutput.
      CLEAR: ls_output, ls_prefinal.
      CONCATENATE lc_calls lc_sep lc_parscal lc_sep
      ls_tst04-parses INTO ls_prefinal. "Parse count
      CONDENSE ls_prefinal.
      ls_output = ls_prefinal.
      APPEND ls_output TO lt_preoutput.
      CLEAR: ls_output, ls_prefinal.
      CONCATENATE lc_calls lc_sep lc_usrrcal lc_sep
      ls_tst04-usertorec INTO ls_prefinal. "User/recursive calls
      CONDENSE ls_prefinal.
      ls_output = ls_prefinal.
      APPEND ls_output TO lt_preoutput.
      CLEAR: ls_output, ls_prefinal.
      CONCATENATE lc_calls lc_sep lc_lgrdusr lc_sep
      ls_tst04-readcallra INTO ls_prefinal. "Log.Reads/User Calls
      CONDENSE ls_prefinal.
      ls_output = ls_prefinal.
      APPEND ls_output TO lt_preoutput.
      CLEAR: ls_output, ls_prefinal.
*//-------------Calls----------------------------------------//*

*//-------------Table scan and fetches----------------------//*
      CONCATENATE lc_tbscan lc_sep lc_shrtscn lc_sep
      ls_tst04-scanshort INTO ls_prefinal. "Short table scans
      CONDENSE ls_prefinal.
      ls_output = ls_prefinal.
      APPEND ls_output TO lt_preoutput.
      CLEAR: ls_output, ls_prefinal.
      CONCATENATE lc_tbscan lc_sep lc_lngtbscn lc_sep
      ls_tst04-scanlong INTO ls_prefinal. "Long table scan
      CONDENSE ls_prefinal.
      ls_output = ls_prefinal.
      APPEND ls_output TO lt_preoutput.
      CLEAR: ls_output, ls_prefinal.
      CONCATENATE lc_tbscan lc_sep lc_tblftrw lc_sep
      ls_tst04-fetchrowid INTO ls_prefinal. "Table fetch by rowid
      CONDENSE ls_prefinal.
      ls_output = ls_prefinal.
      APPEND ls_output TO lt_preoutput.
      CLEAR: ls_output, ls_prefinal.
      CONCATENATE lc_tbscan lc_sep lc_ftchrw lc_sep
      ls_tst04-fetchcont INTO ls_prefinal. "Fetch by contin. row
      CONDENSE ls_prefinal.
      ls_output = ls_prefinal.
      APPEND ls_output TO lt_preoutput.
      CLEAR: ls_output, ls_prefinal.
*//-------------Table scan and fetches----------------------//*

*//-------------Sort----------------------------------------//*
      CONCATENATE lc_sorts lc_sep lc_srtmem lc_sep
      ls_tst04-sortmem INTO ls_prefinal. "Sorts(memory)
      CONDENSE ls_prefinal.
      ls_output = ls_prefinal.
      APPEND ls_output TO lt_preoutput.
      CLEAR: ls_output, ls_prefinal.
      CONCATENATE lc_sorts lc_sep lc_srtdsk lc_sep
      ls_tst04-sortdisk INTO ls_prefinal. "Sorts(disk)
      CONDENSE ls_prefinal.
      ls_output = ls_prefinal.
      APPEND ls_output TO lt_preoutput.
      CLEAR: ls_output, ls_prefinal.
      CONCATENATE lc_sorts lc_sep lc_srtrws lc_sep
      ls_tst04-sortrows INTO ls_prefinal. "Sorts(rows)
      CONDENSE ls_prefinal.
      ls_output = ls_prefinal.
      APPEND ls_output TO lt_preoutput.
      CLEAR: ls_output, lv_size, ls_prefinal,lv_tbhead.
      "lv_query
      "Read WA exec. optimal mode, WA exec. one pass mode,
      "WA exec. multipass mode
      lv_tbhead = gc_wrkarexec.
      CALL METHOD lo_sql_export->read_sql
        EXPORTING
          iv_tbhead = lv_tbhead
        IMPORTING
          et_result = lt_wastat.

      READ TABLE lt_wastat INTO ls_wastat INDEX 1.
      IF sy-subrc EQ 0.
        lv_size = ls_wastat-waexopt.
        lv_size1 = ls_wastat-waexone.
        lv_size2 = ls_wastat-waexmult.
      ENDIF.
      CONCATENATE lc_sorts lc_sep lc_waopmd lc_sep lv_size
      INTO ls_prefinal. "WA exec. optimal mode
      CONDENSE ls_prefinal.
      ls_output = ls_prefinal.
      APPEND ls_output TO lt_preoutput.
      CLEAR: ls_output, ls_prefinal.
      CONCATENATE lc_sorts lc_sep lc_waonmd lc_sep lv_size1
      INTO ls_prefinal. "WA exec. one pass mode
      CONDENSE ls_prefinal.
      ls_output = ls_prefinal.
      APPEND ls_output TO lt_preoutput.
      CLEAR: ls_output, ls_prefinal.
      CONCATENATE lc_sorts lc_sep lc_wamlmd lc_sep lv_size2
      INTO ls_prefinal. "WA exec. multipass mode
      CONDENSE ls_prefinal.
      ls_output = ls_prefinal.
      APPEND ls_output TO lt_preoutput.
      CLEAR: ls_output, lv_size, ls_prefinal, lv_size1, lv_size2.
*//-------------Sort----------------------------------------//*

*//-------------Redo logging-------------------------------//*
      CONCATENATE lc_redolog lc_sep lc_redowrt lc_sep
      ls_tst04-logwrites INTO ls_prefinal. "Redo writes
      CONDENSE ls_prefinal.
      ls_output = ls_prefinal.
      APPEND ls_output TO lt_preoutput.
      CLEAR: ls_output, ls_prefinal.
      CONCATENATE lc_redolog lc_sep lc_oblkwrt lc_sep
      ls_tst04-logblocks INTO ls_prefinal. "OS blocks written
      CONDENSE ls_prefinal.
      ls_output = ls_prefinal.
      APPEND ls_output TO lt_preoutput.
      CLEAR: ls_output, ls_prefinal, lv_size.
      lv_size = ls_wastat-redowrtltchtime.
      CONCATENATE lc_redolog lc_sep lc_ltchtm lc_sep
      lv_size lc_lbr lc_sec lc_rbr
      INTO ls_prefinal. "Latching time
      CONDENSE ls_prefinal.
      ls_output = ls_prefinal.
      APPEND ls_output TO lt_preoutput.
      CLEAR: ls_output, ls_prefinal.
      CONCATENATE lc_redolog lc_sep lc_rdwrtm lc_sep
      ls_tst04-logwtime lc_lbr lc_sec lc_rbr
      INTO ls_prefinal. "Redo write time
      CONDENSE ls_prefinal.
      ls_output = ls_prefinal.
      APPEND ls_output TO lt_preoutput.
      CLEAR: ls_output, ls_prefinal, lv_size.

      " Volume written unit change
      CALL METHOD lo_sql_export->chg_unit
        EXPORTING
          iv_fieldsymbol_num  = ls_wastat-redosize
        IMPORTING
          ev_fieldsymbol_char = lv_size.

      CONCATENATE lc_redolog lc_sep lc_vlmwrt lc_sep
      lv_size INTO ls_prefinal. "Volume written
      CONDENSE ls_prefinal.
      ls_output = ls_prefinal.
      APPEND ls_output TO lt_preoutput.
      CLEAR: ls_output, lv_size, ls_prefinal, lv_tbhead.
*//-------------Redo logging-------------------------------//*

*//-------------Time Statistics---------------------------//*
      lv_tbhead = gc_timestat.
      CALL METHOD lo_sql_export->read_sql
        EXPORTING
          iv_tbhead = lv_tbhead
        IMPORTING
          et_result = lt_timsess.

      READ TABLE lt_timsess INTO ls_timses INDEX 1.
      IF sy-subrc EQ 0.
        ls_timses-cpusession = ls_timses-cpusession / 10000.
        lv_cputime = ls_timses-cpusession / 100.
        lv_size = lv_cputime. "CPU time session
      ENDIF.
      CONCATENATE  lc_timest lc_sep lc_cptmses lc_sep lv_size
      lc_lbr lc_sec lc_rbr INTO ls_prefinal.
      CONDENSE ls_prefinal.
      ls_output = ls_prefinal.
      APPEND ls_output TO lt_preoutput.
      CLEAR: ls_output, ls_prefinal, lv_size, lv_tbhead.

      lv_tbhead = gc_event.
      CALL METHOD lo_sql_export->read_sql
        EXPORTING
          iv_tbhead = lv_tbhead
        IMPORTING
          et_result = lt_idle_events.

      lv_parameter =
      repeat( val = '? ,' occ = lines( lt_idle_events ) ).
      SHIFT lv_parameter RIGHT DELETING TRAILING ','.
      CLEAR:lv_tbhead.

      lv_tbhead = gc_timepara.
      CALL METHOD lo_sql_export->read_sql
        EXPORTING
          iv_tbhead    = lv_tbhead
          iv_parameter = lv_parameter
        IMPORTING
          ev_query     = lv_query.
*
      lo_adbc_cmd = cl_ora_adbc_cmd=>create( gc_remsys
      )->set_query( lv_query ).
      CLEAR:lv_parameter, lv_size.
      LOOP AT lt_idle_events INTO lv_parameter.
        lo_adbc_cmd->set_param( lv_parameter ).
        CLEAR lv_parameter.
      ENDLOOP.
      lo_adbc_cmd->get_result_table( REF #( lt_bsywttm ) ).
      READ TABLE lt_bsywttm INTO ls_bsywttm INDEX 1.
      IF sy-subrc EQ 0.
        lv_ntimsp_ucll = 10 *
        ( 100 * ls_bsywttm-busywaittime + ls_timses-cpusession ) /
        ls_wastat-usercalls."Time/User call
        lv_size = lv_ntimsp_ucll.
        lv_size1 = ls_bsywttm-busywaittime.
      ENDIF.
      CONCATENATE  lc_timest lc_sep lc_tmuser lc_sep lv_size
      lc_lbr lc_msec lc_rbr INTO ls_prefinal.
      CONDENSE ls_prefinal.
      ls_output = ls_prefinal.
      APPEND ls_output TO lt_preoutput.
      CLEAR: ls_prefinal, ls_output.
      CONCATENATE  lc_timest lc_sep lc_bsywttm lc_sep lv_size1
      lc_lbr lc_sec lc_rbr INTO ls_prefinal."Busy wait time
      CONDENSE ls_prefinal.
      ls_output = ls_prefinal.
      APPEND ls_output TO lt_preoutput.
      CLEAR: lv_size, lv_tbhead, ls_prefinal, ls_output, lv_size1.

      lv_tbhead = gc_ttlwttm.
      CALL METHOD lo_sql_export->read_sql
        EXPORTING
          iv_tbhead = lv_tbhead
        IMPORTING
          et_result = lt_ntotalwtm.

      READ TABLE lt_ntotalwtm INTO ls_ntotalwtm INDEX 1.
      IF sy-subrc EQ 0.
        IF ( ls_ntotalwtm-ntotalwaittime > 0 ).
          lv_ntm_sessbsy = 100 *
          ( 100 * ls_bsywttm-busywaittime + ls_timses-cpusession ) /
          ls_ntotalwtm-ntotalwaittime.
        ELSE.
          lv_ntm_sessbsy = -1.
        ENDIF.
        lv_size = lv_ntm_sessbsy.
      ENDIF.
      CONCATENATE  lc_timest lc_sep lc_sessbsy lc_sep lv_size
      lc_lbr lc_per lc_rbr INTO ls_prefinal."Sessions busy
      CONDENSE ls_prefinal.
      ls_output = ls_prefinal.
      APPEND ls_output TO lt_preoutput.
      CLEAR: ls_prefinal, lv_size, ls_output.

      IF ( ( ls_elapsetm-elaptime > 0 ) OR
      ( ls_tst04-cpu_count > 0 ) ).
        lv_ntmcpuusg = ls_timses-cpusession  /
        ls_elapsetm-elaptime / ls_tst04-cpu_count.
      ELSE.
        lv_ntmcpuusg = -1.
      ENDIF.
      lv_size = lv_ntmcpuusg.
      CONCATENATE  lc_timest lc_sep lc_cpusage lc_sep lv_size
      lc_lbr lc_per lc_rbr INTO ls_prefinal."CPU usage
      CONDENSE ls_prefinal.
      ls_output = ls_prefinal.
      APPEND ls_output TO lt_preoutput.
      CLEAR: ls_prefinal, lv_size, ls_output.


      CONCATENATE lc_timest lc_sep lc_nocpu lc_sep ls_tst04-cpu_count
      INTO ls_prefinal. "Number of CPUs
      CONDENSE ls_prefinal.
      ls_output = ls_prefinal.
      APPEND ls_output TO lt_preoutput.
      CLEAR: ls_prefinal, ls_output, lv_size.
*//-------------Time Statistics---------------------------//*

*//-------------General information DBtime----------------//*
      lv_dbtime = ls_bsywttm-busywaittime + lv_cputime. "DBtime
      lv_size = lv_dbtime.
      CONCATENATE lc_general lc_sep lc_dbtime lc_sep lv_size lc_lbr
      lc_sec lc_rbr INTO ls_output. "Dbtime
      APPEND ls_output TO lt_preoutput.
      CLEAR: ls_output, ls_prefinal, lv_dbtime.
*//-------------General information DBtime----------------//*

      CLEAR: ls_output, ls_prefinal, lv_date, lv_time, lv_lconfig,
      lv_lincomp, lv_query,lv_size, lv_size1, lv_size2, lv_parameter,
      ls_orarelse, lv_langu, lv_last_char, lv_ntimsp_ucll, ls_dbsys,
      lv_ntm_sessbsy, lv_ntmcpuusg, lv_tbhead, ls_elapsetm, ls_poolvl,
      ls_memory, ls_shpool, ls_othsess, ls_tst04, ls_wastat, ls_timses,
      lv_cputime, ls_ntotalwtm, ls_redologrp, lv_tbhead,
      ls_bsywttm, lv_action, ls_input, lv_dbuser.

      FREE: lt_dbsys, lt_tst04, lt_elapsetm, lt_poolvl,
      lt_memory, lt_shpool, lt_lpread,lt_othsess, lt_wastat,
      lt_timsess, lt_idle_events, lt_bsywttm, lt_ntotalwtm,
      lt_redologrp, lt_lpread, lt_poolvl.

    WHEN OTHERS.
      ls_output = lc_naction."Incorrect input command
      APPEND ls_output TO lt_preoutput.
  ENDCASE.

  " Null check in middle fields and end fields
  LOOP AT lt_preoutput INTO ls_prefinal.
    lv_length = strlen( ls_prefinal ).
    "To replace blank value in end field with NULL
    IF lv_length > 0.
      lv_last_char = substring( val = ls_prefinal
      off = strlen( ls_prefinal ) - 1
      len = 1 ).
      IF lv_last_char = '|'.
        CONCATENATE ls_prefinal 'NULL'
        INTO ls_prefinal.
      ENDIF.
      "To replace blank value in middle fields with NULL
      REPLACE ALL OCCURRENCES OF SUBSTRING '||'
      IN ls_prefinal WITH '|NULL|'.
      ls_output = ls_prefinal.
      APPEND ls_output TO lt_output.
      CLEAR: ls_prefinal, ls_output.
    ELSE.
      CLEAR ls_output.
      APPEND ls_output TO lt_output.
    ENDIF.
    CLEAR: ls_output, ls_prefinal, lv_last_char, lv_length.
  ENDLOOP.

ENDFORM.
*&--------------------------------------------------------------------*
*& Class (Implementation)  lcl_sql_export
*&--------------------------------------------------------------------*
*  Text
*---------------------------------------------------------------------*
CLASS lcl_sql_export IMPLEMENTATION.
  " Method to choose SQL query based on the conditon passed and
  " get the field details present in the SQL
  METHOD read_sql.

    DATA: lv_ret   TYPE abap_bool,
          lv_query TYPE string.

    CLEAR: ev_query.

    CASE iv_tbhead.
      WHEN gc_elapsetm. "To get elapse time in seconds

        CONCATENATE 'select inst_id, (sysdate - startup_time)*86400'
        ' elapsedtimeinsec from gv$instance'
        INTO lv_query RESPECTING BLANKS.

      WHEN gc_poolsize. "To get the pool size details

        CONCATENATE
        'select defbuf.inst_id, defbuf.defbufsize, keep.keepsize, '
        'others.othersize from '
        '( '
        '   select inst_id, round(CURRENT_SIZE/1024,0) defbufsize '
        'from gv$sga_dynamic_components '
        '          where component = ''DEFAULT buffer cache'''
        ') defbuf, '
        '( '
        'select inst_id, round(CURRENT_SIZE/1024,0) keepsize '
        'from gv$sga_dynamic_components '
        '       where component = ''KEEP buffer cache'''
        ') keep, '
        '( '
        'select inst_id, round(sum(CURRENT_SIZE)/1024,0) '
        'othersize from gv$sga_dynamic_components '
        '       where component not in (''DEFAULT buffer cache'','
        '''KEEP buffer cache'',''shared pool'',''In-Memory Area'') '
        '       group by inst_id'
        ') others  '
        'where defbuf.inst_id = keep.inst_id '
        'and   keep.inst_id   = others.inst_id '
        INTO lv_query RESPECTING BLANKS.

      WHEN gc_inmemsize. "To get in memory size in KB

        CONCATENATE
        'select inst_id, sum(decode(name,''memory_target'',value,0)) '
        'memory_target, '
        '                sum(decode(name,''inmemory_size'','
        'round(value/1024,3))) inmemory_size '
        'from gv$parameter group by inst_id'
        INTO lv_query RESPECTING BLANKS.

      WHEN gc_shplsize. "To get Shared pool size in kB

        CONCATENATE
        'select inst_id, round((current_size / 1024), 0) shplsize '
        'from gv$sga_dynamic_components '
        'where component = ''shared pool'' '
        INTO lv_query RESPECTING BLANKS.

      WHEN gc_lprw.
        "To get session logical reads, physical reads, physical writes
        "physical reads direct, physical reads direct (lob)

        CONCATENATE
        'select inst_id, '
        'sum(decode(name, ''session logical reads'',value, 0)) '
        'logicalreads, '
        'sum(decode(name, ''physical reads'', value, 0)) physicalreads, '
        'sum(decode(name, ''physical writes'', value, 0)) '
        'physicalwrites, '
        'sum(decode(name, ''physical reads direct'',value, 0)) '
        'physicalreadsdirect, '
        'sum(decode(name, ''physical reads direct (lob)'',value, 0)) '
        'physicalreadsdirectlob '
        'from gv$sysstat '
        'where name in (''session logical reads'', '
        '''physical reads'','
        '''physical writes'','
        '''physical reads direct'','
        '''physical reads direct (lob)'') '
        'group by inst_id'
        INTO lv_query RESPECTING BLANKS.

      WHEN gc_rdbyothses.
        "To get number read by other session(number of events),
        "Read by other session (wait time in [s])

        CONCATENATE
        'select inst_id, total_waits, time_waited/100 from '
        'gv$system_event where event = ''read by other session'''
        INTO lv_query RESPECTING BLANKS.

      WHEN gc_redolgrp. "To get number of redo log groups

        CONCATENATE 'select inst_id, count(*) from gv$log '
        'group by inst_id' INTO lv_query RESPECTING BLANKS.

      WHEN gc_wrkarexec.
        "To get User calls, Latching time in sec, Megabytes written,
        "Workarea execution in optimal mode, Workarea execution in one
        "pass mode, Workarea execution in multipass mode

        CONCATENATE
        'select inst_id, '
        'sum(decode(name,''user calls'',value,0)) usercalls, '
        'sum(decode(name,''redo writer latching time'', value/100, 0)) '
        'redowrtltchtime, '
        'sum(decode(name,''redo size'',value/1024/1024,0)) redosize, '
        'sum(decode(name,''workarea executions - optimal'',value,0)) '
        'waexopt, '
        'sum(decode(name,''workarea executions - onepass'',value,0)) '
        'waexone, '
        'sum(decode(name,''workarea executions - multipass'',value,0)) '
        'waexmult '
        'from gv$sysstat '
        'where name in (''user calls'', '
        '''redo writer latching time'',  '
        '''redo size'', '
        '''workarea executions - optimal'', '
        '''workarea executions - onepass'', '
        '''workarea executions - multipass'') '
        'group by inst_id '
        INTO lv_query RESPECTING BLANKS.

      WHEN gc_timestat.
        "To get total CPU session

        CONCATENATE 'select inst_id, sum( value ) as x from '
        'gv$sys_time_model where stat_name =''DB CPU'' group by inst_id'
        INTO lv_query RESPECTING BLANKS.

      WHEN gc_event.
        " To get the events present in system

        CONCATENATE 'select name from v$event_name where wait_class in'
        ' (''Administrative'',''System I/O'',''Idle'')'
        INTO lv_query RESPECTING BLANKS.

      WHEN gc_timepara.
        "To get busy wait time details

        CONCATENATE
        'select ii, sum(timewaited)/100 busywaittime '
        '     from (select sys.inst_id ii, sys.event, '
        'sys.time_waited-nvl(ses.time_waited, 0) timewaited '
        '   from (select inst_id, event, '
        'time_waited from gv$system_event ) sys, '
        '             (select e.inst_id, e.event, '
        'sum(e.time_waited) time_waited from '
        '             (select inst_id, sid, event, '
        'time_waited from gv$session_event) e, '
        '                     (select inst_id, '
        'sid from gv$session where type = ''BACKGROUND'') s '
        '                      where e.sid = s.sid '
        '        and   e.inst_id = s.inst_id '
        '                      group by e.inst_id, e.event) ses '
        '               where sys.event = ses.event(+) '
        '     and sys.inst_id = ses.inst_id(+) '
        '               and sys.event not in '
        '                (' iv_parameter ' ) )'
        '       group by ii '
        INTO lv_query RESPECTING BLANKS.
        ev_query = lv_query.
        RETURN.
      WHEN gc_ttlwttm.
        "To get total wait time

        CONCATENATE 'select inst_id, sum(time_waited) totalwaittime'
        ' from gv$system_event group by inst_id'
        INTO lv_query RESPECTING BLANKS.
      WHEN OTHERS.
        RETURN.

    ENDCASE.
    " To execute the SQL query and get field details
    lv_ret = cl_ora_adbc_cmd=>execute_query(
    i_con_name   = gc_remsys
    i_query      = lv_query
    i_result_ref = REF #( et_result ) ).

  ENDMETHOD.

  " Method to convert seconds to minute hours and days based on number
  " of seconds
  " The code is taken from Method 'convert_seconds' from class
  "'CL_ORA_ACTION_MM2'

  METHOD convert_seconds.
    CONSTANTS: lc_d     TYPE c VALUE 'd '    LENGTH 2,
               lc_h     TYPE c VALUE 'h '    LENGTH 2,
               lc_m     TYPE c VALUE 'm '    LENGTH 2,
               lc_s     TYPE c VALUE 's'     LENGTH 1,
               lc_86400 TYPE c VALUE '86400' LENGTH 5.

    DATA: lv_days    TYPE i,
          lv_seconds TYPE i,
          lv_dcal    TYPE i,
          lv_time    TYPE sy-uzeit,
          lv_day     TYPE string,
          lv_hours   TYPE string,
          lv_minutes TYPE string,
          lv_second  TYPE string.
*
*...
*
    lv_dcal     = lc_86400.
    lv_days     = iv_second DIV lv_dcal.
    lv_seconds  = iv_second MOD lv_dcal.
    lv_time     = lv_seconds.

*...convert to string
    lv_day     = lv_days.
    lv_hours   = lv_time(2).
    lv_minutes = lv_time+2(2).
    lv_second  = lv_time+4(2).

    CONDENSE lv_day  NO-GAPS.
    CONDENSE lv_hours NO-GAPS.
    CONDENSE lv_minutes NO-GAPS.
    CONDENSE lv_second NO-GAPS.

    CONCATENATE lv_day lc_d lv_hours lc_h lv_minutes lc_m lv_second
    lc_s INTO ev_time RESPECTING BLANKS.
  ENDMETHOD.

  "Method is used to change the unit from KB to GB or MB based
  "on the size
  " The code is taken from Method 'chg_unit' from class
  "'CL_ORA_ACTION_MM2'

  METHOD chg_unit.

    CONSTANTS: lc_null TYPE c VALUE 'NULL'   LENGTH 4,
               lc_okb  TYPE c VALUE '0'      LENGTH 1,
               lc_kb   TYPE c VALUE '[kB]'   LENGTH 4,
               lc_mb   TYPE c VALUE '[MB]'   LENGTH 4,
               lc_gb   TYPE c VALUE '[GB]'   LENGTH 4,
               lc_tb   TYPE c VALUE '[TB]'   LENGTH 4,
               lc_pb   TYPE c VALUE '[PB]'   LENGTH 4,
               lc_eb   TYPE c VALUE '[EB]'   LENGTH 4.
*adapt the unit of measure for size-related values and adapt the sizes.
    DATA: lv_scale   TYPE f,
          lv_unit    TYPE string,
          lv_string  TYPE string,
          lv_tempnum TYPE ora_s_st04_main_data-ninmemory_size.
*
*...
*
    lv_string = iv_fieldsymbol_num.
    REPLACE ALL OCCURRENCES OF ',' IN lv_string WITH ''.
    REPLACE ALL OCCURRENCES OF '.' IN lv_string WITH ''.
    CONDENSE lv_string.
    lv_tempnum = lv_string.

    CLEAR lv_string.
    IF ( lv_tempnum = -1 ).
      ev_fieldsymbol_char = lc_null.
      CONDENSE ev_fieldsymbol_char.
      RETURN.
    ENDIF.

    IF ( lv_tempnum = 0 ).
      CONCATENATE lc_okb lc_kb INTO ev_fieldsymbol_char
      SEPARATED BY space.
      CONDENSE ev_fieldsymbol_char.
      RETURN.
    ENDIF.

*...the values for sizes are given in unit [kB]
    lv_scale = log10( lv_tempnum ) / log10( 2 ) / 10.

    IF ( lv_scale < 1 ).
      lv_unit = lc_kb.
*     l_tempnum remains unchanged because unit will not be changed

    ELSEIF ( ( lv_scale >= 1 ) AND ( lv_scale < 2 ) ).
      lv_unit = lc_mb.
      lv_tempnum = lv_tempnum / 1024.
    ELSEIF ( ( lv_scale >= 2 ) AND ( lv_scale < 3 ) ).
      lv_unit = lc_gb.
      lv_tempnum = lv_tempnum / 1024 / 1024.
    ELSEIF ( ( lv_scale >= 3 ) AND ( lv_scale < 4 ) ).
      lv_unit = lc_tb.
      lv_tempnum = lv_tempnum / 1024 / 1024 / 1024.
    ELSEIF ( ( lv_scale >= 4 ) AND ( lv_scale < 5 ) ).
      lv_unit = lc_pb.
      lv_tempnum = lv_tempnum / 1024 / 1024 / 1024 / 1024.
    ELSEIF ( lv_scale >= 5 ).
      lv_unit = lc_eb.
      lv_tempnum = lv_tempnum / 1024 / 1024 / 1024 / 1024 / 1024.
    ENDIF.

*...Keep commas and decimalpoints according to the language settings.
*   Therefore write temporarily to p_fieldsymbol_char
    ev_fieldsymbol_char = lv_tempnum.

*...copy to l_string to allow for concatenation.
    lv_string = ev_fieldsymbol_char.
    CONDENSE lv_string NO-GAPS.
    CONCATENATE lv_string ' ' lv_unit INTO lv_string RESPECTING BLANKS.
    ev_fieldsymbol_char = lv_string.
    CONDENSE ev_fieldsymbol_char.
  ENDMETHOD.
ENDCLASS.