*---------------------------------------------------------------------*
* Program Name        :   ZCM_RZ03_EXP_SERVER_STAT_ALRTS              *
* Title               :   Display server states and alerts for each   *
*                         operation mode                              *
* Purpose             :   This report is used to export server states *
*                     :   and alerts for each operation mode from     *
*                     :   tcode RZ03                                  *
*---------------------------------------------------------------------*
* Related Transaction OR Standard Program References                  *
* RZ03                                                                *
*---------------------------------------------------------------------*
* Tables              :   SELECT    UPDATE      INSERT      DELETE    *
* XXXXX                     X                                         *
*---------------------------------------------------------------------*
* Program Change History                                              *
*---------------------------------------------------------------------*
*Date        Version   Author       TR#/Local     Description         *
*---------------------------------------------------------------------*
*09-03-2021  Initial   ASHWINI B    Local      To export server states*
*                                              and alerts for each ope*
*                                              ration modes           *
*10-03-2022  V001      Soumya Ray   Local      To remove inline decla *
*                                              rations                *
*---------------------------------------------------------------------*

REPORT zcm_rz03_exp_server_stat_alrts.

FORM get_config
              TABLES ft_input  STRUCTURE tab512
                     ft_output STRUCTURE tab512.

  CONSTANTS: lc_sep       TYPE c VALUE '|'                    LENGTH 1,
             lc_act_exp   TYPE c VALUE 'EXPORT'               LENGTH 6,
             lc_title     TYPE c VALUE
             'Server state and alerts for operation modes'    LENGTH 80,
             lc_no_input  TYPE c VALUE 'No input given'       LENGTH 20,
             lc_inc_input TYPE c VALUE 'Incorrect input'      LENGTH 20,
             lc_ope_mode  TYPE c VALUE 'Operation mode'       LENGTH 14,
             lc_serv_name TYPE c VALUE 'Server name'          LENGTH 11,
             lc_services  TYPE c VALUE 'Services'             LENGTH 8,
             lc_status    TYPE c VALUE 'Status'               LENGTH 6,
             lc_config    TYPE c VALUE 'Configuration alerts' LENGTH 20,
             lc_state_r   TYPE c VALUE 'R'                    LENGTH 1,
             lc_state_p   TYPE c VALUE 'P'                    LENGTH 1,
             lc_active    TYPE c VALUE 'Active'               LENGTH 6,
             lc_passive   TYPE c VALUE 'Passive'              LENGTH 7,
             lc_not_act   TYPE c VALUE 'Not active'           LENGTH 10,
             lc_msg       TYPE c VALUE 'No data found'        LENGTH 15.

  DATA: ls_input      TYPE tab512,
        ls_output     TYPE tab512,
        lv_action     TYPE char8,
        lt_spfba      TYPE STANDARD TABLE OF spfba,
        ls_spfba      TYPE spfba,
        lt_spfid      TYPE STANDARD TABLE OF spfid,
        lt_spfis      TYPE STANDARD TABLE OF spfis,
        ls_spfis      TYPE spfis,
        lv_subrc      TYPE sy-subrc,
        lv_status     TYPE char10,
        lv_srv_name   TYPE spfis-apserver,
        lv_state_text TYPE c LENGTH 50,
        ls_out_final  TYPE string,
        ls_spfid      TYPE spfid. "+V001

  FIELD-SYMBOLS: <fs_spfba> TYPE spfba. "+V001
  CLEAR: ls_input,
         lv_action,
         ls_spfid. "+V001

  " Read input values from Python/Ansibel
  READ TABLE ft_input INTO ls_input INDEX 1.
  IF sy-subrc EQ 0.
    lv_action = ls_input.
  ELSE.
    " No input given
    ls_output = lc_no_input.
    APPEND ls_output TO ft_output.
    CLEAR ls_output.
    RETURN.
  ENDIF.

  CASE lv_action.

    WHEN lc_act_exp. "EXPORT

* Under the pre-migration activities, server states and alerts
* for each of the CCMS operation modes are fetched and exported
* to Python.

      " Fetch CCMS: Operation modes and instances
      FREE: lt_spfba[], lt_spfid[].

      CALL FUNCTION 'RZL_GET_BA_LIST'
        EXPORTING
          with_inactive_instances = 'X'
        TABLES
          ba_tbl                  = lt_spfba
          id_tbl                  = lt_spfid.

      IF  lt_spfba IS INITIAL.
        " Title
        CLEAR: ls_output.
        ls_output = lc_title.
        APPEND ls_output TO ft_output.
        " Error message
        CLEAR: ls_output.
        ls_output = lc_msg.
        APPEND ls_output TO ft_output.
        RETURN.
      ENDIF.

      " Title
      CLEAR: ls_output.
      ls_output = lc_title.
      APPEND ls_output TO ft_output.

      " Heading Columns
      CLEAR: ls_output.
      CONCATENATE lc_ope_mode  lc_sep       " Operation mode
                  lc_serv_name lc_sep       " Server name
                  lc_services  lc_sep       " Services
                  lc_status    lc_sep       " Status
                  lc_config INTO ls_output. " Configuration alerts
      APPEND ls_output TO ft_output.

      " Read SAP instances associated with each operation mode
      FREE: lt_spfid[], lt_spfis[].
      CLEAR: ls_spfba,ls_spfis.
      LOOP AT lt_spfba ASSIGNING <fs_spfba>.
        CALL FUNCTION 'RZL_GET_BA_DESCR'
          EXPORTING
            betriebsart_name           = <fs_spfba>-baname
          IMPORTING
            betriebsart_description    = ls_spfba
            subrc                      = lv_subrc
          TABLES
            instance_description_table = lt_spfid.

        LOOP AT lt_spfid INTO ls_spfid.
          MOVE-CORRESPONDING ls_spfid TO ls_spfis.
          APPEND ls_spfis TO lt_spfis.
          CLEAR: ls_spfid,ls_spfis.
        ENDLOOP.

        " Read the run-time status of SAP instances
        CLEAR: lv_subrc.
        CALL FUNCTION 'RZL_GET_INST_STATE'
          IMPORTING
            subrc            = lv_subrc
          TABLES
            inst_descr_table = lt_spfid
            inst_state_table = lt_spfis.

        " Data
        CLEAR: ls_spfis,ls_output,ls_out_final.
        LOOP AT lt_spfis INTO ls_spfis.

          " Read the instance status
          CLEAR: lv_status.
          IF ls_spfis-state(1) = lc_state_r.
            lv_status = lc_active.  " Active
          ELSEIF ls_spfis-state(1) = lc_state_p.
            lv_status = lc_passive. " Passive
          ELSE.
            lv_status = lc_not_act. " Not active
          ENDIF.

* Below subroutine is called from standard program RSRZLST1
* to read configuration alert texts
          CLEAR: lv_state_text.
          IF ls_spfis-state+2(1) <> 0.
            " Read the configuration alert texts
            PERFORM get_state_text IN PROGRAM rsrzlst1
                                   USING ls_spfis lv_state_text.
          ENDIF.

          " Server name
          CLEAR: lv_srv_name.
          lv_srv_name = ls_spfis-apserver.

          CONCATENATE <fs_spfba>-baname lc_sep " Operation mode
                      lv_srv_name       lc_sep " Server name
                      ls_spfis-cmponaps lc_sep " Services
                      lv_status         lc_sep " Status
                      lv_state_text INTO ls_output."Configuration alerts

          ls_out_final = ls_output.

          " Add NULL if last field is blank in the output
          PERFORM end_null_check CHANGING ls_out_final.

          ls_output = ls_out_final.
          APPEND ls_output TO ft_output.
          CLEAR: ls_spfis,ls_output,ls_out_final.
        ENDLOOP.
        CLEAR: ls_spfba.
        FREE: lt_spfid, lt_spfis.
      ENDLOOP.

      " Add NULL if any field is blank in the output
      PERFORM null_check TABLES ft_output.

    WHEN OTHERS.
      " Incorrect input
      ls_output = lc_inc_input.
      APPEND ls_output TO ft_output.
      CLEAR ls_output.

  ENDCASE.

ENDFORM.
FORM end_null_check CHANGING ls_string TYPE string.

  DATA lv_last_char TYPE char1.

  lv_last_char = substring( val = ls_string
                   off = strlen( ls_string ) - 1
                   len = 1 ).
  IF lv_last_char = '|'.
    CONCATENATE ls_string 'NULL'
      INTO ls_string.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form NULL_CHECK
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
FORM null_check TABLES lt_table TYPE table.

  DO .
    REPLACE ALL OCCURRENCES OF SUBSTRING '||'
    IN TABLE lt_table WITH '|NULL|'.
    FIND '||' IN TABLE lt_table.
    IF sy-subrc <> 0.
      EXIT .
    ENDIF.
  ENDDO.

ENDFORM.