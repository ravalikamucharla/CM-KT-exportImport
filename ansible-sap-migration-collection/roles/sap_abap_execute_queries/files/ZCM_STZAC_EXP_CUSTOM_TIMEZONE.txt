*---------------------------------------------------------------------*
* Program Name        :   ZCM_STZAC_EXP_CUSTOM_TIMEZONE               *
* Title               :   To fetch customizing timezones across client*
* Purpose             :   This report is used extract Customizing time*
*                         zones across clients                        *
*---------------------------------------------------------------------*
* Related Transaction OR Standard Program References                  *
* STZAC                                                               *
*---------------------------------------------------------------------*
* Tables              :   SELECT    UPDATE      INSERT      DELETE    *
* TTZCU                     X                                         *
*---------------------------------------------------------------------*
* Program Change History                                              *
*---------------------------------------------------------------------*
*Date        Version   Author       TR#/Local     Description         *
*---------------------------------------------------------------------*
*09-09-2020  Initial   Soumya Ray   Local        To fetch customizing *
*                                             timezones across clients*
*04-05-2022  V001      Soumya Ray   Local      To correct the message *
*                                            in case of no data, wrong*
*                                              input and remove inline*
*                                              declarations           *
*---------------------------------------------------------------------*


REPORT zcm_stzac_exp_custom_timezone.

FORM get_config
TABLES lt_input  STRUCTURE tab512
  lt_output STRUCTURE tab512.
  CONSTANTS: lc_sep        TYPE C VALUE '|'                LENGTH 1,
  lc_export     TYPE C VALUE 'EXPORT'           LENGTH 6,
  lc_msg_head   TYPE C VALUE 'Timezone'         LENGTH 8,
*  Begin of changes in V001
  lc_noinput    TYPE C VALUE 'No input passed'  LENGTH 15,
  lc_inc_input  TYPE C VALUE 'Incorrect input'  LENGTH 20.
*  End of cahnges in V001

  DATA: ls_output   TYPE tab512,
        ls_prefinal TYPE string,
*  Begin of changes in V001
        ls_input    TYPE tab512,
        lv_action   TYPE string.

  CLEAR: ls_output, ls_prefinal, ls_input, lv_action.

  ls_output = lc_msg_head.
  APPEND ls_output TO lt_output.
  CLEAR ls_output.
*  End of changes in V001

  " Read action required from Python interface
  READ TABLE lt_input INTO ls_input INDEX 1.
* BEgin of changes in V001
  IF sy-subrc NE 0.
    ls_output = lc_noinput.
    APPEND ls_output TO lt_output.
    CLEAR ls_output.
    RETURN.
  ENDIF.
* End of changes in V001

  lv_action = ls_input.

  CASE lv_action.

  WHEN lc_export.

    PERFORM read_data TABLES lt_output
    USING 'TTZCU'
    CHANGING ls_output .

    PERFORM null_check TABLES  lt_output.

*  Begin of changes in V001
  WHEN OTHERS.
    ls_output = lc_inc_input. "Incorrect input
    APPEND ls_output TO lt_output.
    CLEAR ls_output.
*  End of changes in V001
  ENDCASE.

ENDFORM.

FORM read_data  TABLES   lt_output TYPE TABLE
USING iv_tablename TYPE tabname
CHANGING ls_output TYPE tab512.

  CONSTANTS: lc_msg_nodata TYPE string VALUE
  'No data found'. "+V001


  DATA : idetails      TYPE abap_compdescr_tab,
        xdetails      TYPE abap_compdescr,
        lv_fieldname  TYPE string,
        ref_table_des TYPE REF TO cl_abap_structdescr,
  lt_table      TYPE REF TO DATA,
        ls_prefinal TYPE string.
  FIELD-SYMBOLS : <ft_table>     TYPE ANY TABLE,
* Begin of changes in V001
  <fs_structure> TYPE ANY,
  <comp>         TYPE ANY.
* End of changes in V001

  CLEAR: ls_output.

  CREATE DATA lt_table TYPE TABLE OF (iv_tablename).


  ASSIGN lt_table->* TO <ft_table>.

  SELECT * FROM (iv_tablename) CLIENT SPECIFIED INTO TABLE <ft_table>.
  IF sy-subrc <> 0.
    ls_output = lc_msg_nodata.
    APPEND ls_output TO lt_output.
    RETURN.
  ENDIF.

  "Column headings
  ref_table_des ?= cl_abap_typedescr=>describe_by_name( iv_tablename ).
  idetails[] = ref_table_des->components[].
  LOOP AT idetails INTO xdetails.
    CONCATENATE ls_prefinal xdetails-name '|' INTO ls_prefinal.
  ENDLOOP.
  ls_prefinal = shift_right( val = ls_prefinal  PLACES = 1 ).
  ls_output = ls_prefinal.
  APPEND ls_output TO lt_output.

  "Table data
  LOOP AT <ft_table> ASSIGNING <fs_structure>.
    CLEAR: ls_prefinal, ls_output.
    DO .
      ASSIGN COMPONENT sy-INDEX OF STRUCTURE <fs_structure>
      TO <comp>.
      IF sy-subrc <> 0.
        EXIT .
      ENDIF.
      CONCATENATE ls_prefinal <comp> '|' INTO ls_prefinal.
    ENDDO.
    ls_prefinal = shift_right( val = ls_prefinal  PLACES = 1 ).

    PERFORM end_null_check CHANGING ls_prefinal.
    ls_output = ls_prefinal.
    APPEND ls_output TO lt_output.

  ENDLOOP.

ENDFORM.

FORM end_null_check  CHANGING ls_string TYPE string.

  DATA lv_last_char TYPE char1.

  lv_last_char = substring( val = ls_string
  off = STRLEN( ls_string ) - 1
  len = 1 ).
  IF lv_last_char = '|'.
    CONCATENATE ls_string 'NULL'
    INTO ls_string.
  ENDIF.

ENDFORM.

FORM null_check  TABLES   lt_table TYPE TABLE.

  DO .
    REPLACE ALL OCCURRENCES OF SUBSTRING '||'
    IN TABLE lt_table WITH '|NULL|'.
    FIND '||' IN TABLE lt_table.
    IF sy-subrc <> 0.
      EXIT .
    ENDIF.
  ENDDO.

ENDFORM.