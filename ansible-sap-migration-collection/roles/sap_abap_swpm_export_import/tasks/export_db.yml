---
- name: Export db | Checking for installationSuccesfullyFinished.dat file
  stat:
    path: /tmp/sapinst_instdir/NW750/ORA/COPY/EXP/AS-ABAP/PRETABSPLIT/installationSuccesfullyFinished.dat
  register: installation_file_tabsp
  tags: db_exp

- name: folder and file creation
  file:
    path: "{{ item.path }}"
    state: "{{ item.state }}"
    owner: "{{ item.owner | default(ftp.ftp_usr_name) }}"
    group: "{{ item.group }}"
    recurse: "{{ item.recurse }}"
    mode: "{{ item.mode | default ('755') }}"
  loop: "{{ folders_target }}"
  when: params.export.data_transfer_type == 'FTP'
  delegate_to: "{{ groups['target_db'][0] }}"
  tags: db_exp

- name: Recursively adding a file to sub directories 
  shell: 
    find export -type d -exec touch {}/empty_file.txt \;
  args:
    chdir: /Data/
  when: params.export.data_transfer_type == 'FTP'
  delegate_to: "{{ groups['target_db'][0] }}"
  tags: db_exp

- name: folder and file creation
  file:
    path: "{{ item.path }}"
    state: "{{ item.state }}"
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
    recurse: "{{ item.recurse }}"
    mode: "{{ item.mode | default ('755') }}"
  loop: "{{ folders_ownership }}"
  when: params.export.data_transfer_type == 'FTP'
  delegate_to: "{{ groups['target_db'][0] }}"
  tags: 
    - db_exp

- name: Export db | Set installation directory facts
  set_fact:
    install_dir_dbinst: "{{ params.export.sapinst_path }}"
  when: installation_file_tabsp.stat.exists
  tags: db_exp

- name: Export db | Backing up sapinst_instdir
  command: cp -r /tmp/sapinst_instdir "{{install_dir_dbinst}}/backup/sapinst_instdir_dbinst_{{ lookup('pipe', 'date +%Y%m%d%H%M%S') }}"
  tags: db_exp

- name: Export db | Deleting old log files
  file:
    path: "{{ item }}"
    state: absent
  loop:
   - /tmp/sapinst_instdir
   - /root/.sapinst
  tags: db_exp

- name: Export db | Get running processes
  shell: ps -ef | grep -v grep | grep -w 'sapinst\|sapinst_exe' | awk '{print $2}'
  register: running_processes_dbinst
  tags: db_exp

- name: Export db | Kill running processes
  shell: "kill {{ item }}"
  with_items: "{{ running_processes_dbinst.stdout_lines }}"
  tags: db_exp

- wait_for:
    path: "/proc/{{ item }}/status"
    state: absent
  with_items: "{{ running_processes_dbinst.stdout_lines }}"
  register: killed_processes_dbinst
  tags: db_exp

- name: Export db | Force kill stuck processes
  shell: "kill -9 {{ item }}"
  with_items: "{{ killed_processes_dbinst.results | select('failed') | map(attribute='item') | list }}"
  tags: db_exp

- name: Export db | target hardware platform
  shell: "lscpu | grep Endian"
  register: Endian
  tags: db_exp

- set_fact:
    target_hardware_platform: "{{ Endian.stdout_lines[0].split(':          ')[-1].split()| join('_') }}"
  tags: db_exp

- debug:
    msg: "{{ target_hardware_platform|upper }}"
  tags: db_exp

- name: Export db | Migration Monitor jobs
  shell: "lscpu | grep 'CPU(s):'"
  register: monitor_jobs
  tags: db_exp

- set_fact:
    monitor_cpu_job: "{{ ((monitor_jobs.stdout_lines[0].split(':              ')[-1])|int * 2.5)|int }}"
  tags: db_exp

- debug:
    msg: "{{ monitor_cpu_job }}"
  tags: db_exp

- name: Export db | Creating params file
  template:
    src: "exp_dbinst.j2"
    dest: "{{ install_dir_dbinst }}/{{ ansible_hostname }}_expdb.params"
    mode: '0755'
  tags: db_exp

- name: Export db | Make sure sapinst is executable
  file:
   path: "{{install_dir_dbinst}}/sapinst"
   mode: '0755'
  tags: db_exp

- name: Export db | Database Instance Export
  command:
    cmd: "./sapinst SAPINST_INPUT_PARAMETERS_URL=/{{install_dir_dbinst}}/{{ansible_hostname}}_expdb.params SAPINST_EXECUTE_PRODUCT_ID={{ params.product_ids.export_db}} SAPINST_SKIP_DIALOGS=true SAPINST_START_GUI=true SAPINST_START_GUISERVER=true SAPINST_GUI_HOSTNAME={{ansible_hostname}}"
    creates: "{{install_dir_dbinst}}/LOGS/export_database_instance_{{ansible_hostname}}_{{ansible_date_time}}.log"
  args:
    chdir: "{{install_dir_dbinst}}"
  register: export_dbinst
  async: 3600
  poll: 0
  tags: db_exp

- name: Export db | wait for 5 minutes
  wait_for:
    timeout: 800
  tags: db_exp


