*---------------------------------------------------------------------*
* Program Name        :  ZCM_HDB_SQL_QUERIES_EXECUTE                  *
* Title               :  To execute sql queries                       *
* Purpose             :  This report is to capture sql queries o/p    *
*---------------------------------------------------------------------*
* Related Transaction OR Standard Program References                  *
* X                                                                   *
*---------------------------------------------------------------------*
* Tables              :   SELECT    UPDATE      INSERT      DELETE    *
* XXXX                      X                                         *
*---------------------------------------------------------------------*
* Program Change History                                              *
*---------------------------------------------------------------------*
*Date        Version   Author       TR#/Local     Description         *
*---------------------------------------------------------------------*
*08-03-2023  Initial  Yasaswini K   Local      To Capture sql queries *
*                                              output                 *
*---------------------------------------------------------------------*
REPORT zcm_hdb_sql_queries_execute.

FORM get_config
               TABLES lt_input  STRUCTURE tab512
                      lt_output STRUCTURE tab512.

  TYPES : BEGIN OF lty_sqlquery,
            heading  TYPE string,
            sqlquery TYPE string,
          END OF lty_sqlquery.

  CONSTANTS: lc_no_input     TYPE c VALUE 'No input given'    LENGTH 20,
             lc_export       TYPE c VALUE 'EXPORT'            LENGTH 6,
             lc_usr          TYPE c VALUE '.USR02'            LENGTH 6,
             lc_table        TYPE c VALUE 'Table output'      LENGTH 20,
             lc_null         TYPE c VALUE 'NULL'              LENGTH 4,
             lc_license      TYPE c VALUE
             'HANA License Output'                            LENGTH 20,
             lc_lastlog      TYPE c VALUE
             'HANA Last Log Backup Output'                    LENGTH 30,
             lc_logmode      TYPE c VALUE
             'HANA Logmode Check Output'                      LENGTH 30,
             lc_landscape    TYPE c VALUE
             'HANA Landscape Details Output'                  LENGTH 30,
             lc_duration     TYPE c VALUE
             'HANA Complete backup Duration Output'           LENGTH 50,
             lc_backup       TYPE c VALUE
             'HANA Complete backup Frequency Output'          LENGTH 50,
             lc_datafile     TYPE c VALUE
             'HANA Datafile Layout Output'                    LENGTH 30,
             lc_lastbackup   TYPE c VALUE
             'HANA Last Backup Output'                        LENGTH 30,
             lc_status       TYPE c VALUE
             'HANA System User Status Output'                 LENGTH 30,
             lc_differential TYPE c VALUE
             'HANA Differential Backup Duration Output'       LENGTH 50,
             lc_logduration  TYPE c VALUE
             'HANA Log Backup Duration Output'                LENGTH 30,
             lc_count        TYPE c VALUE
             'Row Count'                                      LENGTH 10,
             lc_logfreq      TYPE c VALUE
             'Hana Log Backup Frequency Output'               LENGTH 40,
             lc_incbackup    TYPE c VALUE
             'HANA Incremental Backup Duration Output'        LENGTH 50,
             lc_incfreq      TYPE c VALUE
             'HANA Incremental Backup Frequency Output'       LENGTH 50,
             lc_diffbackup   TYPE c VALUE
             'HANA Differential Backup Frequency Output'      LENGTH 50,
             lc_logbackup    TYPE c VALUE
             'HANA Log backup Frequency Output'               LENGTH 40,
             lc_inc_input    TYPE c VALUE 'Incorrect input'   LENGTH 20.


  DATA: ls_input       TYPE tab512,
        ls_output      TYPE tab512,
        lv_action      TYPE char10,
        lv_sql_stmt    TYPE string,
        lv_comp        TYPE char80,
        lv_prefinal    TYPE string,
        lv_prefinal1   TYPE string,
        lv_dbschema    TYPE char16,
        lv_schema      TYPE string,
        lv_msg         TYPE string,
        lt_sqlquery    TYPE STANDARD TABLE OF lty_sqlquery,
        ls_sqlquery    TYPE lty_sqlquery,
        lr_set         TYPE REF TO cl_sql_result_set,
        lr_tabletype   TYPE REF TO cl_abap_tabledescr,
        lr_structure   TYPE REF TO data,
        lr_structdescr TYPE REF TO cl_abap_structdescr,
        ls_struct      LIKE LINE OF lr_structdescr->components,
        lr_structdesc  TYPE REF TO cl_abap_structdescr,
        lr_result_ref  TYPE REF TO data,
        lt_metadata    TYPE adbc_rs_metadata_descr_tab,
        lr_metadata    TYPE REF TO data,
        lo_sql_stmt    TYPE REF TO cl_sql_statement,
        lo_sql_excp    TYPE REF TO cx_sql_exception,
        lo_sql_con     TYPE REF TO cl_sql_connection.

  FIELD-SYMBOLS: <fs_table>     TYPE STANDARD TABLE,
                 <ls_data>      TYPE data,
                 <lfs_comp>     TYPE any,
                 <fs_structure> TYPE any.

  READ TABLE lt_input INTO ls_input INDEX 1.
  IF sy-subrc EQ 0.
    lv_action = ls_input.      " Action
  ELSE.
    "Table heading
    ls_output = lc_table.
    APPEND ls_output TO lt_output.
    CLEAR ls_output.

    " No input given
    ls_output = lc_no_input.
    APPEND ls_output TO lt_output.
    CLEAR ls_output.
    RETURN.
  ENDIF.

  CASE lv_action.

    WHEN lc_export.               " When action is EXPORT

*HANA Complete backup Duration Output

      ls_sqlquery-heading = lc_duration.

      CONCATENATE
      'select TOP 1 ENTRY_TYPE_NAME,SYS_START_TIME,SYS_END_TIME,'
      'SECONDS_BETWEEN(SYS_START_TIME,SYS_END_TIME) as'
      'BACKUP_DURATION_IN_SEC,'
      'SECONDS_BETWEEN(SYS_START_TIME,SYS_END_TIME)/60 as'
      `BACKUP_DURATION_IN_MIN, 'success' as STATUS`
      'FROM M_BACKUP_catalog where ENTRY_TYPE_NAME'
      `in('complete data backup') ORDER BY  sys_start_time desc`
       INTO ls_sqlquery-sqlquery SEPARATED BY space.
      APPEND ls_sqlquery TO lt_sqlquery.
      CLEAR ls_sqlquery.

*HANA Complete backup Frequency Output
      ls_sqlquery-heading = lc_backup.

      CONCATENATE
      'select TOP 1'
      'FREQUENCY_OF_BACKUP_IN_DAYS,count(FREQUENCY_OF_BACKUP_IN_DAYS)'
      `as OCCURENCES,'success' as STATUS from`
      '(select ENTRY_TYPE_NAME,SYS_START_TIME,lag(sys_start_time)'
      'over(order by sys_start_time) as PREVIOUS_START_TIME,'
      'SECONDS_BETWEEN(SYS_START_TIME,SYS_END_TIME) as'
      'BACKUP_DURATION_IN_SEC,'
      'SECONDS_BETWEEN(SYS_START_TIME,SYS_END_TIME)/60'
      'as BACKUP_DURATION_IN_MIN,'
'days_between(lag(sys_start_time)over(order by sys_start_time),'
'sys_start_time) as FREQUENCY_OF_BACKUP_IN_DAYS'
`FROM M_BACKUP_catalog where`
`ENTRY_TYPE_NAME in('complete data backup')`
'ORDER BY  sys_start_time desc) group by frequency_of_backup_in_days'
'order by OCCURENCES desc'
      INTO ls_sqlquery-sqlquery SEPARATED BY space.
      APPEND ls_sqlquery TO lt_sqlquery.
      CLEAR ls_sqlquery.


*HANA Datafile Layout Output

      ls_sqlquery-heading = lc_datafile.

      ls_sqlquery-sqlquery =
      'select HOST, FILE_NAME from M_VOLUME_FILES'.
      APPEND ls_sqlquery TO lt_sqlquery.
      CLEAR ls_sqlquery.


*HANA Last Backup Output

      ls_sqlquery-heading = lc_lastbackup.

      CONCATENATE
     'SELECT TOP 1 ENTRY_TYPE_NAME,STATE_NAME,SYS_END_TIME from'
     '"SYS"."M_BACKUP_CATALOG" where'
`ENTRY_TYPE_NAME='complete data backup' and STATE_NAME='successful'`
     'order by SYS_END_TIME desc'
      INTO ls_sqlquery-sqlquery SEPARATED BY space.
      APPEND ls_sqlquery TO lt_sqlquery.
      CLEAR ls_sqlquery.

*HANA System User Status Output

      ls_sqlquery-heading = lc_status.

      ls_sqlquery-sqlquery =
      'SELECT USER_NAME ,USER_DEACTIVATED from "SYS"."USERS"'.
      APPEND ls_sqlquery TO lt_sqlquery.
      CLEAR ls_sqlquery.

*HANA Differential Backup Duration Output

      ls_sqlquery-heading = lc_differential.

      CONCATENATE
      'SELECT TOP 1 ENTRY_TYPE_NAME,SYS_START_TIME,SYS_END_TIME,'
      'SECONDS_BETWEEN(SYS_START_TIME,SYS_END_TIME) as'
      'BACKUP_DURATION_IN_SEC,'
      'SECONDS_BETWEEN(SYS_START_TIME,SYS_END_TIME)/60 AS'
      `BACKUP_DURATION_IN_MIN, 'sucess' AS STATUS`
      'FROM M_BACKUP_CATALOG  where'
      `ENTRY_TYPE_NAME in('differential data backup')`
      'ORDER BY SYS_START_TIME DESC'
      INTO ls_sqlquery-sqlquery SEPARATED BY space.
      APPEND ls_sqlquery TO lt_sqlquery.
      CLEAR ls_sqlquery.

*hana_differential_backup_frequency

      ls_sqlquery-heading = lc_logbackup.

      CONCATENATE
      'SELECT TOP 1'
      'FREQUENCY_OF_BACKUP_IN_MIN,COUNT(FREQUENCY_OF_BACKUP_IN_MIN)'
      `AS OCCURENCES,'success' AS STATUS FROM`
      '(SELECT ENTRY_TYPE_NAME,SYS_START_TIME,SYS_END_TIME,'
      'SECONDS_BETWEEN(SYS_START_TIME,SYS_END_TIME) as'
      'FREQUENCY_OF_BACKUP_IN_SEC,'
      'SECONDS_BETWEEN(SYS_START_TIME,SYS_END_TIME)/60'
      'AS FREQUENCY_OF_BACKUP_IN_MIN'
      'FROM M_BACKUP_CATALOG  where ENTRY_TYPE_NAME'
      `in('differential data backup')`
      'ORDER BY SYS_START_TIME DESC)GROUP BY'
      'FREQUENCY_OF_BACKUP_IN_MIN ORDER BY OCCURENCES DESC'
      INTO ls_sqlquery-sqlquery SEPARATED BY space.
      APPEND ls_sqlquery TO lt_sqlquery.
      CLEAR ls_sqlquery.

*HANA Incremental Backup Duration Output
      ls_sqlquery-heading = lc_incbackup.

      CONCATENATE
      'SELECT TOP 1 ENTRY_TYPE_NAME,SYS_START_TIME,SYS_END_TIME,'
      'SECONDS_BETWEEN(SYS_START_TIME,SYS_END_TIME)'
      'as BACKUP_DURATION_IN_SEC,'
      'SECONDS_BETWEEN(SYS_START_TIME,SYS_END_TIME)/60'
      'AS BACKUP_DURATION_IN_MIN,'
      `'success' AS STATUS`
      'FROM M_BACKUP_CATALOG  where ENTRY_TYPE_NAME'
      `in('incremental data backup')`
      'ORDER BY SYS_START_TIME DESC'
      INTO ls_sqlquery-sqlquery SEPARATED BY space.
      APPEND ls_sqlquery TO lt_sqlquery.
      CLEAR ls_sqlquery.

*hana_differential_backup_frequency
      ls_sqlquery-heading = lc_diffbackup.

      CONCATENATE
      'SELECT TOP 1'
      'FREQUENCY_OF_BACKUP_IN_MIN,COUNT(FREQUENCY_OF_BACKUP_IN_MIN)'
      `AS OCCURENCES,'success' AS STATUS FROM`
      '(SELECT ENTRY_TYPE_NAME,SYS_START_TIME,SYS_END_TIME,'
      'SECONDS_BETWEEN(SYS_START_TIME,SYS_END_TIME)'
      'as FREQUENCY_OF_BACKUP_IN_SEC,'
      'SECONDS_BETWEEN(SYS_START_TIME,SYS_END_TIME)/60'
      'AS FREQUENCY_OF_BACKUP_IN_MIN'
      'FROM M_BACKUP_CATALOG  where ENTRY_TYPE_NAME'
      `in('differential data backup')`
      'ORDER BY SYS_START_TIME DESC)GROUP BY FREQUENCY_OF_BACKUP_IN_MIN'
      'ORDER BY OCCURENCES DESC'
      INTO ls_sqlquery-sqlquery SEPARATED BY space.
      APPEND ls_sqlquery TO lt_sqlquery.
      CLEAR ls_sqlquery.


*hana_incremental_backup_frequency output
      ls_sqlquery-heading = lc_incfreq.
      CONCATENATE
      'SELECT TOP 1'
      'FREQUENCY_OF_BACKUP_IN_MIN,COUNT(FREQUENCY_OF_BACKUP_IN_MIN)'
      `AS OCCURENCES,'success' AS STATUS FROM`
      '(SELECT ENTRY_TYPE_NAME,SYS_START_TIME,SYS_END_TIME,'
      'SECONDS_BETWEEN(SYS_START_TIME,SYS_END_TIME) as'
      'FREQUENCY_OF_BACKUP_IN_SEC,'
      'SECONDS_BETWEEN(SYS_START_TIME,SYS_END_TIME)/60'
      'AS FREQUENCY_OF_BACKUP_IN_MIN FROM M_BACKUP_CATALOG where'
      `ENTRY_TYPE_NAME in('incremental data backup') ORDER BY`
      'SYS_START_TIME DESC)GROUP BY FREQUENCY_OF_BACKUP_IN_MIN'
      'ORDER BY OCCURENCES DESC'
      INTO ls_sqlquery-sqlquery SEPARATED BY space.
      APPEND ls_sqlquery TO lt_sqlquery.
      CLEAR ls_sqlquery.

*HANA Landscape Details Output

      ls_sqlquery-heading = lc_landscape.

      ls_sqlquery-sqlquery =
      'select * from M_LANDSCAPE_HOST_CONFIGURATION'.
      APPEND ls_sqlquery TO lt_sqlquery.
      CLEAR ls_sqlquery.

*HANA LOG BACKUP DURATION

      ls_sqlquery-heading = lc_logduration.
      CONCATENATE
      'SELECT TOP 1 ENTRY_TYPE_NAME,SYS_START_TIME,SYS_END_TIME,'
      'SECONDS_BETWEEN(SYS_START_TIME,SYS_END_TIME) as'
      'BACKUP_DURATION_IN_SEC,'
      'SECONDS_BETWEEN(SYS_START_TIME,SYS_END_TIME)/60'
      `AS BACKUP_DURATION_IN_MIN, 'SUCCESS' AS STATUS`
      `FROM M_BACKUP_CATALOG  where ENTRY_TYPE_NAME in('log backup')`
      'ORDER BY SYS_START_TIME DESC'
      INTO ls_sqlquery-sqlquery SEPARATED BY space.
      APPEND ls_sqlquery TO lt_sqlquery.
      CLEAR ls_sqlquery.

*hana_log_backup_frequency

      ls_sqlquery-heading = lc_logfreq.
      CONCATENATE
      'SELECT TOP 1'
      'FREQUENCY_OF_BACKUP_IN_MIN,COUNT(FREQUENCY_OF_BACKUP_IN_MIN)'
      `AS OCCURENCES,'success' as STATUS FROM`
      '(SELECT ENTRY_TYPE_NAME,SYS_START_TIME,SYS_END_TIME,'
      'SECONDS_BETWEEN(SYS_START_TIME,SYS_END_TIME) as'
      'FREQUENCY_OF_BACKUP_IN_SEC,'
      'SECONDS_BETWEEN(SYS_START_TIME,SYS_END_TIME)/60 AS'
      'FREQUENCY_OF_BACKUP_IN_MIN FROM M_BACKUP_CATALOG where'
`ENTRY_TYPE_NAME in('log backup') ORDER BY SYS_START_TIME DESC)GROUP`
     'BY FREQUENCY_OF_BACKUP_IN_MIN ORDER BY OCCURENCES DESC'
      INTO ls_sqlquery-sqlquery SEPARATED BY space.
      APPEND ls_sqlquery TO lt_sqlquery.
      CLEAR ls_sqlquery.

*HANA Logmode Check Output

      ls_sqlquery-heading = lc_logmode.

      CONCATENATE
      'SELECT DISTINCT E.HOST,E.log_mode,E.PORT , D.SYSTEM_ID,'
      'D.DATABASE_NAME FROM SYS.M_LOG_BUFFERS E JOIN SYS.M_DATABASE D'
      'ON (E.HOST = D.HOST)'
      INTO ls_sqlquery-sqlquery SEPARATED BY space.
      APPEND ls_sqlquery TO lt_sqlquery.
      CLEAR ls_sqlquery.

*HANA Last Log Backup Output
      ls_sqlquery-heading = lc_lastlog.

      CONCATENATE
      'SELECT TOP 1 ENTRY_TYPE_NAME,STATE_NAME,SYS_END_TIME from'
      `"SYS"."M_BACKUP_CATALOG" where ENTRY_TYPE_NAME='log backup' and`
      `STATE_NAME='successful' order by SYS_END_TIME desc`
      INTO ls_sqlquery-sqlquery SEPARATED BY space.
      APPEND ls_sqlquery TO lt_sqlquery.
      CLEAR ls_sqlquery.

      ls_sqlquery-heading = lc_count.

      CALL FUNCTION 'DB_DBSCHEMA'
        IMPORTING
          dbschema = lv_dbschema.

      CONCATENATE lv_dbschema lc_usr INTO lv_schema.


      CONCATENATE
      'select count(*) row_count from'
      lv_schema
      INTO ls_sqlquery-sqlquery SEPARATED BY space.
      APPEND ls_sqlquery TO lt_sqlquery.
      CLEAR ls_sqlquery.

*HANA License Output

      ls_sqlquery-heading = lc_license.

      ls_sqlquery-sqlquery =
      'select * from m_license'.
      APPEND ls_sqlquery TO lt_sqlquery.
      CLEAR ls_sqlquery.


      CREATE OBJECT lo_sql_con.
      " Build the SQL statement and execute it.
      CREATE OBJECT lo_sql_stmt.

      LOOP AT lt_sqlquery INTO ls_sqlquery.


        "Blank Line
        IF lt_output[] IS NOT INITIAL.
          CLEAR: ls_output.
          APPEND ls_output TO lt_output.
        ENDIF.

        "Table heading
        ls_output = ls_sqlquery-heading.
        APPEND ls_output TO lt_output.
        CLEAR ls_output.

        TRY.
            lo_sql_stmt = lo_sql_con->create_statement( ).
            lv_sql_stmt = ls_sqlquery-sqlquery.
            lr_set = lo_sql_stmt->execute_query( lv_sql_stmt ).
            lt_metadata = lr_set->get_metadata( ).

            lr_metadata = lr_set->get_struct_ref(
            md_tab = lt_metadata
            p_strict = abap_false ).

            lr_structdesc ?=
            cl_abap_typedescr=>describe_by_data_ref( lr_metadata ).

            lr_tabletype =
            cl_abap_tabledescr=>create( p_line_type  = lr_structdesc
            p_table_kind = cl_abap_tabledescr=>tablekind_std ).

            CREATE DATA lr_result_ref TYPE HANDLE lr_tabletype.
            lr_structdescr ?=
            cl_abap_typedescr=>describe_by_data_ref( lr_metadata ).

            CREATE DATA lr_structure TYPE HANDLE lr_structdescr.
            ASSIGN lr_structure->* TO <fs_structure>.

            lr_set->set_param_table( itab_ref = lr_result_ref ).
            lr_set->next_package( ).

            ASSIGN lr_result_ref->* TO <fs_table>.

            "Adding Column headings to table
            LOOP AT lr_structdescr->components INTO ls_struct.
              CONCATENATE lv_prefinal ls_struct-name '|' INTO
              lv_prefinal.
              IF <fs_table> IS INITIAL.
                CONCATENATE lv_prefinal1 lc_null '|' INTO
              lv_prefinal1.
              ENDIF.
              CLEAR: ls_struct.
            ENDLOOP.

            "Removing seperator at end
            lv_prefinal = shift_right(
            val = lv_prefinal  places = 1 ).
            ls_output = lv_prefinal.
            APPEND ls_output TO lt_output.
            CLEAR: lv_prefinal, ls_output.

            IF lv_prefinal1 IS NOT INITIAL.
              "Removing seperator at end
              lv_prefinal1 = shift_right(
              val = lv_prefinal1  places = 1 ).
              ls_output = lv_prefinal1.
              APPEND ls_output TO lt_output.
              CLEAR: lv_prefinal1, ls_output.
            ENDIF.

            IF <fs_table> IS NOT INITIAL.


              LOOP AT <fs_table> ASSIGNING <ls_data>.

                IF <ls_data> IS ASSIGNED.
                  DO .
                    ASSIGN COMPONENT sy-index OF STRUCTURE <ls_data>
                    TO <lfs_comp>.
                    IF sy-subrc <> 0.
                      EXIT .
                    ENDIF.
                    CLEAR lv_comp.
                    IF <lfs_comp> IS ASSIGNED.
                      lv_comp = <lfs_comp>.
                      CONDENSE lv_comp.
                      IF lv_comp IS INITIAL.
                        lv_comp = lc_null.
                      ENDIF.
                      CONCATENATE lv_prefinal lv_comp '|' INTO
                      lv_prefinal.
                    ENDIF.
                  ENDDO.
                ENDIF.

                "Removing seperator at end
                lv_prefinal = shift_right(
                               val = lv_prefinal  places = 1 ).

                "Adding NULL to end blank values
                IF lv_comp IS INITIAL.
                  CONCATENATE lv_prefinal lc_null INTO lv_prefinal.
                ENDIF.

                "Appending output
                ls_output = lv_prefinal.
                APPEND ls_output TO lt_output.

                CLEAR: ls_output, lv_prefinal, lv_sql_stmt.

              ENDLOOP.

            ENDIF.

          CATCH cx_sql_exception INTO lo_sql_excp.

            lv_msg = lo_sql_excp->get_text( ).
            CLEAR: ls_output.
            ls_output = lv_msg.
            APPEND ls_output TO lt_output.


        ENDTRY.

        CLEAR: ls_sqlquery, ls_output.

      ENDLOOP.

    WHEN OTHERS.

      "Table heading
      ls_output = lc_table.
      APPEND ls_output TO lt_output.
      CLEAR ls_output.

      " Incorrect input
      ls_output = lc_inc_input.
      APPEND ls_output TO lt_output.
      CLEAR ls_output.
  ENDCASE.
ENDFORM.