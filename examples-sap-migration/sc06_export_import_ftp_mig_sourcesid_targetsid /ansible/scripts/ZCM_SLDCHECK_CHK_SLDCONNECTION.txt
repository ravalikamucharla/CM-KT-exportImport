*---------------------------------------------------------------------*
* Program Name        :   ZCM_SLDCHECK_CHK_SLDCONNECTION              *
* Title               :   Run SLDCHECK                                *
* Purpose             :   This report is to Run SLDCHECK and capture  *
*                         logs during Cloud Migration                 *
*---------------------------------------------------------------------*
* Related Transaction OR Standard Program References                  *
* XXXXXXX                                                             *
*---------------------------------------------------------------------*
* Tables              :   SELECT    UPDATE      INSERT      DELETE    *
* XXXXX                     X                                         *
*---------------------------------------------------------------------*
* Program Change History                                              *
*---------------------------------------------------------------------*
*Date        Version     Author         TR#/Local     Description     *
*---------------------------------------------------------------------*
*09-22-2020  Initial   Ruchir Kamble   Local         To run SLDCHECK &*
*                                                    capture logs     *
*09-20-2022  V001      Soumya Ray      Local         To pass 'No data *
*                                                    found' incase no *
*                                                    data in system   *
*---------------------------------------------------------------------*

REPORT zcm_sldcheck_chk_sldconnection.
"This code has been referred from Standard Report RLCR_XI_STAYING_ALIVE

CONSTANTS: lc_error        TYPE c VALUE 'E'          LENGTH 1,
           lc_warning      TYPE c VALUE 'W'          LENGTH 1,
           lc_dest         TYPE string   VALUE 'SAPSLDAPI',
           lc_xipr_dest    TYPE string   VALUE 'LCRSAPRFC',
           lc_xipr_section TYPE string   VALUE 'Connections',
           lc_xipr_name    TYPE string   VALUE
           'com.sap.aii.ib.server.connect.webas.r3.ashost',
* Begin of changes in V001
           lc_nodata       TYPE c VALUE 'No data found'     LENGTH 20,
           lc_rfcdest      TYPE c VALUE 'RFC destination'   LENGTH 15,
           lc_nexist       TYPE c VALUE 'does not exist'    LENGTH 14,
           lc_cre_rfcdest  TYPE c VALUE
           '=> Create the RFC destination by using'         LENGTH 39,
           lc_tran_sm59    TYPE c VALUE 'transaction SM59!' LENGTH 17,
           lc_rfc_t        TYPE c VALUE 'T'                 LENGTH 1,
           lc_wrng_type    TYPE c VALUE 'is of wrong type'  LENGTH 16,
           lc_chng_tcpip   TYPE c VALUE
           '=> Change type to TCP/IP by using'              LENGTH 33,
           lc_fatalerror   TYPE c VALUE
           'Fatal error in function RFCDES2RFCDISPLAY'      LENGTH 45,
           lc_prop_rfc     TYPE c VALUE
           'Properties of RFC destination'                  LENGTH 29,
           lc_rfchost      TYPE c VALUE 'RFC host:       '  LENGTH 16,
           lc_prog_id      TYPE c VALUE 'program id:     '  LENGTH 16,
           lc_gateway_host TYPE c VALUE 'gateway host:   '  LENGTH 16,
           lc_gateway_serv TYPE c VALUE 'gateway service:'  LENGTH 16,
           lc_rfcon_clnt   TYPE c VALUE
   'Testing the RFC connection to the SLD java client...'   LENGTH 70,
           lc_rfcping_s    TYPE c VALUE
           'RFC ping was successful'                        LENGTH 23,
           lc_rfcping_exp  TYPE c VALUE
           'RFC ping returned exception with'               LENGTH 32,
           lc_message      TYPE c VALUE 'message:'          LENGTH 8,
           lc_rfcping_nexp TYPE c VALUE
           'RFC ping returned unknown exception'            LENGTH 40,
           lc_func_termnat TYPE c VALUE
           'Function call terminated sucessfully'           LENGTH 50,
           lc_func_exp     TYPE c VALUE
           'Function call returned exception code'          LENGTH 50.
* End of changes in V001

DATA : ls_output             TYPE tab512,
       ls_rfcdes             TYPE rfcdes,
       lv_status             TYPE c,
       lv_errors             TYPE i,
       lv_rfc_mess(80)       TYPE c,
       ls_rfcdisplay         TYPE rfcdisplay,
       lv_bypassing_cache    TYPE char1 VALUE 'X',
       lv_subrc              TYPE char3,
       lv_nlines             TYPE i,
       lv_boolean            TYPE char1,
       lv_sld_loopup_stopped TYPE char1,
       bs_id                 TYPE text60,
       bs_role               TYPE lcr_bs_role,
       sldui                 TYPE char1 VALUE 'X',
       sldcache              TYPE char1,
       text                  TYPE string,
       url                   TYPE string,
       xipr_value            TYPE string,
       t_bsys                TYPE lcr_t_bsysprod,
       s_bsys                TYPE lcrs_bsysprod,
       ls_slddest            TYPE sld_s_accessdata_display,
       lv_lines              TYPE i. "+V001

LOAD-OF-PROGRAM.

FORM get_config
              TABLES lt_input  STRUCTURE tab512
                     lt_output STRUCTURE tab512.

  CONSTANTS: lc_inc_input TYPE c VALUE 'Incorrect input'   LENGTH 20,
             lc_noinput   TYPE c VALUE 'No input given'    LENGTH 20,
             lc_output    TYPE c VALUE 'Output'            LENGTH 10,
             lc_title     TYPE c VALUE
             'Exchange Infrastructure: Test LCR Interface' LENGTH 60,
             lc_export    TYPE c VALUE 'EXPORT'            LENGTH 6.

  DATA: ls_input              TYPE tab512,
        lv_action             TYPE char20.

* Begin of changes in V001
  ls_output = lc_output.
  APPEND ls_output TO lt_output.
* End of changes in V001

  READ TABLE lt_input INTO ls_input INDEX 1.
* Begin of changes in V001
  IF sy-subrc NE 0.
    " No input given
    ls_output = lc_noinput.
    APPEND ls_output TO lt_output.
    CLEAR ls_output.
    RETURN.
  ENDIF.
* End of changes in V001
  lv_action = ls_input.      " Action

  CASE lv_action.

    WHEN lc_export.               " When action is EXPORT

      " Adding title to the output

      ls_output = lc_title.
      APPEND ls_output TO lt_output.

      PERFORM sld_run TABLES lt_output.

      PERFORM sld_check TABLES lt_output.

*   Begin of changes in V001
      DESCRIBE TABLE lt_output LINES lv_lines.
      IF lv_lines LE 2.
        DELETE lt_output INDEX 2.
        ls_output = lc_nodata.
        APPEND ls_output TO lt_output.
        CLEAR ls_output.
        RETURN.
      ENDIF.

    WHEN OTHERS.
      " Incorrect input
      ls_output = lc_inc_input.
      APPEND ls_output TO lt_output.
      CLEAR ls_output.
*   End of changes in V001
  ENDCASE.

ENDFORM.

FORM sld_run TABLES lt_output.

* Begin of changes in V001
  CONSTANTS: lc_abaptrue      TYPE c VALUE 'X'                LENGTH 1,
             lc_more          TYPE c VALUE '(...more...)'     LENGTH 12,
             lc_comm_rfchttp  TYPE c VALUE
             'Communication mode: RFC + HTTP (deprecated)'    LENGTH 50,
             lc_comm_wbemcln  TYPE c VALUE
             'Communication mode: HTTP only (WBEM client)'    LENGTH 50,
             lc_no_sldserver  TYPE c VALUE
             'No SLD server access data maintained'           LENGTH 50,
             lc_url           TYPE c VALUE 'IS-URL  ='        LENGTH 9,
             lc_product       TYPE c VALUE 'product ='        LENGTH 9,
             lc_caption       TYPE c VALUE 'caption ='        LENGTH 9,
             lc_det_ownsys    TYPE c VALUE
             'Details of own business system'                 LENGTH 30,
             lc_no_detbusin   TYPE c VALUE
             'No details available for own business system'   LENGTH 48,
             lc_chk_sldrun    TYPE c VALUE
             '=> Check whether the SLD is running!'           LENGTH 50,
             lc_sldapicust    TYPE c VALUE
             '=> Use transaction SLDAPICUST to maintain'      LENGTH 41,
             lc_sld_servacs   TYPE c VALUE
             'the SLD server access data'                     LENGTH 26,
             lc_sld_destsett  TYPE c VALUE
             'SLD destination settings:'                      LENGTH 25,
             lc_alias         TYPE c VALUE 'Alias:      '     LENGTH 12,
             lc_hostname      TYPE c VALUE 'Host name:  '     LENGTH 12,
             lc_portnumber    TYPE c VALUE 'Port number:'     LENGTH 12,
             lc_user          TYPE c VALUE 'User:       '     LENGTH 12,
             lc_read_cache    TYPE c VALUE
             'Read data from Cache'                           LENGTH 20,
             lc_delete_cache  TYPE c VALUE
             'Delete Cache and import again from SLD'         LENGTH 50,
             lc_read_cahdate  TYPE c VALUE
             'Read from cache, date = '                       LENGTH 24,
             lc_retrive_sld   TYPE c VALUE
             'Retrieving data from the SLD server...'         LENGTH 38,
             lc_nobuss_cache  TYPE c VALUE
             'Currently no business systems in cache'         LENGTH 38,
             lc_id            TYPE c VALUE 'id   ='           LENGTH 6,
             lc_role          TYPE c VALUE 'role ='           LENGTH 6,
             lc_call_bsdet    TYPE c VALUE
             'Calling function LCR_GET_BS_DETAILS'            LENGTH 36,
             lc_sld_lookdet   TYPE c VALUE
             'SLD lookup: get business system details'        LENGTH 39,
             lc_launch_brwsr  TYPE c VALUE
   'Launching the SLD GUI in a separate browser window...'    LENGTH 54,
             lc_buss_sys      TYPE c VALUE
             'Properties of own business system associated'   LENGTH 46,
             lc_to_system     TYPE c VALUE 'to system'        LENGTH 9,
             lc_client        TYPE c VALUE 'client'           LENGTH 6,
             lc_for_system    TYPE c VALUE 'for system'       LENGTH 10,
             lc_no_bussys     TYPE c VALUE
             'No corresponding business system found'         LENGTH 39,
             lc_chk_sldcon    TYPE c VALUE
      '=> Check and maintain the SLD content for the current' LENGTH 54,
             lc_sld_namtyp    TYPE c VALUE
            'SLD lookup: get own business system name & type' LENGTH 47,
             lc_call_ownsys   TYPE c VALUE
            'Calling function LCR_GET_OWN_BUSINESS_SYSTEM'    LENGTH 45,
             lc_no_busmain    TYPE c VALUE
            'No business systems maintained in the SLD'       LENGTH 45,
             lc_chk_intsld    TYPE c VALUE
             '=> Check data integrity within the SLD!'        LENGTH 40,
             lc_list_bussys   TYPE c VALUE
            'List of business systems maintained in the SLD:' LENGTH 50,
             lc_healthy_run   TYPE c VALUE
            'in a healthy running state!'                     LENGTH 27,
             lc_verify_sld    TYPE c VALUE
             '=> Verify in the browser GUI that the SLD is'   LENGTH 44,
             lc_call_listsys  TYPE c VALUE
             'Calling function LCR_LIST_BUSINESS_SYSTEMS'     LENGTH 50,
             lc_main_sldserv  TYPE c VALUE
              'maintain the SLD server access data'           LENGTH 40,
             lc_use_sldapicus TYPE c VALUE
             'Use transaction SLDAPICUST if you wish to'      LENGTH 42.

  DATA: lv_use_wbem_client    TYPE c.
* End of changes in V001

  PERFORM config_selection TABLES lt_output.

  CALL METHOD cl_sld_accessor_wbem_client=>load_srvr_access_setting
    IMPORTING
      flg_use_wbem_client = lv_use_wbem_client.

  IF lv_use_wbem_client IS INITIAL.
    "Communication mode: RFC + HTTP (deprecated)
    ls_output = lc_comm_rfchttp.
    APPEND ls_output TO lt_output.
    SKIP.
*   retrieve RFC destination settings:
    SELECT SINGLE * FROM rfcdes INTO ls_rfcdes
           WHERE rfcdest = lc_dest.

    IF sy-subrc NE 0.

      CONCATENATE lc_rfcdest lc_dest lc_nexist
                  INTO ls_output SEPARATED BY space.
      APPEND ls_output TO lt_output.

      CONCATENATE lc_cre_rfcdest lc_tran_sm59
          INTO ls_output SEPARATED BY space.
      APPEND ls_output TO lt_output.

      lv_status = lc_error.

    ELSE.

      IF ls_rfcdes-rfctype NE lc_rfc_t.
        ADD 1 TO lv_errors.

        CONCATENATE lc_rfcdest lc_dest lc_wrng_type
        ls_rfcdes-rfctype INTO ls_output SEPARATED BY space.
        APPEND ls_output TO lt_output.

        CONCATENATE lc_chng_tcpip lc_tran_sm59
        INTO ls_output SEPARATED BY space.
        APPEND ls_output TO lt_output.

        lv_status = lc_error.
        RETURN.
      ELSE.
        CALL FUNCTION 'RFCDES2RFCDISPLAY'
          EXPORTING
            import_rfcdes     = ls_rfcdes
          IMPORTING
            export_rfcdisplay = ls_rfcdisplay
          EXCEPTIONS
            OTHERS            = 1.

        IF sy-subrc NE 0.
          ls_output = lc_fatalerror.
          APPEND ls_output TO lt_output.
          lv_status = lc_error.
          RETURN.
        ENDIF.

        CONCATENATE lc_prop_rfc
        ls_rfcdisplay-rfcdest
        INTO ls_output SEPARATED BY space.
        APPEND ls_output TO lt_output.

        CONCATENATE lc_rfchost ls_rfcdisplay-rfchost
        INTO ls_output SEPARATED BY space.
        APPEND ls_output TO lt_output.

        CONCATENATE  lc_prog_id ls_rfcdisplay-rfcexec
        INTO ls_output SEPARATED BY space.
        APPEND ls_output TO lt_output.

        CONCATENATE lc_gateway_host
        ls_rfcdisplay-rfcgwhost
        INTO ls_output SEPARATED BY space.
        APPEND ls_output TO lt_output.


        CONCATENATE lc_gateway_serv
        ls_rfcdisplay-rfcgwserv
        INTO ls_output SEPARATED BY space.
        APPEND ls_output TO lt_output.
        SKIP.

        "Testing the RFC connection to the SLD java client...
        ls_output = lc_rfcon_clnt.
        APPEND ls_output TO lt_output.


        CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'
          EXPORTING
            text = lc_rfcon_clnt.

        CALL FUNCTION 'RFC_PING'
          DESTINATION ls_rfcdisplay-rfcdest
          EXCEPTIONS
            system_failure        = 1 MESSAGE lv_rfc_mess
            communication_failure = 2 MESSAGE lv_rfc_mess
            OTHERS                = 99.

        CASE sy-subrc.
          WHEN 0.

            ls_output = lc_rfcping_s.
            APPEND ls_output TO lt_output.

          WHEN 1 OR 2.
            ADD 1 TO lv_errors.

            CONCATENATE lc_rfcping_exp lc_message
            lv_rfc_mess
            INTO ls_output SEPARATED BY space.
            APPEND ls_output TO lt_output.

            lv_status = lc_error.
            RETURN.
          WHEN OTHERS.
            ADD 1 TO lv_errors.

            ls_output =  lc_rfcping_nexp.
            APPEND ls_output TO lt_output.
            lv_status = lc_error.
            RETURN.
        ENDCASE.
      ENDIF.
    ENDIF.

  ELSE.
    ls_output = lc_comm_wbemcln.
    APPEND ls_output TO lt_output.
  ENDIF.

  SKIP.

  CALL FUNCTION 'SLDAPI_GET_PRIMARY_DEST'
    IMPORTING
      dest                 = ls_slddest
    EXCEPTIONS
      no_primary_available = 1.

  IF sy-subrc = 1.
    ADD 1 TO lv_errors.
    ls_output = lc_no_sldserver.
    APPEND ls_output TO lt_output.

    CONCATENATE lc_sldapicust
              lc_sld_servacs
              INTO ls_output SEPARATED BY space.
    APPEND ls_output TO lt_output.
    lv_status = lc_error.
    RETURN.
  ENDIF.

  ls_output = lc_sld_destsett.
  APPEND ls_output TO lt_output.

  CONCATENATE lc_alias ls_slddest-alias
              INTO ls_output SEPARATED BY space.
  APPEND ls_output TO lt_output.

  CONCATENATE lc_hostname ls_slddest-host
               INTO ls_output SEPARATED BY space.
  APPEND ls_output TO lt_output.

  CONCATENATE lc_portnumber ls_slddest-port
              INTO ls_output SEPARATED BY space.
  APPEND ls_output TO lt_output.

  CONCATENATE lc_user ls_slddest-user
              INTO ls_output SEPARATED BY space.
  APPEND ls_output TO lt_output.

  CONCATENATE lc_use_sldapicus
              lc_main_sldserv
               INTO ls_output SEPARATED BY space.
  APPEND ls_output TO lt_output.


  IF sldui = lc_abaptrue.
    ls_output = lc_launch_brwsr.
    APPEND ls_output TO lt_output.

    CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'
      EXPORTING
        text = lc_launch_brwsr.

    CONCATENATE lc_verify_sld
             lc_healthy_run
             INTO ls_output SEPARATED BY space.
    APPEND ls_output TO lt_output.
  ENDIF.


  ls_output = lc_call_listsys.
  APPEND ls_output TO lt_output.

  ls_output =  lc_retrive_sld.
  APPEND ls_output TO lt_output.

  CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'
    EXPORTING
      text = lc_sld_lookdet.


  IF lv_bypassing_cache = lc_abaptrue.
    lv_boolean = lc_abaptrue.
    ls_output = lc_delete_cache.
    APPEND ls_output TO lt_output.
  ELSE.
    PERFORM test_lcr_list_business_systems  USING lv_boolean.
    ls_output = lc_read_cache.
    APPEND ls_output TO lt_output.
  ENDIF.


  IF lv_boolean = lc_abaptrue.
    CALL FUNCTION 'LCR_LIST_BUSINESS_SYSTEMS'
      EXPORTING
        give_roles             = ' '
        give_products          = ' '
        bypassing_cache        = lv_bypassing_cache
      IMPORTING
        bus_systems            = t_bsys
      EXCEPTIONS
        no_rfc_destination     = 1
        no_landscape_directory = 2
        communication_error    = 3
        ld_error               = 4
        OTHERS                 = 5.
  ELSE.

    ls_output = lc_nobuss_cache.
    APPEND ls_output TO lt_output.

  ENDIF.

  CASE sy-subrc.

    WHEN 0.

      ls_output = lc_func_termnat.
      APPEND ls_output TO lt_output.

    WHEN OTHERS.

      lv_subrc = sy-subrc.

      CONCATENATE lc_func_exp
      lv_subrc INTO ls_output SEPARATED BY space.
      APPEND ls_output TO lt_output.

      ls_output = lc_chk_sldrun.
      APPEND ls_output TO lt_output.

      lv_status = lc_error.
      IF lv_bypassing_cache = lc_abaptrue.
        RETURN.
      ENDIF.

  ENDCASE.

  DESCRIBE TABLE t_bsys LINES lv_nlines.
  IF lv_nlines = 0.

    ls_output = lc_no_busmain.
    APPEND ls_output TO lt_output.

    ls_output = lc_chk_intsld.
    APPEND ls_output TO lt_output.

    lv_status = lc_warning.
    IF lv_bypassing_cache = lc_abaptrue.
      RETURN.
    ENDIF.
  ENDIF.

  ls_output = lc_list_bussys.
  APPEND ls_output TO lt_output.


  LOOP AT t_bsys INTO s_bsys.
    IF sy-tabix = 8.
      ls_output = lc_more.
      APPEND ls_output TO lt_output.
      EXIT.
    ENDIF.
    ls_output = s_bsys-bs_key_name.
    APPEND ls_output TO lt_output.
  ENDLOOP.

  PERFORM test_sld_cachestatus  TABLES lt_output
    USING lv_sld_loopup_stopped.

  SKIP.

  ls_output = lc_call_ownsys.
  APPEND ls_output TO lt_output.

  ls_output = lc_retrive_sld.
  APPEND ls_output TO lt_output.

  CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'
    EXPORTING
      text = lc_sld_namtyp.


  IF lv_bypassing_cache = ' ' OR lv_sld_loopup_stopped =  lc_abaptrue.
    DATA l_s_cache TYPE lcrt_clntcache.
    PERFORM  test_lcr_get_own_bs USING l_s_cache.
    bs_id = l_s_cache-bs_key_name.
    bs_role = l_s_cache-bs_role.
    IF bs_id IS NOT INITIAL.
      CONCATENATE lc_read_cahdate l_s_cache-aedat
      INTO ls_output SEPARATED BY space.
      APPEND ls_output TO lt_output.
    ENDIF.
  ELSE.
    CALL FUNCTION 'LCR_GET_OWN_BUSINESS_SYSTEM'
      EXPORTING
        bypassing_cache        = lv_bypassing_cache
      IMPORTING
        bs_key_name            = bs_id
        bs_role                = bs_role
      EXCEPTIONS
        no_business_system     = 1
        no_rfc_destination     = 2
        no_landscape_directory = 3
        illegal_arguments      = 4
        communication_error    = 5
        ld_error               = 6
        OTHERS                 = 7.
  ENDIF.

  CASE sy-subrc.

    WHEN 0.

      ls_output = lc_func_termnat.
      APPEND ls_output TO lt_output.

    WHEN 1.
      CONCATENATE lc_no_bussys
           lc_for_system sy-sysid lc_client sy-mandt
           INTO ls_output SEPARATED BY space.
      APPEND ls_output TO lt_output.

      CONCATENATE lc_chk_sldcon
      lc_client
      INTO ls_output SEPARATED BY space.
      APPEND ls_output TO lt_output.

      lv_status = lc_warning.
      RETURN.

    WHEN OTHERS.
      CLEAR lv_subrc.
      lv_subrc = sy-subrc.

      CONCATENATE lc_func_exp
      lv_subrc INTO ls_output SEPARATED BY space.
      APPEND ls_output TO lt_output.

      ls_output = lc_chk_sldrun.
      APPEND ls_output TO lt_output.
      lv_status = lc_error.
      RETURN.

  ENDCASE.

  CONCATENATE lc_buss_sys
         lc_to_system sy-sysid lc_client sy-mandt
         INTO ls_output SEPARATED BY space.
  APPEND ls_output TO lt_output.

  CONCATENATE lc_id bs_id
  INTO ls_output SEPARATED BY space.
  APPEND ls_output TO lt_output.

  CONCATENATE lc_role bs_role
  INTO ls_output SEPARATED BY space.
  APPEND ls_output TO lt_output.

  SKIP.

  ls_output = lc_call_bsdet.
  APPEND ls_output TO lt_output.

  ls_output = lc_retrive_sld.
  APPEND ls_output TO lt_output.

  CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'
    EXPORTING
      text = lc_sld_lookdet.


  text = bs_id.
  lv_boolean = lc_abaptrue.
  IF lv_bypassing_cache = ' '.
    DATA l_aedat TYPE sydats.
    PERFORM test_lcr_get_bs_details
       USING text url t_bsys l_aedat.
    CONCATENATE lc_read_cahdate l_aedat
                INTO ls_output SEPARATED BY space.
    APPEND ls_output TO lt_output.
    IF t_bsys[] IS INITIAL.
      sy-subrc = 1.  "no_business_system
    ENDIF.
  ELSE.
    CALL FUNCTION 'LCR_GET_BS_DETAILS'
      EXPORTING
        bs_key_name            = text
        bypassing_cache        = lv_bypassing_cache
      IMPORTING
        integr_server_url      = url
        bs_details             = t_bsys
      EXCEPTIONS
        no_business_system     = 1
        no_rfc_destination     = 2
        no_landscape_directory = 3
        communication_error    = 4
        ld_error               = 5
        OTHERS                 = 6.
  ENDIF.


  CASE sy-subrc.

    WHEN 0.

      ls_output = lc_func_termnat.
      APPEND ls_output TO lt_output.

    WHEN OTHERS.
      CLEAR lv_subrc.
      lv_subrc = sy-subrc.
      CONCATENATE lc_func_exp
      lv_subrc INTO ls_output SEPARATED BY space.
      APPEND ls_output TO lt_output.

      ls_output = lc_chk_sldrun.
      APPEND ls_output TO lt_output.

      ADD 1 TO lv_errors.
      RETURN.

  ENDCASE.

  DESCRIBE TABLE t_bsys LINES lv_nlines.
  IF lv_nlines = 0.

    CONCATENATE lc_no_detbusin
     bs_id INTO ls_output SEPARATED BY space.
    APPEND ls_output TO lt_output.

    lv_status = lc_warning.
    RETURN.
  ENDIF.
  CONCATENATE lc_det_ownsys bs_id
              INTO ls_output SEPARATED BY space.
  APPEND ls_output TO lt_output.

  READ TABLE t_bsys INDEX 1 INTO s_bsys.

  CONCATENATE lc_caption s_bsys-bs_caption
  INTO ls_output SEPARATED BY space.
  APPEND ls_output TO lt_output.

  CONCATENATE lc_product s_bsys-pr_name
  INTO ls_output SEPARATED BY space.
  APPEND ls_output TO lt_output.

  CONCATENATE lc_url url
  INTO ls_output SEPARATED BY space.
  APPEND ls_output TO lt_output.

ENDFORM.


FORM sld_check TABLES lt_output.

* Begin of changes in V001
  CONSTANTS: lc_sld_tech      TYPE c VALUE
             'Summary: Connection to SLD works technically,'  LENGTH 45,
             lc_sld_maintain  TYPE c VALUE
             'but the SLD content may need maintenance'       LENGTH 40,
             lc_chk_sldata    TYPE c VALUE
             '=> Check and maintain the SLD data content'     LENGTH 45,
             lc_chk_sldfunc   TYPE c VALUE
             '=> Check SLD function and configurations'       LENGTH 45,
             lc_sldcon_nwrk   TYPE c VALUE
             'Summary: Connection to SLD does not work'       LENGTH 45,
             lc_sldcon_wrk    TYPE c VALUE
             'Summary: Connection to SLD works correctly'     LENGTH 45,
             lc_hub           TYPE c VALUE 'HUB'              LENGTH 3,
             lc_chk_xiprof    TYPE c VALUE
             'Now checking access to the XI Profile'          LENGTH 45,
             lc_call_profpara TYPE c VALUE
          'Calling function EXCHANGE_PROFILE_GET_PARAMETER'   LENGTH 50,
             lc_retriv_xiprof TYPE c VALUE
             'Retrieving data from the XI Profile...'         LENGTH 40,
             lc_access_xiprof TYPE c VALUE
             'Access to the XI Profile is currently'          LENGTH 50,
             lc_disrupted     TYPE c VALUE
             'disrupted.'                                     LENGTH 10,
             lc_chk_access    TYPE c VALUE
             '=> Check whether you can access the'            LENGTH 36,
             lc_xi_webrowser  TYPE c VALUE
             'XI Profile using a web browser!'                LENGTH 40,
             lc_retrive_val   TYPE c VALUE
             'Retrieved value of'                             LENGTH 18,
             lc_section       TYPE c VALUE 'section   ='      LENGTH 11,
             lc_parameter     TYPE c VALUE 'parameter ='      LENGTH 11,
             lc_value         TYPE c VALUE '-> value  ='      LENGTH 11,
             lc_conxi_correct TYPE c VALUE
    'Summary: Connection to the XI Profile works correctly'   LENGTH 60.
* End of changes in V001
  IF lv_status = lc_warning.

    CONCATENATE lc_sld_tech lc_sld_maintain
    INTO ls_output SEPARATED BY space.
    APPEND ls_output TO lt_output.
    "=> Check and maintain the SLD data content
    ls_output = lc_chk_sldata.
    APPEND ls_output TO lt_output.
  ELSEIF lv_status = lc_error.
    "Summary: Connection to SLD does not work
    ls_output = lc_sldcon_nwrk.
    APPEND ls_output TO lt_output.
    "=> Check SLD function and configurations
    ls_output = lc_chk_sldfunc.
    APPEND ls_output TO lt_output.
  ELSE.
    "Summary: Connection to SLD works correctly
    ls_output = lc_sldcon_wrk.
    APPEND ls_output TO lt_output.
  ENDIF.

  IF bs_role EQ lc_hub. "HUB
    "Now checking access to the XI Profile
    ls_output = lc_chk_xiprof.
    APPEND ls_output TO lt_output.
    SKIP.

* retrieve RFC destination settings:
    SELECT SINGLE * FROM rfcdes INTO ls_rfcdes
           WHERE rfcdest = lc_xipr_dest.

    IF sy-subrc NE 0.


      CONCATENATE lc_rfcdest lc_xipr_dest lc_nexist
      INTO ls_output SEPARATED BY space.
      APPEND ls_output TO lt_output.


      CONCATENATE lc_cre_rfcdest lc_tran_sm59
      INTO ls_output SEPARATED BY space.
      APPEND ls_output TO lt_output.

      RETURN.

    ELSE.

      IF ls_rfcdes-rfctype NE lc_rfc_t.

        ADD 1 TO lv_errors.

        CONCATENATE lc_rfcdest lc_xipr_dest
        lc_wrng_type ls_rfcdes-rfctype
        INTO ls_output SEPARATED BY space.
        APPEND ls_output TO lt_output.

        CONCATENATE lc_chng_tcpip lc_tran_sm59
        INTO ls_output SEPARATED BY space.
        APPEND ls_output TO lt_output.

        RETURN.

      ELSE.

        CALL FUNCTION 'RFCDES2RFCDISPLAY'
          EXPORTING
            import_rfcdes     = ls_rfcdes
          IMPORTING
            export_rfcdisplay = ls_rfcdisplay
          EXCEPTIONS
            OTHERS            = 1.
        IF sy-subrc NE 0.

          ls_output = lc_fatalerror.
          APPEND ls_output TO lt_output.
          RETURN.
        ENDIF.

        CONCATENATE lc_prop_rfc ls_rfcdisplay-rfcdest
        INTO ls_output SEPARATED BY space.
        APPEND ls_output TO lt_output.

        CONCATENATE lc_rfchost ls_rfcdisplay-rfchost
        INTO ls_output SEPARATED BY space.
        APPEND ls_output TO lt_output.

        CONCATENATE lc_prog_id ls_rfcdisplay-rfcexec
        INTO ls_output SEPARATED BY space.
        APPEND ls_output TO lt_output.

        CONCATENATE lc_gateway_host ls_rfcdisplay-rfcgwhost
         INTO ls_output SEPARATED BY space.

        APPEND ls_output TO lt_output.

        CONCATENATE lc_gateway_host ls_rfcdisplay-rfcgwserv
        INTO ls_output SEPARATED BY space.

        APPEND ls_output TO lt_output.

        SKIP.

        ls_output = lc_rfcon_clnt. "+V001
        APPEND ls_output TO lt_output.

        CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'
          EXPORTING
            text = lc_rfcon_clnt.

        CALL FUNCTION 'RFC_PING' DESTINATION ls_rfcdisplay-rfcdest
          EXCEPTIONS
            system_failure        = 1 MESSAGE lv_rfc_mess
            communication_failure = 2 MESSAGE lv_rfc_mess
            OTHERS                = 99.

        CASE sy-subrc.
          WHEN 0.

            ls_output = lc_rfcping_s.
            APPEND ls_output TO lt_output.

          WHEN 1 OR 2.
            ADD 1 TO lv_errors.

            CONCATENATE lc_rfcping_exp lc_message
            INTO ls_output SEPARATED BY space.
            APPEND ls_output TO lt_output.

            ls_output = lv_rfc_mess.
            APPEND ls_output TO lt_output.

            RETURN.
          WHEN OTHERS.
            ADD 1 TO lv_errors.

            ls_output = lc_rfcping_nexp.
            APPEND ls_output TO lt_output.

            RETURN.
        ENDCASE.

      ENDIF.

    ENDIF.

    SKIP.

    ls_output = lc_call_profpara.
    APPEND ls_output TO lt_output.

    ls_output = lc_retriv_xiprof.
    APPEND ls_output TO lt_output.

    CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'
      EXPORTING
        text = lc_retriv_xiprof.

    CALL FUNCTION 'EXCHANGE_PROFILE_GET_PARAMETER'
      EXPORTING
        section             = lc_xipr_section
        name                = lc_xipr_name
      IMPORTING
        value               = xipr_value
      EXCEPTIONS
        no_rfc_destination  = 1
        communication_error = 2
        ep_error            = 3
        OTHERS              = 4.

    CASE sy-subrc.

      WHEN 0.

        ls_output = lc_func_termnat.
        APPEND ls_output TO lt_output.

      WHEN OTHERS.
        CLEAR lv_subrc.
        lv_subrc = sy-subrc.

        CONCATENATE lc_func_exp
        lv_subrc INTO ls_output SEPARATED BY space.
        APPEND ls_output TO lt_output.

        CONCATENATE lc_access_xiprof lc_disrupted
        INTO ls_output SEPARATED BY space.
        APPEND ls_output TO lt_output.


        CONCATENATE lc_chk_access  lc_xi_webrowser
        INTO ls_output SEPARATED BY space.
        APPEND ls_output TO lt_output.

        ADD 1 TO lv_errors.
        RETURN.

    ENDCASE.

    CONCATENATE lc_retrive_val
                lc_section lc_xipr_section
                lc_parameter lc_xipr_name
             INTO ls_output SEPARATED BY space.
    APPEND ls_output TO lt_output.

    CONCATENATE  lc_value  xipr_value
    INTO ls_output SEPARATED BY space.
    APPEND ls_output TO lt_output.

    ls_output = lc_conxi_correct.
    APPEND ls_output TO lt_output.


  ENDIF.

ENDFORM.


FORM config_selection TABLES lt_output.

* Begin of changes in V001
  CONSTANTS: lc_abaptrue   TYPE c VALUE 'X'                 LENGTH 1,
             lc_sldcheck   TYPE c VALUE 'SLDCHECK'          LENGTH 8,
             lc_lcrcheck   TYPE c VALUE 'LCRCHECK'          LENGTH 8,
             lc_read_sld   TYPE c VALUE
             'Read data only from SLD'                      LENGTH 25,
             lc_read_sldca TYPE c VALUE
             'Read data only from SLD-Cache, no SLD-Lookup' LENGTH 50,
             lc_launch_sld TYPE c VALUE
             'Launching of the SLD GUI is disabled'         LENGTH 50.
* End of changes in V001

  IF sy-tcode <> lc_sldcheck AND sy-tcode <> lc_lcrcheck.
  ELSE.
    sldcache = ' '.
    sldui = lc_abaptrue.
  ENDIF.
  IF sldcache = lc_abaptrue.
    lv_bypassing_cache  = ' '.
    ls_output =  lc_read_sldca.
    APPEND ls_output TO lt_output.
  ELSE.
    lv_bypassing_cache  = lc_abaptrue.
    ls_output =  lc_read_sld.
    APPEND ls_output TO lt_output.
  ENDIF.
  IF sldui = ' '.
    ls_output = lc_launch_sld.
    APPEND ls_output TO lt_output.
  ENDIF.
ENDFORM.

FORM test_lcr_list_business_systems
                  USING lv_boolean TYPE char1.

  CONSTANTS:
    c_bus_systems_list TYPE indx_srtfd VALUE 'BUS_SYSTEM_LIST2',
    lc_abaptrue        TYPE c VALUE 'X'           LENGTH 1.
  TYPES:
    BEGIN OF ty_sld_s_bskey,
      bs_key_name TYPE sld_bskey,
      bs_caption  TYPE string,
    END OF ty_sld_s_bskey.
  TYPES:
        ty_sld_t_bskey        TYPE STANDARD TABLE OF ty_sld_s_bskey.
  DATA: t_bslist       TYPE ty_sld_t_bskey,
        t_bslist_cache TYPE ty_sld_t_bskey,
        s_indx         TYPE lcrt_indx.

  IMPORT bs_list2  TO t_bslist_cache
         FROM DATABASE lcrt_indx(xi)
         ID c_bus_systems_list TO s_indx.
  IF sy-subrc = 0.
    lv_boolean = lc_abaptrue.
  ELSE.
    lv_boolean = ' '.
    sy-subrc = 0.
  ENDIF.

ENDFORM.

FORM test_sld_cachestatus TABLES lt_output
                       USING l_flag TYPE char1.
* Begin of changes in V001
  CONSTANTS: lc_abaptrue    TYPE c VALUE 'X'           LENGTH 1,
             lc_cachestatus TYPE c VALUE 'CACHESTATUS' LENGTH 11,
             lc_sldupd_deac TYPE c VALUE
            'SLD update deactivated'                   LENGTH 22.
* End of changes in V001

  DATA: text    TYPE string,
        srtfd   TYPE indx_srtfd,
        l_cache TYPE lcrt_clntcache.

  l_flag = ' '.
  CONCATENATE sy-sysid sy-mandt lc_cachestatus INTO text.
  srtfd = text.
  SELECT SINGLE * FROM lcrt_clntcache
    INTO l_cache WHERE srtfd = srtfd.
  IF sy-subrc = 0 AND l_cache-bs_role > 4.
    l_flag = lc_abaptrue.

*    write: / .
    ls_output = lc_sldupd_deac.
    APPEND ls_output TO lt_output.

  ENDIF.

ENDFORM.

FORM test_lcr_get_own_bs
        USING s_cache TYPE lcrt_clntcache.
  DATA: text    TYPE string,
        srtfd   TYPE indx_srtfd,
        l_cache TYPE lcrt_clntcache.


  CONCATENATE sy-sysid sy-mandt INTO text.
  srtfd = text.
  SELECT SINGLE * FROM lcrt_clntcache
    INTO s_cache WHERE srtfd = srtfd.
  IF sy-subrc <> 0.
    CLEAR s_cache.
    RETURN.
  ENDIF.
ENDFORM.

FORM test_lcr_get_bs_details
    USING bs_key_name       TYPE string
          integr_server_url TYPE  string
          bs_details        TYPE  lcr_t_bsysprod
          l_aedat           TYPE sydats.

  CONSTANTS:
      c_bus_system_details TYPE indx_srtfd VALUE 'BUS_SYSTEM_DETAIL2'.

  TYPES:
    BEGIN OF ty_s_bsysinfo,
      bs_key_name TYPE sld_bskey,
      url         TYPE string,
      logsys      TYPE logsys,
    END OF ty_s_bsysinfo.

  DATA: t_details_cache  TYPE lcr_t_bsysprod,
        t_info_cache     TYPE STANDARD TABLE OF ty_s_bsysinfo,
        s_indx           TYPE lcrt_indx,
        bs_details_cache TYPE lcr_t_bsysprod,
        s_info           TYPE ty_s_bsysinfo,
        rc               TYPE i.

  FIELD-SYMBOLS:
        <fs_detail>  TYPE lcrs_bsysprod.

  IMPORT bs_details TO t_details_cache
         is_infos   TO t_info_cache
         FROM DATABASE lcrt_indx(xi)
         ID c_bus_system_details TO s_indx.

  IF sy-subrc = 0.
*   find relevant entries:
    LOOP AT t_details_cache ASSIGNING <fs_detail>
                      WHERE bs_key_name = bs_key_name.
      APPEND <fs_detail> TO bs_details_cache.
    ENDLOOP.
    rc = sy-subrc.
    READ TABLE t_info_cache WITH KEY bs_key_name = bs_key_name
                            INTO s_info.
    IF rc = 0 AND sy-subrc = 0.
      l_aedat = s_indx-aedat.
      integr_server_url = s_info-url.
    ENDIF.
  ENDIF.

ENDFORM.