*---------------------------------------------------------------------*
* Program Name        : ZCM_SM35_EXP_BATCH_SESSIONS                   *
* Title               : SM35 Logs                                     *
* Purpose             : This report is used to dispaly SM35 messages  *
*---------------------------------------------------------------------*
* Related Transaction OR Standard Program References                  *
* SM35                                                                *
*---------------------------------------------------------------------*
* Tables              :   SELECT    UPDATE      INSERT      DELETE    *
* APQI                      X                                         *
*---------------------------------------------------------------------*
* Program Change History                                              *
*---------------------------------------------------------------------*
*Date        Version   Author       TR#/Local     Description         *
*---------------------------------------------------------------------*
*09-30-2020  Initial  Yasaswini K     Local     This report is used   *
*                                               to display SM35       *
*                                               messages              *
*09-27-2022  V001     Yasaswini K     Local     To pass "No data      *
*                                               found" in case no     *
*                                               data present          *
*---------------------------------------------------------------------*
REPORT zcm_sm35_exp_batch_sessions.

FORM get_config
              TABLES lt_input  STRUCTURE tab512
                     lt_output STRUCTURE tab512.

  CONSTANTS: lc_sep       TYPE c        VALUE '|',
             lc_export    TYPE char20   VALUE 'EXPORT',
             lc_tabname   TYPE char80   VALUE
                          'SM35 Session Details',
             lc_nodata    TYPE char20 VALUE 'No data found',
             lc_error     TYPE char20 VALUE 'Errors',
             lc_session   TYPE char20 VALUE 'Session Name',
             lc_status    TYPE char20 VALUE 'Status',
             lc_usrid     TYPE char20 VALUE 'Created By',
             lc_date      TYPE char20 VALUE 'Date',
             lc_time      TYPE char20 VALUE 'Time',
             lc_prgm      TYPE char20 VALUE 'Creation Program',
             lc_lock      TYPE char20 VALUE 'Lock Date',
             lc_autho     TYPE char20 VALUE 'Authorizat',
             lc_trans     TYPE char80 VALUE 'Transaction counter',
             lc_transe    TYPE char80 VALUE
             'Transaction counter Errors',
             lc_transf    TYPE char80 VALUE
             'Transaction counter Processed',
             lc_msgcnt    TYPE char20 VALUE 'Dynpros',
             lc_dele      TYPE char20 VALUE 'Deletion Ind',
             lc_queue     TYPE char20 VALUE 'Queue ID',
* Begin of changes in V001
             lc_noinput   TYPE c      VALUE
             'No input passed'                            LENGTH 15,
             lc_inc_input TYPE c      VALUE
             'Incorrect Input'                            LENGTH 20.
* End of changes in V001

  DATA: lt_apqi      TYPE STANDARD TABLE OF apqi,
        ls_apqi      TYPE apqi,
        ls_output    TYPE tab512,
        ls_prefinal  TYPE string,
        lv_transcnt  TYPE string,
        lv_transcnte TYPE string,
        lv_transcntf TYPE string,
        lv_action    TYPE char8,
        lv_msgcnt    TYPE string,
        ls_input     TYPE tab512.

  REFRESH: lt_apqi[].

  CLEAR: ls_apqi,
         ls_output,
         ls_prefinal,
         lv_transcnt,
         lv_transcnte,
         lv_transcntf,
         lv_msgcnt.

"Tabname title
    ls_output = lc_tabname.
    APPEND ls_output TO lt_output.
    CLEAR ls_output.

  " Read action required from Python interface
  READ TABLE lt_input INTO ls_input INDEX 1.

* Begin of changes in V001
  IF sy-subrc NE 0.
    ls_output = lc_noinput.
    APPEND ls_output TO lt_output.
    CLEAR ls_output.
    RETURN.
  ENDIF.
* End of changes in V001

  lv_action = ls_input.

  CASE lv_action.

    WHEN lc_export.

      SELECT * FROM apqi INTO TABLE lt_apqi
        WHERE qstate NE space.
      IF sy-subrc = 0.

        "Column Heading
        CLEAR: ls_output.
        CONCATENATE lc_session  lc_sep
                    lc_status   lc_sep
                    lc_usrid    lc_sep
                    lc_date     lc_sep
                    lc_time     lc_sep
                    lc_prgm     lc_sep
                    lc_lock     lc_sep
                    lc_autho    lc_sep
                    lc_trans    lc_sep
                    lc_transe   lc_sep
                    lc_transf   lc_sep
                    lc_msgcnt   lc_sep
                    lc_dele     lc_sep
                    lc_queue    INTO ls_output.
        APPEND ls_output TO lt_output.
        CLEAR: ls_output.
        "Item data
        LOOP AT lt_apqi INTO ls_apqi.
          lv_transcnt = ls_apqi-transcnt.
          lv_transcnte =   ls_apqi-transcnte.
          lv_transcntf =  ls_apqi-transcntf.
          lv_msgcnt     = ls_apqi-msgcnt.

          CONCATENATE ls_apqi-groupid     lc_sep
                      lc_error            lc_sep
                      ls_apqi-creator     lc_sep
                      ls_apqi-credate     lc_sep
                      ls_apqi-cretime     lc_sep
                      ls_apqi-progid      lc_sep
                      ls_apqi-startdate   lc_sep
                      ls_apqi-userid      lc_sep
                      lv_transcnt         lc_sep
                      lv_transcnte        lc_sep
                      lv_transcntf        lc_sep
                      lv_msgcnt           lc_sep
                      ls_apqi-qerase      lc_sep
                      ls_apqi-qid INTO ls_prefinal.

          PERFORM end_null_check CHANGING ls_prefinal.
          ls_output = ls_prefinal.
          APPEND ls_output TO lt_output.
          CLEAR: ls_apqi,
             ls_output,
             ls_prefinal,
             lv_transcnt,
             lv_transcnte,
             lv_transcntf,
             lv_msgcnt.
        ENDLOOP.
        PERFORM null_check TABLES  lt_output.
      ELSE.
        ls_output = lc_nodata.
        APPEND ls_output TO lt_output.
      ENDIF.

    WHEN OTHERS.
* Begin of changes in V001
      ls_output = lc_inc_input. "Incorrect input
      APPEND ls_output TO lt_output.
      CLEAR ls_output.
*  End of changes in V001

  ENDCASE.
ENDFORM.

FORM null_check  TABLES   lt_table TYPE table.

  DO .
    REPLACE ALL OCCURRENCES OF SUBSTRING '||'
    IN TABLE lt_table WITH '|NULL|'.
    FIND '||' IN TABLE lt_table.
    IF sy-subrc <> 0.
      EXIT .
    ENDIF.
  ENDDO.

ENDFORM.
FORM end_null_check CHANGING ls_string TYPE string.

  DATA lv_last_char TYPE char1.

  lv_last_char = substring( val = ls_string
                   off = strlen( ls_string ) - 1
                   len = 1 ).
  IF lv_last_char = '|'.
    CONCATENATE ls_string 'NULL'
      INTO ls_string.
  ENDIF.

ENDFORM.