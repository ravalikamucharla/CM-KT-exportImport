*---------------------------------------------------------------------*
* Program Name        :  ZCM_DB2_TOP_TABLES_EXP_RCNT                  *
* Title               :  Top Tables for DB2 Database                  *
* Purpose             :  This report is used to fetch top 100 tables  *
*                     :   in the system                               *
*---------------------------------------------------------------------*
* Related Transaction OR Standard Program References                  *
* DBACOCKPIT                                                          *
*---------------------------------------------------------------------*
*Tables              :   SELECT    UPDATE      INSERT      DELETE     *
* XXXXX                     X                                         *
*---------------------------------------------------------------------*
* Program Change History                                              *
*---------------------------------------------------------------------*
*Date        Version   Author         TR#/Local     Description       *
*---------------------------------------------------------------------*
*11-29-2022  Initial   Yasaswini K   Local   To fetch top 100 tables  *
*                                            in the syatem based on   *
*                                            row count                *
*---------------------------------------------------------------------*

REPORT zcm_db2_top_tables_exp_rcnt.

LOAD-OF-PROGRAM.

FORM get_config
               TABLES lt_input  STRUCTURE tab512
                      lt_output STRUCTURE tab512.

  TYPES :BEGIN OF lty_tables,
           schema  TYPE string,
           tabname TYPE string,
           rows    TYPE string,
           time    TYPE string,
         END OF lty_tables.

  CONSTANTS: lc_sep        TYPE c VALUE '|'                   LENGTH 1,
             lc_eqs        TYPE c VALUE '='                   LENGTH 1,
             lc_top        TYPE c VALUE 'Top'                 LENGTH 3,
             lc_all        TYPE c VALUE '***'                 LENGTH 3,
             lc_fetch      TYPE c VALUE 'FETCH'               LENGTH 5,
             lc_table_name TYPE c VALUE 'Table name'          LENGTH 10,
             lc_schema     TYPE c VALUE 'Schema name'         LENGTH 15,
             lc_tabschema  TYPE c VALUE 'TABSCHEMA'           LENGTH 10,
             lc_tabname    TYPE c VALUE 'TABNAME'             LENGTH 7,
             lc_comma      TYPE c VALUE ','                   LENGTH 1,
             lc_card       TYPE c VALUE 'CARD'                LENGTH 4,
             lc_statstime  TYPE c VALUE 'STATS_TIME'          LENGTH 10,
             lc_rows       TYPE c VALUE 'Rows'                LENGTH 4,
             lc_time       TYPE c VALUE 'Stats Time'          LENGTH 15,
             lc_title      TYPE c VALUE 'Large Tables'        LENGTH 15,
             lc_msgtitle   TYPE c VALUE
             'Top tables for DB2'                             LENGTH 20,
             lc_inc_input  TYPE c VALUE 'Incorrect input'     LENGTH 20,
             lc_noinput    TYPE c VALUE 'No input given'      LENGTH 20,
             lc_err_msg    TYPE c VALUE 'No data found'       LENGTH 20.

  DATA: ls_input              TYPE tab512,
        ls_output             TYPE tab512,
        lv_action             TYPE char10,
        lv_num_tab            TYPE char10,
        lv_error              TYPE string,
        lv_dbschema           TYPE char16,
        lo_exec               TYPE REF TO cx_db6_sys,
        lv_sysid              TYPE sy-sysid,
        lv_sql_stmt           TYPE string,
        lt_top_tables         TYPE STANDARD TABLE OF lty_tables,
        lt_tables             TYPE STANDARD TABLE OF lty_tables,
        lt_schema             TYPE STANDARD TABLE OF hdb_schema_name,
        ls_schema             TYPE hdb_schema_name,
        ls_top_tables         TYPE lty_tables,
        lt_table              TYPE db6_editor_list,
        lv_one_column_per_row TYPE abap_bool,
        lo_db6_clp            TYPE REF TO cl_db6_clp,
        lo_db6_sys            TYPE REF TO cl_db6_sys,
        ls_table              TYPE db6_editor_line,
        lv_lines              TYPE i,
        lv_data               TYPE string,
        lv_schema             TYPE string,
        lv_name               TYPE string.

  CLEAR: ls_output, ls_input, lv_action, lv_num_tab, lv_sysid,
         lv_sql_stmt, lv_lines, ls_table.

  "Title
  ls_output = lc_msgtitle.
  APPEND ls_output TO lt_output.
  CLEAR ls_output.

  " Read input file from Python
  READ TABLE lt_input INTO ls_input INDEX 1.

  IF sy-subrc NE 0.
    " No input given
    ls_output = lc_noinput.
    APPEND ls_output TO lt_output.
    CLEAR ls_output.
    RETURN.
  ENDIF.

  SPLIT ls_input AT lc_sep INTO
  lv_action       " Action
  lv_num_tab      " Number of tables to be fetched
  lv_schema.      " Schema

  CASE lv_action.

    WHEN lc_fetch.

      IF lv_schema IS INITIAL.

        CALL FUNCTION 'DB_DBSCHEMA_CURRENT'
          IMPORTING
            dbschema = lv_dbschema.

        IF sy-subrc = 0.
          lv_schema = lv_dbschema.
        ENDIF.

      ENDIF.

      SPLIT lv_schema AT lc_comma INTO TABLE lt_schema.

      CONCATENATE 'select tabschema,'
                  'tabname,'
                  'card,'
'stats_time from syscat.tables order by card desc'
INTO lv_sql_stmt SEPARATED BY space.

      " Fm to get system id
      CALL FUNCTION 'MSS_GET_SY_SYSID'
        IMPORTING
          sapsysid = lv_sysid.

      TRY.
          " To get the reference of class cl_db6_sys
          cl_db6_sys=>get_sys_ref(
          EXPORTING
            system_id     = lv_sysid
            RECEIVING
            sys_ref       = lo_db6_sys ).

        CATCH cx_db6_sys INTO lo_exec.

          lv_error = lo_exec->if_message~get_text( ).
          ls_output = lv_error.
          APPEND ls_output TO lt_output.
          CLEAR: lv_error, ls_output.
          RETURN.
      ENDTRY.

      IF lo_db6_sys IS BOUND.

        " Creating object of class cl_db6_clp
        CREATE OBJECT lo_db6_clp
          EXPORTING
            sys_ref = lo_db6_sys.

        lv_one_column_per_row = abap_true.

        " Here we execute the query and get the output
        lt_table = cl_db6_clp=>execute( sys_ref = lo_db6_sys
        one_column_per_row = lv_one_column_per_row
        command = lv_sql_stmt ).

      ENDIF.

      FREE: lt_output.

      " Adding title to the output
      CONCATENATE lc_top lv_num_tab lc_title
      INTO ls_output SEPARATED BY space.
      APPEND ls_output TO lt_output.

      IF lt_table IS NOT INITIAL.

        " Adding heading to the output
        CONCATENATE lc_schema  lc_sep
        lc_table_name lc_sep
        lc_rows       lc_sep
        lc_time
        INTO ls_output.

        APPEND ls_output TO lt_output.
        CLEAR: ls_output.

        " To delete empty space lines from the output
        DELETE lt_table WHERE table_line IS INITIAL.

        lv_num_tab = lv_num_tab + 1.

        lv_lines = lv_num_tab.

        " To delete heading from the output
        DELETE lt_table INDEX 1.

        LOOP AT lt_table INTO ls_table.

          CONDENSE ls_table.

          IF ls_table(3) NE lc_all.

            SPLIT ls_table AT lc_eqs INTO lv_name lv_data.

            CONDENSE lv_name.
            CONDENSE lv_data.

            IF lv_name = lc_tabschema.
              ls_top_tables-schema = lv_data.
            ENDIF.

            IF lv_name = lc_tabname.
              ls_top_tables-tabname = lv_data.
            ENDIF.

            IF lv_name = lc_card.
              ls_top_tables-rows = lv_data.
            ENDIF.

            IF lv_name = lc_statstime.
              ls_top_tables-time = lv_data.
            ENDIF.
          ELSE.
            APPEND ls_top_tables TO lt_top_tables.
            CLEAR ls_top_tables.
          ENDIF.

          CLEAR: lv_data, lv_name, ls_table.

        ENDLOOP.

        lt_tables[] = lt_top_tables[].

        LOOP AT lt_schema INTO ls_schema.
        DELETE lt_tables WHERE schema NE ls_schema.
        CLEAR: ls_schema.
        ENDLOOP.

        DELETE lt_tables FROM lv_lines.

        LOOP AT lt_tables INTO ls_top_tables.
          CONCATENATE ls_top_tables-schema ls_top_tables-tabname
                      ls_top_tables-rows ls_top_tables-time
                      INTO ls_output SEPARATED BY lc_sep.
          APPEND ls_output TO lt_output.
          CLEAR: ls_output, ls_top_tables.
        ENDLOOP.

      ELSE.
        " No records found
        ls_output = lc_err_msg.
        APPEND ls_output TO lt_output.
        CLEAR ls_output.
      ENDIF.

    WHEN OTHERS.
      " Incorrect input
      ls_output = lc_inc_input.
      APPEND ls_output TO lt_output.
      CLEAR ls_output.

  ENDCASE.
ENDFORM.