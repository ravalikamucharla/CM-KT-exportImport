*---------------------------------------------------------------------*
* Program Name        :  ZCM_WE20_EXP_PART_PROFILE_HVER               *
* Title               :  Logical Systems                              *
* Purpose             :  To export partner profile data from standard *
*                        tables
*---------------------------------------------------------------------*
* Related Transaction OR Standard Program References                  *
* WE20                                                                *
*---------------------------------------------------------------------*
* Tables              :   SELECT    UPDATE      INSERT      DELETE    *
* EDPP1                    X                                          *
* EDP13                    X                                          *
* EDP12                    X                                          *
* EDP21                    X                                          *
* EDIPHONE                 X                                          *
* EDP21OPTIONS             X                                          *
*---------------------------------------------------------------------*
* Program Change History                                              *
*---------------------------------------------------------------------*
*Date        Version   Author       TR#/Local     Description         *
*---------------------------------------------------------------------*
*09-07-2020  Initial   Soumya Ray   Local         To fetch details of *
*                                                 Partner profile     *
*10-05-2021  V001      Soumya Ray   Local         To get headings of  *
*                                                 tables in english   *
*04-05-2022  V002      Soumya Ray   Local      To correct the message *
*                                                 in case of no data  *
*---------------------------------------------------------------------*


REPORT zcm_we20_exp_part_profile_hver.

LOAD-OF-PROGRAM.

  TYPES: gtt_edmat TYPE STANDARD TABLE OF edmat,
         gtt_tedtt TYPE STANDARD TABLE OF tedtt,
         gtt_t777o TYPE STANDARD TABLE OF t777o.

  CONSTANTS: gc_edpp1        TYPE tabname VALUE 'EDPP1',
             gc_edp13        TYPE tabname VALUE 'EDP13',
             gc_edp12        TYPE tabname VALUE 'EDP12',
             gc_edp21        TYPE tabname VALUE 'EDP21',
             gc_ediphone     TYPE tabname VALUE 'EDIPHONE',
             gc_edp21options TYPE tabname VALUE 'EDP21OPTIONS'.

FORM get_config
               TABLES lt_input  STRUCTURE tab512
                      lt_output STRUCTURE tab512.

  CONSTANTS:
             lc_langu     TYPE c VALUE 'E'       LENGTH 1,
             lc_msgtitl   TYPE c VALUE
             'Partner Profile export'            LENGTH 40,
             lc_noinput   TYPE c VALUE
             'No input passed'                   LENGTH 20,
             lc_export    TYPE c VALUE 'EXPORT'  LENGTH 6,
* Begin of changes in V002
             lc_inc_input TYPE c   VALUE
             'Incorrect input'                   LENGTH 20.
* Endof changes in V002

  DATA: ls_output   TYPE tab512,
        ls_input    TYPE tab512,
        lv_action   TYPE string,
        lt_tedtt    TYPE STANDARD TABLE OF tedtt,
        lt_edmat    TYPE STANDARD TABLE OF edmat,
        lt_t779o    TYPE STANDARD TABLE OF t779o,
        lt_t777o    TYPE STANDARD TABLE OF t777o.

  " Read action required from Python interface
  READ TABLE lt_input INTO ls_input INDEX 1.
  IF sy-subrc NE 0.
    "No input passed
    ls_output = lc_msgtitl. "Title
    APPEND ls_output TO lt_output.
    CLEAR ls_output.
    ls_output = lc_noinput.
    APPEND ls_output TO lt_output.
    CLEAR ls_output.
    RETURN.
  ENDIF.
  lv_action = ls_input.

  CASE lv_action.

    WHEN lc_export. "EXPORT
      "Fetch Partner status description text
      SELECT * FROM edmat INTO TABLE lt_edmat
      WHERE langua  = lc_langu.
      IF NOT lt_edmat[] IS INITIAL.
        SORT lt_edmat BY matlvl ASCENDING.
      ENDIF.
      "Fetch Partner Type description text
      SELECT * FROM tedtt INTO TABLE lt_tedtt
      WHERE langu = lc_langu.
      IF NOT lt_tedtt[] IS INITIAL.
        SORT lt_tedtt BY rcvprt ASCENDING.
      ENDIF.

      "Fetch User Type description text
      SELECT * FROM t779o INTO TABLE lt_t779o.
      IF NOT lt_t779o[] IS INITIAL.
        SORT lt_t779o BY otype ASCENDING.

        SELECT * FROM t777o INTO TABLE lt_t777o
        FOR ALL ENTRIES IN lt_t779o
        WHERE langu = lc_langu
        AND otype = lt_t779o-otype.
        IF sy-subrc EQ 0.
          SORT lt_t777o BY otype ASCENDING.
        ENDIF.
      ENDIF.

      "Read entries from EDPP1 table
      PERFORM read_data TABLES lt_output
      USING gc_edpp1
            lt_edmat[]
            lt_tedtt[]
            lt_t777o[]
      CHANGING ls_output .

      "Blank line between tables
      CLEAR ls_output.
      APPEND ls_output TO lt_output.
      "Read entries from EDP13 table
      PERFORM read_data TABLES lt_output
      USING gc_edp13
            lt_edmat[]
            lt_tedtt[]
            lt_t777o[]
      CHANGING ls_output .

      "Blank line between tables
      CLEAR ls_output.
      APPEND ls_output TO lt_output.
      "Read entries from EDP12 table
      PERFORM read_data TABLES lt_output
      USING gc_edp12
            lt_edmat[]
            lt_tedtt[]
            lt_t777o[]
      CHANGING ls_output .

      "Blank line between tables
      CLEAR ls_output.
      APPEND ls_output TO lt_output.
      "Read entries from EDP21 table
      PERFORM read_data TABLES lt_output
      USING gc_edp21
            lt_edmat[]
            lt_tedtt[]
            lt_t777o[]
      CHANGING ls_output .

      "Blank line between tables
      CLEAR ls_output.
      APPEND ls_output TO lt_output.
      "Read entries from EDIPHONE table
      PERFORM read_data TABLES lt_output
      USING gc_ediphone
            lt_edmat[]
            lt_tedtt[]
            lt_t777o[]
      CHANGING ls_output .

      "Blank line between tables
      CLEAR ls_output.
      APPEND ls_output TO lt_output.
      PERFORM null_check TABLES  lt_output.

      "Read entries from EDP21OPTIONS table
      PERFORM read_data TABLES lt_output
      USING gc_edp21options
            lt_edmat[]
            lt_tedtt[]
            lt_t777o[]
      CHANGING ls_output .
*  Begin of changes in V002
    WHEN OTHERS.

      ls_output = lc_msgtitl. "Title
      APPEND ls_output TO lt_output.
      CLEAR ls_output.

      ls_output = lc_inc_input. "Incorrect input
      APPEND ls_output TO lt_output.
      CLEAR ls_output.
*  End of changes in V002
  ENDCASE.
  IF lt_output[] IS NOT INITIAL.
    PERFORM null_check TABLES  lt_output.
  ENDIF.

ENDFORM.

FORM read_data  TABLES lt_output    TYPE table
                USING  iv_tablename TYPE tabname
                       lt_edmat     TYPE gtt_edmat
                       lt_tedtt     TYPE gtt_tedtt
                       lt_t777o     TYPE gtt_t777o
              CHANGING ls_output    TYPE tab512.

  CONSTANTS: lc_sep         TYPE c      VALUE'|'         LENGTH 1,
             lc_langu       TYPE c      VALUE 'E'        LENGTH 1,
             lc_noheader    TYPE c      VALUE
             'Header is not fetched'                     LENGTH 30,
             lc_partyp_txt  TYPE c      VALUE
             'Partn.Type_text'                           LENGTH 15,
             lc_usrtyp_txt  TYPE c      VALUE
             'User Type_text'                            LENGTH 15,
             lc_partsta_txt TYPE c      VALUE
             'Partn.status_text'                         LENGTH 20,
             lc_outmd_txt   TYPE  c     VALUE
             'Outputmode_text'                           LENGTH 30,
             lc_pfnmod_txt  TYPE c      VALUE
             'Processingbyfunctionmodule_text'           LENGTH 50,
             lc_set         TYPE ddrefstruc-bool  VALUE 'X',
             lc_edioutmod   TYPE dd07l-domname    VALUE 'EDI_OUTMOD',
             lc_edipinmod   TYPE dd07l-domname    VALUE 'EDIPINMOD',
             lc_langu_en    TYPE sy-langu VALUE 'E', "+V001
* Begin of changes in V002
             lc_msg_nodata  TYPE c VALUE
             'No data found'                             LENGTH 20.
* End of changes in V002

  FIELD-SYMBOLS : <ft_table>     TYPE STANDARD TABLE,
                  <fs_edpp1>     TYPE edpp1,
                  <fs_edp13>     TYPE edp13,
                  <fs_edp21>     TYPE edp21,
                  <fs_structure> TYPE any,
                  <comp>         TYPE any.
  DATA: lt_table    TYPE REF TO data,
        ls_prefinal TYPE string,
        lv_tabname  TYPE ddobjname,
        ls_header   TYPE dfies,
        lt_header   TYPE STANDARD TABLE OF dfies,
        ls_tedtt    TYPE tedtt,
        ls_edmat    TYPE edmat,
        ls_t777o    TYPE t777o,
        lv_langu    TYPE dd07t-ddlanguage,
        ls_values   TYPE dd07v,
        lt_values   TYPE STANDARD TABLE OF dd07v.

  CLEAR: lv_tabname, ls_header, ls_prefinal, ls_tedtt, ls_edmat,
  ls_t777o, lv_tabname, lv_langu, ls_values.
  FREE: lt_table, lt_header, lt_values.
  CREATE DATA lt_table TYPE TABLE OF (iv_tablename).


  ASSIGN lt_table->* TO <ft_table>.

  "Table Name
  ls_output = iv_tablename.
  APPEND ls_output TO lt_output.

  SELECT * FROM (iv_tablename) INTO TABLE <ft_table>.
  IF sy-subrc <> 0.
    ls_output = lc_msg_nodata.
    APPEND ls_output TO lt_output.
    RETURN.
  ENDIF.

  lv_tabname = iv_tablename.
  CALL FUNCTION 'DDIF_FIELDINFO_GET'
    EXPORTING
      tabname        = lv_tabname
      langu          = lc_langu_en
    TABLES
      dfies_tab      = lt_header
    EXCEPTIONS
      not_found      = 1
      internal_error = 2
      OTHERS         = 3.
  IF sy-subrc <> 0.
    ls_output = lc_noheader.
    APPEND ls_output TO lt_output.
    CLEAR ls_output.
    RETURN.
  ENDIF.
  LOOP AT lt_header INTO ls_header.
    IF ls_header-scrtext_l EQ ''.
      ls_header-scrtext_l = ls_header-scrtext_s.
    ENDIF.
    CONCATENATE ls_prefinal ls_header-scrtext_l lc_sep
    INTO ls_prefinal.
  ENDLOOP.

  " To get heading text for specific fields which is not a table field
  CASE lv_tabname.
    WHEN gc_edpp1. "EDPP1
      CONCATENATE ls_prefinal lc_partyp_txt lc_sep lc_usrtyp_txt
      lc_sep lc_partsta_txt lc_sep INTO ls_prefinal.
    WHEN gc_edp13. "EDP13
      CONCATENATE ls_prefinal lc_outmd_txt lc_sep lc_usrtyp_txt
      lc_sep INTO ls_prefinal.
      "Fetch output mode description
      CALL FUNCTION 'DD_DOMVALUES_GET'
        EXPORTING
          domname        = lc_edioutmod
          text           = lc_set
          langu          = lv_langu
        TABLES
          dd07v_tab      = lt_values
        EXCEPTIONS
          wrong_textflag = 1
          OTHERS         = 2.
    WHEN gc_edp21. "EDP21
      CONCATENATE ls_prefinal lc_pfnmod_txt lc_sep lc_usrtyp_txt
      lc_sep INTO ls_prefinal.
      "Fetch output mode description
      CALL FUNCTION 'DD_DOMVALUES_GET'
        EXPORTING
          domname        = lc_edipinmod
          text           = lc_set
          langu          = lv_langu
        TABLES
          dd07v_tab      = lt_values
        EXCEPTIONS
          wrong_textflag = 1
          OTHERS         = 2.
    WHEN OTHERS.

  ENDCASE.


  ls_prefinal = shift_right( val = ls_prefinal  places = 1 ).
  ls_output = ls_prefinal.
  APPEND ls_output TO lt_output.
  CLEAR: ls_output, ls_prefinal.

  "Table data
  LOOP AT <ft_table> ASSIGNING <fs_structure>.
    CLEAR: ls_edmat, ls_t777o, ls_tedtt, ls_output, ls_prefinal,
    ls_values.
    DO .
      ASSIGN COMPONENT sy-index OF STRUCTURE <fs_structure>
      TO <comp>.
      IF sy-subrc <> 0.
        EXIT .
      ENDIF.
      CONCATENATE ls_prefinal <comp> '|' INTO ls_prefinal.
    ENDDO.
    " To get descriptiontext for specific fields
    CASE lv_tabname.
      WHEN gc_edpp1. "EDPP1
        READ TABLE <ft_table> ASSIGNING <fs_edpp1> INDEX sy-tabix.
        IF sy-subrc EQ 0.
          "Read Partner Type description
          READ TABLE lt_tedtt INTO ls_tedtt
          WITH KEY rcvprt = <fs_edpp1>-partyp.
          IF sy-subrc NE 0.
            CLEAR ls_tedtt.
          ENDIF.
          "Read User Type description
          READ TABLE lt_t777o INTO ls_t777o
          WITH KEY otype = <fs_edpp1>-usrtyp.
          IF sy-subrc NE 0.
            CLEAR ls_t777o.
          ENDIF.
          "Read Partner status description
          READ TABLE lt_edmat INTO ls_edmat
          WITH KEY matlvl = <fs_edpp1>-matlvl.
          IF sy-subrc NE 0.
            CLEAR ls_edmat.
          ENDIF.
          CONCATENATE ls_prefinal ls_tedtt-descrp lc_sep ls_t777o-otext
          lc_sep ls_edmat-desc_l lc_sep INTO ls_prefinal.
        ENDIF.

      WHEN gc_edp13."EDP13
        READ TABLE <ft_table> ASSIGNING <fs_edp13> INDEX sy-tabix.
        IF sy-subrc EQ 0.
          "Read Output Mode description
          lv_langu = lc_langu.
          READ TABLE lt_values INTO ls_values
          WITH KEY domvalue_l = <fs_edp13>-outmod.
          IF sy-subrc NE 0.
            CLEAR ls_values.
          ENDIF.
          "Read User Type description
          READ TABLE lt_t777o INTO ls_t777o
          WITH KEY otype = <fs_edp13>-usrtyp.
          IF sy-subrc NE 0.
            CLEAR ls_t777o.
          ENDIF.

          CONCATENATE ls_prefinal ls_values-ddtext lc_sep
          ls_t777o-otext lc_sep INTO ls_prefinal.
        ENDIF.
      WHEN gc_edp21."EDP21
        READ TABLE <ft_table> ASSIGNING <fs_edp21> INDEX sy-tabix.
        IF sy-subrc EQ 0.
          "Read Output Mode description
          READ TABLE lt_values INTO ls_values
          WITH KEY domvalue_l = <fs_edp21>-inmod.
          IF sy-subrc NE 0.
            CLEAR ls_values.
          ENDIF.
          "Read User Type description
          READ TABLE lt_t777o INTO ls_t777o
          WITH KEY otype = <fs_edp21>-usrtyp.
          IF sy-subrc NE 0.
            CLEAR ls_t777o.
          ENDIF.
          CONCATENATE ls_prefinal ls_values-ddtext lc_sep
          ls_t777o-otext lc_sep INTO ls_prefinal.
        ENDIF.

      WHEN OTHERS.

    ENDCASE.
    ls_prefinal = shift_right( val = ls_prefinal  places = 1 ).

    PERFORM end_null_check CHANGING ls_prefinal.
    ls_output = ls_prefinal.
    APPEND ls_output TO lt_output.

  ENDLOOP.

ENDFORM.

FORM end_null_check  CHANGING ls_string TYPE string.

  DATA lv_last_char TYPE char1.

  lv_last_char = substring( val = ls_string
  off = strlen( ls_string ) - 1
  len = 1 ).
  IF lv_last_char = '|'.
    CONCATENATE ls_string 'NULL'
    INTO ls_string.
  ENDIF.

ENDFORM.

FORM null_check  TABLES   lt_table TYPE table.

  DO .
    REPLACE ALL OCCURRENCES OF SUBSTRING '||'
    IN TABLE lt_table WITH '|NULL|'.
    FIND '||' IN TABLE lt_table.
    IF sy-subrc <> 0.
      EXIT .
    ENDIF.
  ENDDO.

ENDFORM.