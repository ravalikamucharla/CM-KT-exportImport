*---------------------------------------------------------------------*
* Program Name        :   ZCM_ST22_EXP_RUNTIME_ERRORS                 *
* Title               :   Capture Dumps in ST22                       *
* Purpose             :   This report is used to Export Dumps during  *
*                         Cloud Migration                             *
*---------------------------------------------------------------------*
* Related Transaction OR Standard Program References                  *
* ST22/RSSHOWRABAX                                                    *
*---------------------------------------------------------------------*
* Tables              :   SELECT    UPDATE      INSERT      DELETE    *
* SNAP                      X                                         *
*---------------------------------------------------------------------*
* Program Change History                                              *
*---------------------------------------------------------------------*
*Date        Version   Author       TR#/Local     Description         *
*---------------------------------------------------------------------*
*08-24-2020  Initial  Ruchir Kamble  Local    To capture dumps in ST22*
*07-25-2022  V001     Soumya Ray     Local    To pass message "No data*
*                                             found" in case of no    *
*                                             data found in sysytem   *
*---------------------------------------------------------------------*

" Code referred from report RSSHOWRABAX subroutine SELECT_SNAP_BEG

REPORT zcm_st22_exp_runtime_errors.

LOAD-OF-PROGRAM.

FORM get_config
              TABLES lt_input  STRUCTURE tab512
                     lt_output STRUCTURE tab512.

  DATA: BEGIN OF lt_struc,
          id(2)    TYPE c,
          len(3)   TYPE c,
          text(50) TYPE c,
        END OF lt_struc.
* Begin of changes in V001
  TYPES: BEGIN OF lty_datum,
          sign   TYPE c LENGTH 1,
          option TYPE c LENGTH 2,
          low    TYPE sydatum,
          high   TYPE sydatum,
        END OF lty_datum.
* End of changes in V001

  CONSTANTS:
    lc_sep               TYPE c VALUE '|'                 LENGTH 1,
    lc_dump_id           TYPE c VALUE 'FC'                LENGTH 2,
    lc_dump_exception    TYPE c VALUE 'XC'                LENGTH 2,
    lc_yes               TYPE c VALUE 'X'                 LENGTH 1,
    lc_no                TYPE c VALUE space               LENGTH 1,
    lc_dump_program      TYPE c VALUE 'AP'                LENGTH 2,
    lc_dump_tid          TYPE c VALUE 'TD'                LENGTH 2,
    lc_dump_eeprootid    TYPE c VALUE 'GX'                LENGTH 2,
    lc_dump_eepconnid    TYPE c VALUE 'VX'                LENGTH 2,
    lc_dump_eepcalcnt    TYPE c VALUE 'AX'                LENGTH 2,
    lc_dump_krnproj_path TYPE c VALUE 'CM'                LENGTH 2,
    lc_050               TYPE c VALUE '050'               LENGTH 3,
    lc_000               TYPE c VALUE '000'               LENGTH 3,
    lc_len               TYPE c VALUE '0123456789'        LENGTH 10,
    lc_ques              TYPE c VALUE '?????'             LENGTH 5,
    lc_null              TYPE c VALUE 'NULL'              LENGTH 4,
    lc_export            TYPE c VALUE 'EXPORT'            LENGTH 6,
    lc_date              TYPE c VALUE 'CurrentDate'       LENGTH 15,
    lc_time              TYPE c VALUE 'Time'              LENGTH 4,
    lc_app_server        TYPE c VALUE 'ApplicationServer' LENGTH 25,
    lc_user              TYPE c VALUE 'User'              LENGTH 4,
    lc_client_id         TYPE c VALUE 'ClientID'          LENGTH 15,
    lc_keep              TYPE c VALUE 'Keep'              LENGTH 4,
    lc_runtime           TYPE c VALUE 'RuntimeError'      LENGTH 14,
    lc_exception         TYPE c VALUE 'Exception'         LENGTH 12,
    lc_canc_prog         TYPE c VALUE 'CanceledProgram'   LENGTH 25,
    lc_wp_index          TYPE c VALUE 'WPIndex'           LENGTH 10,
    lc_trans_id          TYPE c VALUE 'TransactionID'     LENGTH 20,
    lc_inc_input         TYPE c VALUE 'Incorrect input'   LENGTH 20,
    lc_noinput           TYPE c VALUE 'No input given'    LENGTH 20,
    lc_title             TYPE c VALUE
    'List of Runtime Errors'                              LENGTH 35,
*   Begin of changes in V001
    lc_err_msg           TYPE c VALUE
    'No data found'                                       LENGTH 20,
*   End of changes in V001
*   Begin of changes in V001
    lc_include           TYPE c      VALUE 'I'            LENGTH 1,
    lc_between           TYPE c      VALUE 'BT'           LENGTH 2.
*   End of changes in V001

  DATA : ls_input                      TYPE tab512,
         ls_output                     TYPE tab512,
         lv_action                     TYPE char10,
         lv_modno                      TYPE char4,
         lv_line                       TYPE c LENGTH 400,
         lv_pointer                    TYPE i,
         lv_end                        TYPE i,
         lv_struc_length               TYPE i,
         lv_l                          TYPE i,
         lv_l1                         TYPE i,
         lv_l2                         TYPE i,
         lv_dump_id_found(1)           TYPE c,
         lv_dump_program_found(1)      TYPE c,
         lv_dump_program_ok(1)         TYPE c,
         lv_dump_exception_found(1)    TYPE c,
         lv_dump_tid_ok(1)             TYPE c,
         lv_dump_eeprootid_ok(1)       TYPE c,
         lv_dump_krnproj_path_found(1) TYPE c,
         lv_dump_eepconnid_ok(1)       TYPE c,
         lv_dump_eepcalcnt_ok(1)       TYPE c,
         lt_snap                       TYPE STANDARD TABLE OF snap,
         lt_dump                       TYPE STANDARD TABLE OF rdumpov,
         ls_dump                       TYPE rdumpov,
*   Begin of changes in V001
         lv_caldate                    TYPE sy-datum,
         lv_days                       TYPE n,
         ls_datum                      TYPE lty_datum,
         lt_datum                      TYPE STANDARD TABLE OF lty_datum.
*   End of changes in V001

  FIELD-SYMBOLS: <fs_dump> TYPE any,
                 <fs_snap> TYPE snap.

  CLEAR: ls_output, ls_input, lv_action, lv_modno, lv_line,
         lv_pointer, lv_end, lv_struc_length, lv_l, lv_l1, lv_l2,
         lv_dump_id_found, lv_dump_program_found, lv_dump_program_ok,
         lv_dump_exception_found, lv_dump_tid_ok, lv_dump_eeprootid_ok,
         ls_dump, lv_dump_krnproj_path_found, lv_dump_eepconnid_ok,
         lv_dump_eepcalcnt_ok,
         lv_days, ls_datum, lv_caldate. "+V001

  FREE: lt_output, lt_snap, lt_dump, lt_struc,
  lt_datum. "+V001

  " Adding title to the output
  ls_output = lc_title.
  APPEND ls_output TO lt_output.
  CLEAR ls_output.

  READ TABLE lt_input INTO ls_input INDEX 1.
  IF sy-subrc EQ 0.
    SPLIT ls_input AT lc_sep INTO lv_action lv_days. "+V001
  ELSE.
    " No input given
    ls_output = lc_noinput.
    APPEND ls_output TO lt_output.
    CLEAR ls_output.
    RETURN.
  ENDIF.
  CASE lv_action.

    WHEN lc_export.                     " If action is EXPORT

      DESCRIBE FIELD lv_line LENGTH lv_l IN CHARACTER MODE.
      DESCRIBE FIELD lt_struc-id LENGTH lv_l1 IN CHARACTER MODE.
      DESCRIBE FIELD lt_struc-len LENGTH lv_l2 IN CHARACTER MODE.
      DESCRIBE FIELD lt_struc LENGTH lv_struc_length IN CHARACTER MODE.

      lv_end = lv_l - lv_struc_length.
* End of changes in V001

*     Retrieve failed tRFC data from ARFCSSTATE
      lv_caldate = sy-datum - lv_days.

      ls_datum-sign   = lc_include.
      ls_datum-option = lc_between.
      ls_datum-low    = lv_caldate.
      ls_datum-high   = sy-datum.
      APPEND ls_datum TO lt_datum.

* End of changes in V001

      SELECT * FROM snap
        INTO TABLE lt_snap
        WHERE seqno = lc_000 AND
        datum IN lt_datum "+V001
        ORDER BY datum
        DESCENDING uzeit
        DESCENDING ahost uname mandt modno.

      LOOP AT lt_snap ASSIGNING <fs_snap>.

        MOVE-CORRESPONDING <fs_snap> TO ls_dump.

        lv_line(200) = <fs_snap>-flist.
        lv_line+200 = <fs_snap>-flist02.

        WHILE lv_pointer < lv_end.

          lt_struc  = lv_line+lv_pointer(lv_struc_length).

          IF ( lt_struc-len CO lc_len )
            AND ( lt_struc-len <> lc_000 ) AND
           ( lt_struc-len < lc_050 ).

            ASSIGN lt_struc-text(lt_struc-len) TO <fs_dump>.

            CASE lt_struc-id.

              WHEN lc_dump_id.
                lv_dump_id_found = lc_yes.
                ls_dump-errorid = <fs_dump>.

              WHEN lc_dump_exception.
                lv_dump_exception_found = lc_yes.
                ls_dump-rexception = <fs_dump>.

              WHEN lc_dump_program.
                lv_dump_program_found = lc_yes.
                ls_dump-gprogram = <fs_dump>.
                lv_dump_program_ok = lc_yes.

              WHEN lc_dump_tid.
                ls_dump-tid = <fs_dump>.
                lv_dump_tid_ok = lc_yes.

              WHEN lc_dump_eeprootid.
                lv_dump_eeprootid_ok = lc_yes.

              WHEN lc_dump_eepconnid.
                lv_dump_eepconnid_ok = lc_yes.

              WHEN lc_dump_eepcalcnt.
                lv_dump_eepcalcnt_ok = lc_yes.

              WHEN lc_dump_krnproj_path.
                lv_dump_krnproj_path_found = lc_yes.

            ENDCASE.

          ELSE.         " Corrupted Dump !!!!


            lt_struc-text = lc_ques.

            IF lt_struc-len CO lc_len AND lt_struc-len <> lc_000.
              lv_pointer = lv_pointer + lv_l1 + lv_l2 + lt_struc-len.
              CONTINUE.
            ELSE.
              EXIT.
            ENDIF.

          ENDIF.

          IF ( lv_dump_id_found           = lc_yes  AND
               lv_dump_exception_found    = lc_yes  AND
               lv_dump_program_ok         = lc_yes  AND
               lv_dump_tid_ok             = lc_yes  AND
               lv_dump_eeprootid_ok       = lc_yes  AND
               lv_dump_eepconnid_ok       = lc_yes  AND
               lv_dump_eepcalcnt_ok       = lc_yes  AND
               lv_dump_krnproj_path_found = lc_yes ).
            EXIT.
          ENDIF.

          lv_pointer = lv_pointer + lv_l1 + lv_l2 + lt_struc-len.

        ENDWHILE.

        IF lv_dump_id_found = lc_no.
          ls_dump-errorid = lc_ques.
        ENDIF.

        IF lv_dump_program_found = lc_no.
          ls_dump-gprogram = lc_ques.
        ENDIF.

        APPEND ls_dump TO lt_dump.
        CLEAR: ls_dump, lv_pointer, lv_dump_program_ok,
               lv_dump_eeprootid_ok, lv_dump_eepconnid_ok,
               lv_dump_eepcalcnt_ok, lv_dump_exception_found,
               lv_dump_id_found, lv_dump_program_found,
               lv_dump_krnproj_path_found.
      ENDLOOP.

      IF lt_dump IS NOT INITIAL.

        " Adding headings to the output
        CONCATENATE lc_date       lc_sep
                    lc_time       lc_sep
                    lc_app_server lc_sep
                    lc_user       lc_sep
                    lc_client_id  lc_sep
                    lc_keep       lc_sep
                    lc_runtime    lc_sep
                    lc_exception  lc_sep
                    lc_canc_prog  lc_sep
                    lc_wp_index   lc_sep
                    lc_trans_id
                    INTO ls_output.
        APPEND ls_output TO lt_output.
        CLEAR ls_output.

        LOOP AT lt_dump INTO ls_dump.

          lv_modno = ls_dump-modno.

          IF ls_dump-rexception IS INITIAL.
            ls_dump-rexception = lc_null.
          ENDIF.

          CONCATENATE ls_dump-datum      lc_sep
                      ls_dump-uzeit      lc_sep
                      ls_dump-ahost      lc_sep
                      ls_dump-uname      lc_sep
                      ls_dump-mandt      lc_sep
                      ls_dump-xhold      lc_sep
                      ls_dump-errorid    lc_sep
                      ls_dump-rexception lc_sep
                      ls_dump-gprogram   lc_sep
                      lv_modno           lc_sep
                      ls_dump-tid
                    INTO ls_output.
          APPEND ls_output TO lt_output.
          CLEAR: ls_dump, ls_output, lv_modno.

        ENDLOOP.

      ELSE.
        " No Runtime Errors found in the system
        ls_output = lc_err_msg.
        APPEND ls_output TO lt_output.
        CLEAR ls_output.

      ENDIF.

    WHEN OTHERS.
      " Incorrect input
      ls_output = lc_inc_input.
      APPEND ls_output TO lt_output.
      CLEAR ls_output.

  ENDCASE.

  "Adding NULL values in between
  DO.
    REPLACE ALL OCCURRENCES OF SUBSTRING '||'
    IN TABLE lt_output WITH '|NULL|'.
    FIND '||' IN TABLE lt_output.
    IF sy-subrc <> 0.
      EXIT.
    ENDIF.
  ENDDO.

ENDFORM.