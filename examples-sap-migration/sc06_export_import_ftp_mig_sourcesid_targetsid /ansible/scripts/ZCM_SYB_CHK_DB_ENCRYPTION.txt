*---------------------------------------------------------------------*
* Program Name        :    ZCM_SYB_CHK_DB_ENCRYPTION                  *
* Title               :    Database Encryption Check for Sybase       *
* Purpose             :    This report is used to check if Database   *
*                          is encrypted or not from tcode DBACOCKPIT  *
*                          during Cloud Migration                     *
*---------------------------------------------------------------------*
* Related Transaction OR Standard Program References                  *
* DBACOCKPIT                                                          *
*---------------------------------------------------------------------*
*	Tables              :   SELECT    UPDATE      INSERT      DELETE    *
* XXXXX                     X                                         *
*---------------------------------------------------------------------*
* Program Change History                                              *
*---------------------------------------------------------------------*
*Date        Version   Author       TR#/Local     Description         *
*---------------------------------------------------------------------*
*11-19-2020  Initial   Ruchir Kamble Local       To check if Database *
*                                               is encrypted in Sybase*
*01-03-2022  V001      Soumya Ray    Local      To make the columns   *
*                                               of output consistent  *
*                                               across DB             *
*09-22-2022  V002     Soumya Ray     Local      To remove inline decla*
*                                               -rations              *
*---------------------------------------------------------------------*

REPORT zcm_syb_chk_db_encryption.

LOAD-OF-PROGRAM.

FORM get_config
               TABLES lt_input  STRUCTURE tab512
                      lt_output STRUCTURE tab512.

  CONSTANTS: lc_export     TYPE c VALUE 'EXPORT'           LENGTH 6,
             lc_title      TYPE c VALUE 'Database Check'   LENGTH 15,
             lc_err_msg    TYPE c VALUE 'No data found'    LENGTH 20,
             lc_isencrypt  TYPE c VALUE
             'Database is encrypted'                       LENGTH 25,
             lc_notencrypt TYPE c VALUE
             'Database is not encrypted'                   LENGTH 25,
             lc_p_encrypt  TYPE c VALUE
             'Database is partially encrypted'             LENGTH 35,
             lc_p_decrypt  TYPE c VALUE
             'Database is partially decrypted'             LENGTH 35,
             lc_b_encrypt  TYPE c VALUE
             'Database is being encrypted'                 LENGTH 35,
             lc_b_decrypt  TYPE c VALUE
             'Database is being decrypted'                 LENGTH 35,
*   Begin of changes in V001
             lc_ninput     TYPE C VALUE
             'No input passed'                             LENGTH 15,
             lc_inc_input  TYPE C VALUE
             'Incorrect input'                             LENGTH 20.
*   End of changes in V001

  DATA: ls_input    TYPE tab512,
        ls_output   TYPE tab512,
        lv_action   TYPE char10,
        lv_sql_stmt TYPE string,
        lv_dbid     TYPE char5,
        lv_result   TYPE string,
        lt_encrypt  TYPE db6_string_tab,
        lo_res      TYPE REF TO data,
        lo_sql_con  TYPE REF TO cl_sql_connection,
        lo_sql_stmt TYPE REF TO cl_sql_statement,
        lo_sql_excp TYPE REF TO cx_sql_exception,
        lo_sql_res  TYPE REF TO cl_sql_result_set,
        lv_msg      TYPE string. "+V002

  FIELD-SYMBOLS: <fs_encrypt> TYPE any. "+V002

  CLEAR: ls_input, lv_action, lv_dbid, ls_output, lv_result.
  FREE: lt_encrypt.
* Begin of changes in V001
  " Adding title to the output
  ls_output = lc_title.
  APPEND ls_output TO lt_output.
  CLEAR ls_output.
* End of changes in V001

  READ TABLE lt_input INTO ls_input INDEX 1.
* Begin of changes in V001
  IF sy-subrc NE 0.
    "No input passed
    ls_output = lc_ninput.
    APPEND ls_output TO lt_output.
    CLEAR ls_output.
    RETURN.
  ENDIF.
* End of changes in V001
  lv_action = ls_input.      " Action

  CASE lv_action.

    WHEN lc_export.               " When action is EXPORT

      " FM to fetch database name
      CALL FUNCTION 'DB_DBNAME'
        IMPORTING
          dbname = lv_dbid.

      " Build the SQL statement and execute it.
      CREATE OBJECT lo_sql_con.

      CREATE OBJECT lo_sql_stmt.

      TRY.
          lo_sql_stmt = lo_sql_con->create_statement( ).

          CONCATENATE 'select $EXEC( '
          ''''
          'select dbencryption_status('
          ''''
          'status'
          ''''
          ',db_id('
          ''''
          lv_dbid
          ''''
          '))'
          ''''
          ')'
          INTO lv_sql_stmt.
          lo_sql_res = lo_sql_stmt->execute_query( lv_sql_stmt ).

          GET REFERENCE OF lv_result INTO lo_res.
          lo_sql_res->set_param( lo_res ).
          WHILE lo_sql_res->next( ) > 0.
            APPEND lv_result TO lt_encrypt.
          ENDWHILE.
          lo_sql_res->close( ).

          IF lt_encrypt IS NOT INITIAL.

            DELETE lt_encrypt INDEX 1.

            READ TABLE lt_encrypt ASSIGNING
            <fs_encrypt> INDEX 1.

            IF <fs_encrypt> EQ 0.
              ls_output = lc_notencrypt.
              APPEND ls_output TO lt_output.

            ELSEIF <fs_encrypt> EQ 1.
              ls_output = lc_isencrypt.
              APPEND ls_output TO lt_output.

            ELSEIF <fs_encrypt> EQ 2.
              ls_output = lc_b_encrypt.
              APPEND ls_output TO lt_output.

            ELSEIF <fs_encrypt> EQ 3.
              ls_output = lc_p_encrypt.
              APPEND ls_output TO lt_output.

            ELSEIF <fs_encrypt> EQ 4.
              ls_output = lc_b_decrypt.
              APPEND ls_output TO lt_output.

            ELSEIF <fs_encrypt> EQ 5.
              ls_output = lc_p_decrypt.
              APPEND ls_output TO lt_output.
            ENDIF.

          ELSE.
            " No entries found
            ls_output = lc_err_msg.
            APPEND ls_output TO lt_output.
            CLEAR ls_output.
          ENDIF.

        CATCH cx_sql_exception INTO lo_sql_excp.
          lv_msg = lo_sql_excp->get_text( ).
          ls_output = lv_msg.
          APPEND ls_output TO lt_output.
          CLEAR ls_output.
          RETURN.

      ENDTRY.
      CLEAR: ls_input, lv_action, lv_dbid, ls_output, lv_result.
      FREE: lt_encrypt.
    WHEN OTHERS.
*  Begin of changes in V001
     ls_output = lc_inc_input. "Incorrect input
     APPEND ls_output TO lt_output.
     CLEAR ls_output.
*  End of changes in V001
  ENDCASE.
ENDFORM.