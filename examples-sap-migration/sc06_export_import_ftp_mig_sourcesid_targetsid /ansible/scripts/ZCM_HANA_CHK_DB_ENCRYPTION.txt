*---------------------------------------------------------------------*
* Program Name        :    ZCM_HANA_CHK_DB_ENCRYPTION                 *
* Title               :    Database Encryption Check for HANA Database*
* Purpose             :    This report is used to check if Database   *
*                          is encrypted or not from tcode DBACOCKPIT  *
*                          during Cloud Migration                     *
*---------------------------------------------------------------------*
* Related Transaction OR Standard Program References                  *
* DBACOCKPIT                                                          *
*---------------------------------------------------------------------*
* Tables              :   SELECT    UPDATE      INSERT      DELETE    *
* XXXXX                     X                                         *
*---------------------------------------------------------------------*
* Program Change History                                              *
*---------------------------------------------------------------------*
*Date        Version   Author       TR#/Local     Description         *
*---------------------------------------------------------------------*
*11-19-2020  Initial   Ruchir Kamble Local        To check if Database*
*                                                 is encrypted in HANA*
*01-03-2022  V001      Soumya Ray    Local        To make the columns *
*                                                 of output consistent*
*                                                 across DB           *
*09-28-2022  V002      Soumya Ray    Local        To remove inline dec*
*                                                 larations           *
*---------------------------------------------------------------------*

REPORT zcm_hana_chk_db_encryption.

LOAD-OF-PROGRAM.

FORM get_config
              TABLES lt_input  STRUCTURE tab512
                     lt_output STRUCTURE tab512.

  CONSTANTS: lc_true       TYPE c VALUE 'TRUE'             LENGTH 4,
             lc_false      TYPE c VALUE 'FALSE'            LENGTH 5,
             lc_export     TYPE c VALUE 'EXPORT'           LENGTH 6,
             lc_title      TYPE c VALUE 'Database Check'   LENGTH 15,
             lc_err_msg    TYPE c VALUE 'No data found'    LENGTH 20,
             lc_isencrypt  TYPE c VALUE
             'Database is encrypted'                       LENGTH 25,
             lc_notencrypt TYPE c VALUE
             'Database is not encrypted'                   LENGTH 25,
*   Begin of changes in V001
             lc_ninput     TYPE c VALUE
             'No input passed'                             LENGTH 15,
             lc_inc_input  TYPE c VALUE
             'Incorrect input'                             LENGTH 20.
*   End of changes in V001

  DATA: ls_input       TYPE tab512,
        ls_output      TYPE tab512,
        lv_action      TYPE char10,
        lv_sql_stmt    TYPE string,
        lv_encrypted   TYPE char5,
        r_metadata     TYPE REF TO data,
        r_tabletype    TYPE REF TO cl_abap_tabledescr,
        ex_structdescr TYPE REF TO cl_abap_structdescr,
        ex_result_ref  TYPE REF TO data,
        lo_structdescr TYPE REF TO cl_abap_structdescr,
        lo_structure   TYPE REF TO data,
        lo_sql_con     TYPE REF TO cl_sql_connection,
        lo_sql_stmt    TYPE REF TO cl_sql_statement,
        lo_sql_excp    TYPE REF TO cx_sql_exception,
        lt_metadata    TYPE adbc_rs_metadata_descr_tab,
        lo_sql_res     TYPE REF TO cl_sql_result_set,
* Begin of changes in V002
        lv_msg         TYPE string,
        lv_errmsg      TYPE string.
* End of changes in V002

  FIELD-SYMBOLS: <fs_table>       TYPE ANY TABLE,
* Begin of changes in V002
                 <fs_structure>   TYPE any,
                 <fs_encrypt_val> TYPE any,
                 <fs_encrypt>     TYPE any.
* End of changes in V002

  CLEAR: ls_input, lv_action,
         ls_output, lv_encrypted. "+V001
  FREE: lt_metadata. "+V001

* Begin of changes in V001
  " Database Check
  ls_output = lc_title.
  APPEND ls_output TO lt_output.
  CLEAR ls_output.
* End of changes in V001
  READ TABLE lt_input INTO ls_input INDEX 1.
* Begin of changes in V001
  IF sy-subrc NE 0.
    "No input passed
    ls_output = lc_ninput.
    APPEND ls_output TO lt_output.
    CLEAR ls_output.
    RETURN.
  ENDIF.
* End of changes in V001
  lv_action = ls_input.      " Action


  CASE lv_action.

    WHEN lc_export.               " When action is EXPORT

      CREATE OBJECT lo_sql_con.

      " Build the SQL statement and execute it.

      CREATE OBJECT lo_sql_stmt.

      TRY.
          lo_sql_stmt = lo_sql_con->create_statement( ).
          lv_sql_stmt = 'select * from m_persistence_encryption_status'.
          lo_sql_res = lo_sql_stmt->execute_query( lv_sql_stmt ).
          lt_metadata = lo_sql_res->get_metadata( ).

        CATCH cx_sql_exception INTO lo_sql_excp.
          lv_msg = lo_sql_excp->get_text( ).
          CLEAR: ls_output.
          ls_output = lv_msg.
          APPEND ls_output TO lt_output.
          RETURN.

      ENDTRY.


      IF lt_metadata IS INITIAL.
        CLEAR: ls_output.
        " No data found
        ls_output = lc_err_msg.
        APPEND ls_output TO lt_output.
        RETURN.
      ENDIF.

      " get struct_ref, disable abap_strict mode
      r_metadata =
      lo_sql_res->get_struct_ref( md_tab  = lt_metadata
                              p_strict = abap_false ).

      " RTTI - create a tabletype object based on a
      " structdescription based off the metadata
      ex_structdescr ?=
      cl_abap_typedescr=>describe_by_data_ref( r_metadata ).
      r_tabletype     =
      cl_abap_tabledescr=>create( p_line_type  = ex_structdescr
             p_table_kind = cl_abap_tabledescr=>tablekind_std ).

      CREATE DATA ex_result_ref TYPE HANDLE r_tabletype.
      lo_structdescr ?=
      cl_abap_typedescr=>describe_by_data_ref( r_metadata ).
      CREATE DATA lo_structure TYPE HANDLE lo_structdescr.
      ASSIGN lo_structure->* TO <fs_structure>.

      TRY.

          lo_sql_res->set_param_table( itab_ref = ex_result_ref ).
          lo_sql_res->next_package( ).
        CATCH cx_sql_exception INTO lo_sql_excp.
          lv_errmsg = lo_sql_excp->get_text( ).
          CLEAR: ls_output.
          ls_output = lv_errmsg.
          APPEND ls_output TO lt_output.

      ENDTRY.

      " Here we get the data.
      ASSIGN ex_result_ref->* TO <fs_table>.

      LOOP AT <fs_table> ASSIGNING <fs_encrypt>.

        ASSIGN COMPONENT 'ENCRYPTION_ACTIVE'
        OF STRUCTURE <fs_encrypt>
        TO <fs_encrypt_val>.

        lv_encrypted = <fs_encrypt_val>.

      ENDLOOP.

      " Adding title to the output
      CLEAR: ls_output.

      IF lv_encrypted EQ lc_true.

        " Database is encrypted
        ls_output = lc_isencrypt.
        APPEND ls_output TO lt_output.

      ELSEIF lv_encrypted EQ lc_false.
        " Database is not encrypted
        ls_output = lc_notencrypt.
        APPEND ls_output TO lt_output.

      ENDIF.
      CLEAR: ls_input, lv_action, ls_output, lv_encrypted. "+V001
      FREE: lt_metadata. "+V001

    WHEN OTHERS.
*   Begin of changes in V001
    ls_output = lc_inc_input. "Incorrect input
    APPEND ls_output TO lt_output.
    CLEAR ls_output.
*  End of changes in V001
  ENDCASE.
ENDFORM.