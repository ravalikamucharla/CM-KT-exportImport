*---------------------------------------------------------------------*
* Program Name        :  ZCM_RSAU_CONFIG_PARAM_752_HVER               *
* Title               :  To fetch parameter check messages            *
* Purpose             : To check security audit log configuration for *
*                       paramters for 752 version and above           *
*---------------------------------------------------------------------*
* Related Transaction OR Standard Program References                  *
* RSAU_CONFIG                                                         *
*---------------------------------------------------------------------*
* Tables              :   SELECT    UPDATE      INSERT      DELETE    *
*                           X                                         *
*---------------------------------------------------------------------*
* Program Change History                                              *
*---------------------------------------------------------------------*
*Date        Version   Author       TR#/Local     Description         *
*---------------------------------------------------------------------*
*12-27-2021  Initial   Soumya Ray   Local       To check audit log for*
*                                               parameter             *
*---------------------------------------------------------------------*
"Standard functionality is taken from class 'CL_SAL_CONFIG_CHECK'
"method 'CHECK_PARAMETERS'.
REPORT zcm_rsau_config_param_752_hver.

CLASS lcl_sal_helper DEFINITION.
  PUBLIC SECTION.
    METHODS convert_flag_to_tx
      IMPORTING iv_bool  TYPE boole_d
      EXPORTING ev_state TYPE string.
ENDCLASS.

CLASS lcl_sal_helper IMPLEMENTATION.

  METHOD convert_flag_to_tx.
    CONSTANTS: lc_active   TYPE c VALUE 'Active'   LENGTH 6,
               lc_inactive TYPE c VALUE 'Inactive' LENGTH 8.
    IF iv_bool = abap_true.
      ev_state = lc_active.
    ELSE.
      ev_state = lc_inactive.
    ENDIF.
  ENDMETHOD.
ENDCLASS.

FORM get_config
TABLES lt_input  STRUCTURE tab512
  lt_output STRUCTURE tab512.
  CONSTANTS: lc_sep             TYPE c VALUE '|'             LENGTH 1,
             lc_bracketclose    TYPE c VALUE ')'             LENGTH 1,
             lc_status_x        TYPE c VALUE 'X'             LENGTH 1,
             lc_status_o        TYPE c VALUE 'O'             LENGTH 1,
             lc_status_90       TYPE c VALUE '90'            LENGTH 2,
             lc_status_0        TYPE c VALUE '0'             LENGTH 1,
             lc_status_1        TYPE c VALUE '1'             LENGTH 1,
             lc_status_2        TYPE c VALUE '2'             LENGTH 1,
             lc_status_3        TYPE c VALUE '3'             LENGTH 1,
             lc_status_s        TYPE c VALUE 'S'             LENGTH 1,
             lc_status_m        TYPE c VALUE 'M'             LENGTH 1,
             lc_status_100      TYPE c VALUE '100'           LENGTH 3,
             lc_status_128      TYPE c VALUE '128'           LENGTH 3,
             lc_status_2048     TYPE c VALUE '2048'          LENGTH 4,
             lc_100mb           TYPE c VALUE '100 MB'        LENGTH 6,
             lc_2048mb          TYPE c VALUE '2048 MB'       LENGTH 7,
             lc_export          TYPE c VALUE 'EXPORT'        LENGTH 6,
             lc_maxmemory_file  TYPE c VALUE
             'Maximum Memory per File (MByte):'              LENGTH 32,
             lc_replace_1       TYPE c VALUE '&1'            LENGTH 2,
             lc_status          TYPE c VALUE 'Status:'       LENGTH 7,
             lc_success         TYPE c VALUE 'Success'       LENGTH 7,
             lc_warning         TYPE c VALUE 'Warning'       LENGTH 7,
             lc_error           TYPE c VALUE 'Error'         LENGTH 5,
             lc_information     TYPE c VALUE 'Information'   LENGTH 11,
             lc_error_col       TYPE c VALUE 'Error:'        LENGTH 6,
             lc_log_inactive    TYPE c VALUE
             'Audit Log recording is not active'             LENGTH 35,
             lc_log_active      TYPE c VALUE
             'Audit log recording is activated'              LENGTH 35,
             lc_record_infile   TYPE c VALUE
             'Record in file system'                         LENGTH 21,
             lc_record_file_db  TYPE c VALUE
             'Record in file system and in database'         LENGTH 37,
             lc_record_db       TYPE c VALUE
             'Record in database only'                       LENGTH 23,
             lc_record_target   TYPE c VALUE
             'Recording Target'                              LENGTH 16,
             lc_invalid_value   TYPE c VALUE 'Invalid value' LENGTH 13,
             lc_for             TYPE c VALUE 'for'           LENGTH 3,
             lc_sapnote         TYPE c VALUE 'SAP Note:'     LENGTH 9,
             lc_db_recmode      TYPE c VALUE
            'Database recording mode not relevant for files' LENGTH 46,
             lc_db_recinmode    TYPE c VALUE
             'Database recording in mode'                    LENGTH 26,
             lc_log_archive     TYPE c VALUE
             'Audit log with archive interface'              LENGTH 33,
             lc_db_ext_persist  TYPE c VALUE
             'Database recording with external persistency'  LENGTH 44,
             lc_rec_db_mode     TYPE c VALUE
             'Recording in database requires mode'           LENGTH 36,
             lc_temp_buffer     TYPE c VALUE
             'Temporary buffer'                              LENGTH 16,
             lc_initial         TYPE c VALUE '<initial>'     LENGTH 9,
             lc_alert_rd_wr     TYPE c VALUE
             'Alert mode (read and delete)'                  LENGTH 28,
             lc_no_filters      TYPE c VALUE
             'Number of Filters'                             LENGTH 17,
             lc_no_selfilter    TYPE c VALUE
             'No. of Selection Filters'                      LENGTH 24,
             lc_filter_maxval   TYPE c VALUE
             'Too many filters chosen; maximum value'        LENGTH 39,
             lc_profile_exist   TYPE c VALUE
             'Profiles exist with more than &1 filter(s)'    LENGTH 42,
             lc_note            TYPE c VALUE 'Note:'         LENGTH 5,
             lc_active          TYPE c VALUE 'Active'        LENGTH 6,
             lc_notactive       TYPE c VALUE 'not active'    LENGTH 10,
             lc_generic_user    TYPE c VALUE
             'Generic user selection is'                     LENGTH 25,
             lc_kernel_param    TYPE c VALUE
             'Kernel parameter'                              LENGTH 16,
             lc_shm_doesntmatch TYPE c VALUE
             'does not match the current SHM value'          LENGTH 40,
             lc_equal           TYPE c VALUE '='             LENGTH 1,
             lc_generaluser     TYPE c VALUE
             'Gen. User Selection'                           LENGTH 19,
             lc_peer_address    TYPE c VALUE 'Peer Address'  LENGTH 12,
             lc_integrity_pro   TYPE c VALUE
             'Integrity Protection'                          LENGTH 20,
             lc_integrity_form  TYPE c VALUE
             'Integrity protection format is'                LENGTH 30,
             lc_parameter_comb  TYPE c VALUE
             'Parameter combination'                         LENGTH 21,
             lc_notvalid        TYPE c VALUE
             'is not valid'                                  LENGTH 12,
             lc_and             TYPE c VALUE 'and'           LENGTH 3,
             lc_integrity_actve TYPE c VALUE
             'Integrity protection format active'            LENGTH 34,
             lc_audit_perfile   TYPE c VALUE
             'One audit file per day'                        LENGTH 22,
             lc_mult_auditfl    TYPE c VALUE
           'The multiple audit files option is recommended'  LENGTH 47,
             lc_maxfl_sz_small  TYPE c VALUE
      'Value for the maximum size of a file is too small; minimum size'
             LENGTH 63,
             lc_maxfl_sz_big    TYPE c VALUE
         'Value of the maximum size of a file is too big; maximum size'
             LENGTH 63,
             lc_unrestricted    TYPE c VALUE 'Unrestricted'  LENGTH 12,
             lc_maxsize_small   TYPE c VALUE
             'The maximum size of all audit files is too small (>= '
             LENGTH 56,
             lc_para_dir        TYPE spfl_parameter_name VALUE
             'DIR_AUDIT',
             lc_para_name       TYPE spfl_parameter_name VALUE
             'FN_AUDIT',
             lc_kernel_default  TYPE c VALUE
             'Kernel default used as current value for parameter'
             LENGTH 50,
             lc_pattern_plus    TYPE c VALUE '++++++++'       LENGTH 8,
             lc_pattern_hash    TYPE c VALUE '######'         LENGTH 6,
             lc_pattern_plushas TYPE c VALUE '+#'             LENGTH 2,
             lc_single_hash     TYPE c VALUE '#'              LENGTH 1,
             lc_file_npattern   TYPE c VALUE
           'File name template does not contain the pattern'  LENGTH 47,
             lc_para_fnaudit    TYPE c VALUE
             'Parameter FN_AUDIT:'                            LENGTH 19,
             lc_para_diraudit   TYPE c VALUE
             'Parameter DIR_AUDIT:'                           LENGTH 20,
             lc_file_pattern    TYPE c VALUE
            'File name template does not contain the pattern' LENGTH 47,
             lc_before          TYPE c VALUE 'before'         LENGTH 6,
             lc_path_indiraudt  TYPE c VALUE
           'Path in DIR_AUDIT is longer than 128 characters'  LENGTH 50,
             lc_prof_parameter  TYPE c VALUE
              'Profile parameter'                             LENGTH 17,
             lc_curr_value      TYPE c VALUE '(current value' LENGTH 14,
             lc_set_dynamical   TYPE c VALUE
             'was set dynamically'                            LENGTH 20,
             lc_title           TYPE c VALUE
             'General parameter check'                        LENGTH 30,
             lc_noinput         TYPE c VALUE
             'No input passed'                                LENGTH 20,
             lc_inc_input       TYPE c VALUE
             'Incorrect input'                                LENGTH 20,
             lc_type            TYPE c VALUE 'Type'           LENGTH 4,
             lc_msgtext         TYPE c VALUE 'Message Text'   LENGTH 12.


  DATA: ls_output    TYPE tab512,
        ls_input     TYPE tab512,
        lv_action    TYPE string,
        lv_message   TYPE string,
        lv_cnt       TYPE i,
        lv_text      TYPE string,
        lv_text1     TYPE string,
        lv_cnt_tx    TYPE c LENGTH 4,
        lv_file_mode TYPE c LENGTH 1,
        lv_err       TYPE boole_d,
        lv_max_file  TYPE int4,
        lv_max_files TYPE int4,
        lv_buf       TYPE int4,
        lo_para      TYPE REF TO cl_sal_config_para,
        ls_para      TYPE cl_sal_config_para=>ts_para_sngl,
        lo_helper    TYPE REF TO lcl_sal_helper.

  CLEAR: ls_output, ls_input, lv_message, lv_action, lv_cnt, lv_text,
  lv_text1, lv_cnt_tx, lv_file_mode, lv_err, lv_max_files, lv_buf,
  lv_max_file.

  " Adding title to the output
  ls_output = lc_title.
  APPEND ls_output TO lt_output.
  CLEAR ls_output.

  READ TABLE lt_input INTO ls_input INDEX 1.
  IF sy-subrc EQ 0.
    lv_action = ls_input.      " Action
  ELSE.
    " No input passed
    ls_output = lc_noinput.
    APPEND ls_output TO lt_output.
    CLEAR ls_output.
    RETURN.
  ENDIF.

  CASE lv_action.

    WHEN lc_export.               " When action is EXPORT

      CREATE OBJECT lo_para EXPORTING id_silent = abap_true.

      lo_para->get_parameters( IMPORTING es_para = ls_para ).

      "Subheading
      CONCATENATE lc_type lc_sep lc_msgtext INTO ls_output.
      APPEND ls_output TO lt_output.
      CLEAR ls_output.

*-------CHECK_PARA_01_SAL_ACTIVE--------------------------------------*
      IF ls_para-audit_active = abap_true.
        CONCATENATE lc_status lc_log_active INTO lv_message
        SEPARATED BY space."S078
        CONCATENATE lc_success lc_sep lv_message INTO ls_output.
        APPEND ls_output TO lt_output.
      ELSE.
        CONCATENATE lc_status lc_log_inactive INTO lv_message
        SEPARATED BY space."W078
        CONCATENATE lc_warning lc_sep lv_message INTO ls_output.
        APPEND ls_output TO lt_output.
      ENDIF.
      CLEAR: ls_output, lv_message.
*---------------------------------------------------------------------*
*----------CHECK_PARA_02_SAL_TARGET-----------------------------------*
      CASE ls_para-db_mode.
        WHEN space.
          "file only it's standard ... no message
          CONCATENATE lc_status lc_record_infile INTO lv_message
          SEPARATED BY space."I078(secaudit)
          CONCATENATE lc_information lc_sep lv_message INTO ls_output.
          APPEND ls_output TO lt_output.

        WHEN lc_status_x.
          "write to file and db
          "12345678901234567890123456789012345678901234567890
          CONCATENATE lc_status lc_record_file_db INTO lv_message
          SEPARATED BY space."I078(secaudit)
          CONCATENATE lc_information lc_sep lv_message INTO ls_output.
          APPEND ls_output TO lt_output.
        WHEN lc_status_o.
          "exclusive to database.
          CONCATENATE lc_status lc_record_db INTO lv_message
          SEPARATED BY space."I078(secaudit)
          CONCATENATE lc_information lc_sep lv_message INTO ls_output.
          APPEND ls_output TO lt_output.
        WHEN OTHERS.
          "undefined parameter value
          "E080(secaudit)
          CONCATENATE lc_invalid_value ls_para-db_mode lc_for
          lc_record_target INTO lv_message SEPARATED BY space.
          CONCATENATE lc_error lc_sep lv_message INTO ls_output.
          APPEND ls_output TO lt_output.

      ENDCASE.
      CLEAR: ls_output, lv_message.

      CASE ls_para-db_mode.
        WHEN cl_sal_helper=>gc_mode_file.
          CONCATENATE lc_sapnote lc_db_recmode INTO lv_message
          SEPARATED BY space.
          CONCATENATE lc_information lc_sep lv_message INTO ls_output.
          APPEND ls_output TO lt_output.

        WHEN cl_sal_helper=>gc_mode_db.

          IF ls_para-db_logmode = cl_sal_helper=>gc_dbmode_audit.
            CONCATENATE lc_status lc_db_recinmode lc_log_archive INTO
            lv_message SEPARATED BY space. "I078
            CONCATENATE lc_information lc_sep lv_message INTO
            ls_output.
            APPEND ls_output TO lt_output.

          ELSEIF ls_para-db_logmode = cl_sal_helper=>gc_dbmode_ext.
            CONCATENATE lc_status lc_db_recinmode lc_db_ext_persist
            INTO lv_message SEPARATED BY space. "I078
            CONCATENATE lc_information lc_sep lv_message INTO
            ls_output.
            APPEND ls_output TO lt_output.

          ELSE.
            CONCATENATE lc_error_col lc_rec_db_mode lc_log_archive
            INTO lv_message SEPARATED BY space. "E159
            CONCATENATE lc_error lc_sep lv_message INTO ls_output.
            APPEND ls_output TO lt_output.
          ENDIF.

        WHEN cl_sal_helper=>gc_mode_both.
          IF  ls_para-db_logmode = cl_sal_helper=>gc_dbmode_audit.
            "it's not relevant

          ELSEIF ls_para-db_logmode = cl_sal_helper=>gc_dbmode_tbuf.
            CONCATENATE lc_status lc_db_recinmode lc_temp_buffer INTO
            lv_message SEPARATED BY space. "I078
            CONCATENATE lc_information lc_sep lv_message INTO
            ls_output.
            APPEND ls_output TO lt_output.

          ELSEIF ls_para-db_logmode = cl_sal_helper=>gc_dbmode_alert.
            CONCATENATE lc_status lc_db_recinmode lc_alert_rd_wr
            INTO lv_message SEPARATED BY space."I078
            CONCATENATE lc_information lc_sep lv_message INTO
            ls_output.
            APPEND ls_output TO lt_output.

          ELSEIF ls_para-db_logmode = cl_sal_helper=>gc_dbmode_ext.
            CONCATENATE lc_status lc_db_recinmode lc_db_ext_persist
            INTO lv_message SEPARATED BY space."I078
            CONCATENATE lc_information lc_sep lv_message INTO
            ls_output.
            APPEND ls_output TO lt_output.
          ELSE.
            CONCATENATE lc_status lc_db_recinmode lc_initial INTO
            lv_message SEPARATED BY space. "W078
            CONCATENATE lc_warning lc_sep lv_message INTO ls_output.
            APPEND ls_output TO lt_output.
          ENDIF.
      ENDCASE.
      CLEAR: ls_output, lv_message.
*---------------------------------------------------------------------*
*------------CHECK_PARA_04_SAL_SLOTNO---------------------------------*
      IF ls_para-filter_cnt < lc_status_2.
        lv_text = ls_para-filter_cnt.
        CONCATENATE lc_invalid_value lv_text lc_for lc_no_filters
        INTO lv_message SEPARATED BY space. "E080
        CONCATENATE lc_error lc_sep lv_message INTO ls_output.
        APPEND ls_output TO lt_output.

      ELSEIF  ls_para-filter_cnt > lc_status_90.
        CONCATENATE lc_filter_maxval lc_status_90 INTO lv_message
        SEPARATED BY space. "E042
        CONCATENATE lc_error lc_sep lv_message INTO ls_output.
        APPEND ls_output TO lt_output.

      ELSE.
        lv_text = ls_para-filter_cnt.
        CONCATENATE lc_status lc_no_selfilter lv_text INTO
        lv_message SEPARATED BY space. "I078
        CONCATENATE lc_information lc_sep lv_message INTO ls_output.
        APPEND ls_output TO lt_output.

      ENDIF.
      CLEAR: ls_output, lv_text, lv_message.

      SELECT COUNT(*) FROM rsauprof INTO lv_cnt
      WHERE profname NOT LIKE '$%'                      "#EC CI_NOFIRST
      AND slotno > ls_para-filter_cnt.
      IF lv_cnt > lc_status_0.
        lv_text = lc_profile_exist.
        WRITE ls_para-filter_cnt TO lv_cnt_tx LEFT-JUSTIFIED.
        REPLACE lc_replace_1 IN lv_text WITH lv_cnt_tx.
        CONCATENATE lc_note lv_text INTO lv_message SEPARATED BY space.
        CONCATENATE lc_warning lc_sep lv_message INTO ls_output.
        APPEND ls_output TO lt_output."W098
      ENDIF.
      CLEAR: ls_output, lv_message, lv_text, lv_cnt_tx, lv_cnt.

*---------------------------------------------------------------------*
*-------------CHECK_PARA_05_SAL_FILE----------------------------------*
      IF ls_para-integr_fmt = abap_true.
        CONCATENATE lc_status lc_integrity_form lc_active
        INTO lv_message SEPARATED BY space.
        CONCATENATE lc_information lc_sep lv_message INTO ls_output.
        APPEND ls_output TO lt_output. "I078
      ELSE.
        CONCATENATE lc_status lc_integrity_form lc_notactive
        INTO lv_message SEPARATED BY space.
        CONCATENATE lc_information lc_sep lv_message INTO ls_output.
        APPEND ls_output TO lt_output. "I078
      ENDIF.
      CLEAR: ls_output, lv_message.

      IF ls_para-n_files_day IS INITIAL.

        IF ls_para-integr_fmt = abap_true.
          CONCATENATE lc_parameter_comb lc_integrity_actve lc_and
          lc_audit_perfile lc_notvalid INTO lv_message SEPARATED BY
          space."e081(secaudit)
          CONCATENATE lc_error lc_sep lv_message INTO ls_output.
          APPEND ls_output TO lt_output.
        ELSE.
          CONCATENATE lc_note lc_mult_auditfl INTO lv_message
          SEPARATED BY space. "I098
          CONCATENATE lc_information lc_sep lv_message INTO ls_output.
          APPEND ls_output TO lt_output.
          CLEAR: lv_message, ls_output.

          lv_file_mode = lc_status_s.
*///----------CHECK_PARA_05_SAL_FILE_1FILE---------///*
          IF ls_para-one_file_max < lc_status_100.
            CONCATENATE lc_maxfl_sz_small lc_100mb INTO lv_message
            SEPARATED BY space."e040
            CONCATENATE lc_error lc_sep lv_message INTO ls_output.
            APPEND ls_output TO lt_output.

          ELSEIF ls_para-one_file_max > lc_status_2048.
            CONCATENATE lc_maxfl_sz_big lc_2048mb INTO lv_message
            SEPARATED BY space."e041
            CONCATENATE lc_error lc_sep lv_message INTO ls_output.
            APPEND ls_output TO lt_output.

          ELSE.
            lv_text = ls_para-one_file_max.
            CONCATENATE lc_status lc_maxmemory_file lv_text
            INTO lv_message SEPARATED BY space."I078
            CONCATENATE lc_information lc_sep lv_message INTO
            ls_output.
            APPEND ls_output TO lt_output.

          ENDIF.
*///------------------------------------------------///*
          CLEAR: lv_message, ls_output, lv_text.
        ENDIF.
        CLEAR: lv_message, ls_output.
      ELSE.
        lv_file_mode = lc_status_m.
*///------------CHECK_PARA_05_SAL_FILE_NFILE---------///*
        lv_max_file = ls_para-n_file_max.
        lv_max_files = ls_para-n_files_max.
        IF lv_max_file < lc_status_100.
          CONCATENATE lc_maxfl_sz_small lc_100mb INTO lv_message
          SEPARATED BY space."e040
          CONCATENATE lc_error lc_sep lv_message INTO ls_output.
          APPEND ls_output TO lt_output.
        ELSEIF lv_max_file > lc_status_2048.
          CONCATENATE lc_maxfl_sz_big lc_2048mb INTO lv_message
          SEPARATED BY space."e041
          CONCATENATE lc_error lc_sep lv_message INTO ls_output.
          APPEND ls_output TO lt_output.
        ELSE.
          lv_text = ls_para-one_file_max.
          CONCATENATE lc_status lc_maxmemory_file lv_text
          INTO lv_message SEPARATED BY space."I078
          CONCATENATE lc_information lc_sep lv_message INTO
          ls_output.
          APPEND ls_output TO lt_output.
        ENDIF.
        CLEAR: ls_output, lv_message, lv_text.

        IF lv_max_files = lc_status_0.
          CONCATENATE lc_status lc_maxmemory_file lc_unrestricted
          INTO lv_message SEPARATED BY space."i078
          CONCATENATE lc_information lc_sep lv_message INTO ls_output.
          APPEND ls_output TO lt_output.
        ELSEIF lv_max_files <= lv_max_file.
          lv_message = lv_buf.
          CONCATENATE lc_error lc_sep lc_maxsize_small lv_message
          lc_bracketclose INTO ls_output.
          APPEND ls_output TO lt_output.

        ELSE.
          lv_text = lv_max_files.
          CONCATENATE lc_status lc_maxmemory_file lv_text
          INTO lv_message SEPARATED BY space."i078
          CONCATENATE lc_information lc_sep lv_message INTO ls_output.
          APPEND ls_output TO lt_output.
        ENDIF.
*///-------------------------------------------------///*
      ENDIF.
      CLEAR: lv_message, ls_output, lv_text.
*///-------------CHECK_PARA_05_SAL_FILE_NAME-------///*
      CASE cl_spfl_profile_parameter=>get_origin( lc_para_name ).
        WHEN lc_status_0.
          CONCATENATE lc_kernel_default lc_para_name INTO lv_message
          SEPARATED BY space.
          CONCATENATE lc_information lc_sep lv_message INTO ls_output.
          APPEND ls_output TO lt_output.
        WHEN lc_status_1 OR lc_status_2.
          IF lv_file_mode = lc_status_s.
            IF ls_para-fn_audit NS lc_pattern_plus.
              CONCATENATE lc_file_npattern lc_pattern_plus INTO
              lv_message SEPARATED BY space. "e046
              CONCATENATE lc_error lc_sep lv_message INTO ls_output.
              APPEND ls_output TO lt_output.
            ELSE.
              lv_text
              = cl_sal_transfer=>cut_fname_for_msg( ls_para-fn_audit ).
              CONCATENATE lc_status lc_para_fnaudit lv_text INTO
              lv_message SEPARATED BY space. "i078
              CONCATENATE lc_information lc_sep lv_message INTO
              ls_output.
              APPEND ls_output TO lt_output.
            ENDIF.
            CLEAR: ls_output, lv_message, lv_text.

          ELSE. "id_mode = 'M'.
            IF ls_para-fn_audit NS lc_pattern_plus.
              lv_err = abap_true.
              CONCATENATE lc_file_npattern lc_pattern_plus INTO
              lv_message SEPARATED BY space. "e046
              CONCATENATE lc_error lc_sep lv_message INTO ls_output.
              APPEND ls_output TO lt_output.
            ENDIF.
            CLEAR: ls_output, lv_message.

            IF ls_para-fn_audit NS lc_pattern_hash.
              lv_err = abap_true.
              CONCATENATE lc_file_npattern lc_pattern_hash INTO
              lv_message SEPARATED BY space. "e047
              CONCATENATE lc_error lc_sep lv_message INTO ls_output.
              APPEND ls_output TO lt_output.
            ENDIF.
            CLEAR: ls_output, lv_message.
            IF ls_para-fn_audit CA lc_pattern_plushas.
              IF ls_para-fn_audit+sy-fdpos(1) = lc_single_hash.
                lv_err = abap_true.
                CONCATENATE lc_file_pattern lc_pattern_hash lc_before
                lc_pattern_plus INTO lv_message SEPARATED BY space.
                CONCATENATE lc_error lc_sep lv_message INTO ls_output.
                APPEND ls_output TO lt_output.
              ENDIF.
            ENDIF.
            CLEAR: ls_output, lv_message.
            IF lv_err IS INITIAL.
              lv_text =
              cl_sal_transfer=>cut_fname_for_msg( ls_para-fn_audit ).
              CONCATENATE lc_status lc_para_fnaudit lv_text INTO
              lv_message SEPARATED BY space. "i078
              CONCATENATE lc_information lc_sep lv_message INTO
              ls_output.
              APPEND ls_output TO lt_output.
            ENDIF.
          ENDIF.
          CLEAR: lv_message, ls_output, lv_text.

        WHEN lc_status_3.
          CONCATENATE lc_prof_parameter lc_para_name lc_curr_value
          ls_para-fn_audit lc_bracketclose lc_set_dynamical
          INTO lv_message SEPARATED BY space.
          CONCATENATE lc_warning lc_sep lv_message INTO ls_output.
          APPEND ls_output TO lt_output.

      ENDCASE.
      CLEAR: ls_output, lv_message, lv_text.

      lv_cnt = strlen( ls_para-dir_audit ).
      IF lv_cnt > lc_status_128.
        "01234567890123456789012345678901234567890123456789
        CONCATENATE lc_error_col lc_path_indiraudt INTO lv_message
        SEPARATED BY space.
        CONCATENATE lc_error lc_sep lv_message INTO ls_output.
        APPEND ls_output TO lt_output.
      ELSE.
        lv_text =
        cl_sal_transfer=>cut_fname_for_msg( ls_para-dir_audit ).
        CONCATENATE lc_status lc_para_diraudit lv_text INTO lv_message
        SEPARATED BY space.
        CONCATENATE lc_information lc_sep lv_message INTO ls_output.
        APPEND ls_output TO lt_output.
      ENDIF.
      CLEAR: ls_output, lv_message, lv_text, lv_cnt.
*///-----------------------------------------------///*

*---------------------------------------------------------------------*
*-------------CHECK_PARA_09_SAL_MISC----------------------------------*
      IF ls_para-gen_user_sel = abap_true.
        CONCATENATE lc_status lc_generic_user lc_active INTO lv_message
        SEPARATED BY space.
        CONCATENATE lc_information lc_sep lv_message INTO ls_output.
        APPEND ls_output TO lt_output.
      ELSE.
        CONCATENATE lc_status lc_generic_user lc_notactive INTO
        lv_message SEPARATED BY space.
        CONCATENATE lc_information lc_sep lv_message INTO ls_output.
        APPEND ls_output TO lt_output.

      ENDIF.
      CLEAR: ls_output, lv_message.
*---------------------------------------------------------------------*
*--------------CHECK_PARA_VS_SHM--------------------------------------*
      CREATE OBJECT lo_helper.
      cl_sal_config=>get_parameters_from_shm( IMPORTING es_para =
      DATA(ls_shm_para) ).
      IF ls_para-filter_cnt <> ls_shm_para-filter_cnt.
        lv_text = ls_para-filter_cnt.
        lv_text1 = ls_shm_para-filter_cnt.
        CONCATENATE lc_kernel_param lc_no_filters lc_equal lv_text
        lc_shm_doesntmatch lv_text1 INTO lv_message SEPARATED BY space.
        CONCATENATE lc_warning lc_sep lv_message INTO ls_output.
        APPEND ls_output TO lt_output.
      ENDIF.
      CLEAR: ls_output, lv_message, lv_text, lv_text1.

      IF ls_para-gen_user_sel <> ls_shm_para-gen_user_sel.

        CALL METHOD lo_helper->convert_flag_to_tx
          EXPORTING
            iv_bool  = ls_para-gen_user_sel
          IMPORTING
            ev_state = lv_text.

        CALL METHOD lo_helper->convert_flag_to_tx
          EXPORTING
            iv_bool  = ls_shm_para-gen_user_sel
          IMPORTING
            ev_state = lv_text1.

        CONCATENATE lc_kernel_param lc_generaluser lc_equal lv_text
        lc_shm_doesntmatch lv_text1 INTO lv_message SEPARATED BY space.
        CONCATENATE lc_warning lc_sep lv_message INTO ls_output.
        APPEND ls_output TO lt_output.

      ENDIF.
      CLEAR: ls_output, lv_message, lv_text, lv_text1.

      IF ls_para-nat_mode <> ls_shm_para-nat_mode.

        CALL METHOD lo_helper->convert_flag_to_tx
          EXPORTING
            iv_bool  = ls_para-nat_mode
          IMPORTING
            ev_state = lv_text.

        CALL METHOD lo_helper->convert_flag_to_tx
          EXPORTING
            iv_bool  = ls_shm_para-nat_mode
          IMPORTING
            ev_state = lv_text1.

        CONCATENATE lc_kernel_param lc_peer_address lc_equal lv_text
        lc_shm_doesntmatch lv_text1 INTO lv_message SEPARATED BY space.
        CONCATENATE lc_warning lc_sep lv_message INTO ls_output.
        APPEND ls_output TO lt_output.

      ENDIF.
      CLEAR: ls_output, lv_message, lv_text, lv_text1.

      IF ls_para-integr_fmt <> ls_shm_para-integr_fmt.
        CALL METHOD lo_helper->convert_flag_to_tx
          EXPORTING
            iv_bool  = ls_para-integr_fmt
          IMPORTING
            ev_state = lv_text.

        CALL METHOD lo_helper->convert_flag_to_tx
          EXPORTING
            iv_bool  = ls_shm_para-integr_fmt
          IMPORTING
            ev_state = lv_text1.

        CONCATENATE lc_kernel_param lc_integrity_pro lc_equal lv_text
        lc_shm_doesntmatch lv_text1 INTO lv_message SEPARATED BY space.
        CONCATENATE lc_warning lc_sep lv_message INTO ls_output.
        APPEND ls_output TO lt_output.
      ENDIF.
      CLEAR: ls_output, ls_input, lv_message, lv_action, lv_cnt,
      lv_text1, lv_cnt_tx, lv_file_mode, lv_err, lv_max_files, lv_buf,
      lv_max_file, lv_text.
*---------------------------------------------------------------------*
    WHEN OTHERS.
      " Incorrect input
      ls_output = lc_inc_input.
      APPEND ls_output TO lt_output.
      CLEAR ls_output.
  ENDCASE.

ENDFORM.