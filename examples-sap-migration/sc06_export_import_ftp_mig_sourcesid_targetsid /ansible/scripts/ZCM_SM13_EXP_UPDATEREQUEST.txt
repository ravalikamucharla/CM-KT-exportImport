*---------------------------------------------------------------------*
* Program Name        :   ZCM_SM13_EXP_UPDATEREQUEST                  *
* Title               :   Export Update Request in SM13               *
* Purpose             :   This report is for exporting update request *
*                         in SM13 during Cloud Migration              *
*---------------------------------------------------------------------*
* Related Transaction OR Standard Program References                  *
* SM13                                                                *
*---------------------------------------------------------------------*
* Tables              :   SELECT    UPDATE      INSERT      DELETE    *
* XXXXX                     X                                         *
*---------------------------------------------------------------------*
* Program Change History                                              *
*---------------------------------------------------------------------*
*Date        Version   Author         TR#/Local     Description       *
*---------------------------------------------------------------------*
*09-04-2020  Initial   Ruchir Kamble  Local   Exporting update request*
*                                             in SM13during Cloud Mig-*
*                                             ration                  *
*07-28-2022  V001    Soumya/Yasaswini Local   To pass message "No data*
*                                             found" in case of no    *
*                                             data found in sytem     *
*                                           Remove in line declaration*
*---------------------------------------------------------------------*


" This code is referred from Standard Report SAPMSM13
" Subroutine load_upd_records
" Icons are replaced by constants lc_150 to lc_155

REPORT zcm_sm13_exp_updaterequest.

TABLES: vbselect.

TYPES : BEGIN OF upd_records . "+V001
    INCLUDE STRUCTURE vbhdr. "+V001
TYPES: datum       LIKE sy-datum,
       zeit        LIKE sy-uzeit,
       info(255),
       info1(30),
       info2(30),
       info3(30),
       info4(30),
       info5(30),
       info6(30),
       info7(30),
       info8(30),
       status(20),
       marked(1),
       line_col(3),
       field_col   TYPE slis_t_specialcol_alv,
       END OF upd_records.

CONSTANTS: lc_sep       TYPE c VALUE '|'                    LENGTH 1,
           lc_null      TYPE c VALUE 'NULL'                 LENGTH 4,
           lc_client    TYPE c VALUE 'Client'               LENGTH 6,
           lc_user      TYPE c VALUE 'User'                 LENGTH 4,
           lc_date      TYPE c VALUE 'Date'                 LENGTH 4,
           lc_time      TYPE c VALUE 'Time'                 LENGTH 4,
           lc_tcode     TYPE c VALUE 'Tcode'                LENGTH 5,
           lc_info1     TYPE c VALUE 'Info1'                LENGTH 10,
           lc_info2     TYPE c VALUE 'Info2'                LENGTH 10,
           lc_info3     TYPE c VALUE 'Info3'                LENGTH 10,
           lc_info4     TYPE c VALUE 'Info4'                LENGTH 10,
           lc_info5     TYPE c VALUE 'Info5'                LENGTH 10,
           lc_info6     TYPE c VALUE 'Info6'                LENGTH 10,
           lc_info7     TYPE c VALUE 'Info7'                LENGTH 10,
           lc_info8     TYPE c VALUE 'Info8'                LENGTH 10,
           lc_status    TYPE c VALUE 'Status'               LENGTH 6,
           lc_initial   TYPE c VALUE 'Initial'              LENGTH 8,
           lc_autosys   TYPE c VALUE 'Autosys'              LENGTH 12,
           lc_autodia   TYPE c VALUE 'Autodia'              LENGTH 12,
           lc_started   TYPE c VALUE 'Started'              LENGTH 8,
           lc_v1        TYPE c VALUE 'V1processed'          LENGTH 12,
           lc_v2        TYPE c VALUE 'V2 processed'         LENGTH 12,
           lc_delete    TYPE c VALUE 'ToDelete'             LENGTH 12,
           lc_enqueue   TYPE c VALUE 'Enqueuesdeleted'      LENGTH 16,
           lc_processed TYPE c VALUE 'Processed'            LENGTH 12,
           lc_prepared  TYPE c VALUE 'Prepared'             LENGTH 10,
           lc_canceled  TYPE c VALUE 'canceled'             LENGTH 10,
           lc_commit    TYPE c VALUE 'ErrorextCommit'       LENGTH 20,
           lc_noretry   TYPE c VALUE 'Errornoretry'         LENGTH 20,
           lc_error     TYPE c VALUE 'Error'                LENGTH 6,
           lc_stopped   TYPE c VALUE 'Stoppednoretry'       LENGTH 20,
           lc_err_v2    TYPE c VALUE 'Error in V2 Part'     LENGTH 20,
           lc_collect   TYPE c VALUE 'Error in CollectRun'  LENGTH 20,
           lc_export    TYPE c VALUE 'EXPORT'               LENGTH 6,
           lc_150       TYPE c VALUE 'Synchronous update'   LENGTH 24,
           lc_151       TYPE c VALUE 'Restart not possible' LENGTH 24,
           lc_152       TYPE c VALUE
           'Updrecord with enqueues'                        LENGTH 24,
           lc_153       TYPE c VALUE 'External commit'      LENGTH 24,
           lc_154       TYPE c VALUE 'Enqueues released'    LENGTH 24,
           lc_155       TYPE c VALUE
           'Created by batch input'                         LENGTH 24,
           lc_title     TYPE c VALUE 'Update Requests'      LENGTH 25,
*  Begin of changes in V001
           lc_input     TYPE c VALUE 'Incorrect input'      LENGTH 15,
           lc_err_msg   TYPE c VALUE
           'No data found'                                  LENGTH 20,
           lc_noinput   TYPE c VALUE 'No input given'       LENGTH 20.
*  End of changes in V001

DATA:ls_input       TYPE tab512,
     ls_output      TYPE tab512,
     lv_action      TYPE char20,
     th_vb_cliinfo  TYPE x,
     th_vb_rc       LIKE sy-index,
     lv_sel_client  LIKE sy-mandt,
     lv_sel_user    LIKE sy-uname,
     lv_upd_server  LIKE vbhdr-vbname,
     lv_call_trans  TYPE i VALUE 0,
     vbhdr_line     TYPE vbhdr,
* Begin of changes in V001
     ls_vbkeytab    TYPE vbselkey,
     ls_upd_records TYPE upd_records,
     lt_vbkeytab    TYPE STANDARD TABLE OF vbselkey,
     lt_upd_records TYPE STANDARD TABLE OF upd_records.

FIELD-SYMBOLS: <fs_records> TYPE upd_records.
* End of changes in V001
LOAD-OF-PROGRAM.


FORM get_config
               TABLES lt_input  STRUCTURE tab512
                      lt_output STRUCTURE tab512.

  READ TABLE lt_input INTO ls_input INDEX 1.
  IF sy-subrc EQ 0.
    lv_action = ls_input.      " Action
  ELSE.
    " Adding title to the output
    ls_output = lc_title.
    APPEND ls_output TO lt_output.

    " No input given
    ls_output = lc_noinput.
    APPEND ls_output TO lt_output.
    CLEAR ls_output.
    RETURN.
  ENDIF.

  CASE lv_action.

    WHEN lc_export.      " If action is Export

      PERFORM load_upd_records.

      " Adding title to the output
      ls_output = lc_title.
      APPEND ls_output TO lt_output.

      IF lt_upd_records IS NOT INITIAL. "+V001

        " Adding headings to the output
        CONCATENATE lc_client     lc_sep
        lc_user       lc_sep
        lc_date       lc_sep
        lc_time       lc_sep
        lc_tcode      lc_sep
        lc_info1      lc_sep
        lc_info2      lc_sep
        lc_info3      lc_sep
        lc_info4      lc_sep
        lc_info5      lc_sep
        lc_info6      lc_sep
        lc_info7      lc_sep
        lc_info8      lc_sep
        lc_status
        INTO ls_output.
        APPEND ls_output TO lt_output.

        LOOP AT lt_upd_records ASSIGNING <fs_records>. "+V001

*  Begin of changes in V001
          IF <fs_records>-vbmandt IS INITIAL.
            <fs_records>-vbmandt = lc_null.
          ENDIF.

          IF <fs_records>-vbusr IS INITIAL.
            <fs_records>-vbusr = lc_null.
          ENDIF.

          IF <fs_records>-datum IS INITIAL.
            <fs_records>-datum = lc_null.
          ENDIF.

          IF <fs_records>-zeit IS INITIAL.
            <fs_records>-zeit = lc_null.
          ENDIF.

          IF <fs_records>-vbtcode IS INITIAL.
            <fs_records>-vbtcode = lc_null.
          ENDIF.
*  End of changes in V001

          IF <fs_records>-info1 IS INITIAL.
            <fs_records>-info1 = lc_null.
          ENDIF.

          IF <fs_records>-info2 IS INITIAL.
            <fs_records>-info2 = lc_null.
          ENDIF.

          IF <fs_records>-info3 IS INITIAL.
            <fs_records>-info3 = lc_null.
          ENDIF.

          IF <fs_records>-info4 IS INITIAL.
            <fs_records>-info4 = lc_null.
          ENDIF.

          IF <fs_records>-info5 IS INITIAL.
            <fs_records>-info5 = lc_null.
          ENDIF.

          IF <fs_records>-info6 IS INITIAL.
            <fs_records>-info6 = lc_null.
          ENDIF.

          IF <fs_records>-info7 IS INITIAL.
            <fs_records>-info7 = lc_null.
          ENDIF.

          IF <fs_records>-info8 IS INITIAL.
            <fs_records>-info8 = lc_null.
          ENDIF.

          CONCATENATE <fs_records>-vbmandt   lc_sep
          <fs_records>-vbusr     lc_sep
          <fs_records>-datum     lc_sep
          <fs_records>-zeit      lc_sep
          <fs_records>-vbtcode   lc_sep
          <fs_records>-info1     lc_sep
          <fs_records>-info2     lc_sep
          <fs_records>-info3     lc_sep
          <fs_records>-info4     lc_sep
          <fs_records>-info5     lc_sep
          <fs_records>-info6     lc_sep
          <fs_records>-info7     lc_sep
          <fs_records>-info8     lc_sep
          <fs_records>-status
          INTO ls_output.
          APPEND ls_output TO lt_output.

        ENDLOOP.

      ELSE.
        " No data found
        ls_output = lc_err_msg.
        APPEND ls_output TO lt_output.

      ENDIF.
* Begin of changes in V001
    WHEN OTHERS.

      " Adding title to the output
      ls_output = lc_title.
      APPEND ls_output TO lt_output.
      CLEAR ls_output.
      " Incorrect input
      ls_output = lc_input.
      APPEND ls_output TO lt_output.
      CLEAR ls_output.
* End of changes in V001
  ENDCASE.

ENDFORM.                    "get_config

*&---------------------------------------------------------------------*
*&      Form  load_upd_records
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM load_upd_records.

  CONSTANTS: vb_sync_vb            LIKE th_vb_cliinfo VALUE 1,
             vb_dont_process_again LIKE th_vb_cliinfo VALUE 2,
             vb_with_enqueue       LIKE th_vb_cliinfo VALUE 16,
             vb_external_commit    LIKE th_vb_cliinfo VALUE 32,
             vb_enqueues_released  LIKE th_vb_cliinfo VALUE 64,
             vb_from_bi            LIKE th_vb_cliinfo VALUE 128.

  DATA: vbdate_from  LIKE vbhdr-vbdate,
        vbserver     LIKE vbhdr-vbname,
        client       LIKE vbhdr-vbmandt,
        user         LIKE vbhdr-vbusr,
        color_column TYPE slis_specialcol_alv.

* set client and user to * if initial
  IF ( lv_sel_client IS INITIAL ).
    lv_sel_client = '*'.
  ENDIF.
  IF ( lv_sel_user IS INITIAL ).
    lv_sel_user = '*'.
  ENDIF.

* VBSERVER festlegen
  IF lv_upd_server IS INITIAL.
    vbserver = '%'.
  ELSE.
    vbserver = lv_upd_server.
  ENDIF.

* Client und User gestimmen
  client = lv_sel_client.
  REPLACE '*' WITH '%' INTO client.
  user = lv_sel_user.
  REPLACE '*' WITH '%' INTO user.

  FREE: lt_upd_records. "+V001
  color_column-fieldname = 'STATUS'.
* jetzt die Verbuchungssaetze von der DB laden.
  CASE lv_call_trans.
    WHEN 0.
      SELECT * FROM vbhdr INTO CORRESPONDING FIELDS OF
      vbhdr_line.
        MOVE-CORRESPONDING vbhdr_line TO ls_upd_records.
        APPEND ls_upd_records TO lt_upd_records.
      ENDSELECT.
    WHEN 1.
      LOOP AT lt_vbkeytab INTO ls_vbkeytab. "+V001
        SELECT SINGLE * FROM vbhdr
        INTO CORRESPONDING FIELDS OF vbhdr_line
        WHERE vbkey = ls_vbkeytab-vbkey.
        IF sy-subrc = 0.
          MOVE-CORRESPONDING vbhdr_line TO ls_upd_records. "+V001
          APPEND ls_upd_records TO lt_upd_records.
        ENDIF.
        CLEAR ls_vbkeytab. "+V002
      ENDLOOP.
    WHEN 2.
      IF vbselect-vbmandt IS INITIAL.
        vbselect-vbmandt = '%'.
      ENDIF.
      REPLACE '*' WITH '%' INTO vbselect-vbmandt.
      IF vbselect-vbbname IS INITIAL.
        vbselect-vbbname = '%'.
      ENDIF.
      REPLACE '*' WITH '%' INTO vbselect-vbbname.
      IF vbselect-vbanzahl IS INITIAL.
        vbselect-vbanzahl = 99999.
      ENDIF.
      IF vbselect-vbkey IS INITIAL.
        vbselect-vbkey = '%'.
      ENDIF.
      REPLACE '*' WITH '%' INTO vbselect-vbkey.
      vbdate_from = vbselect-vbdatum.
      vbdate_from+8 = vbselect-vbzeit.
      SELECT * UP TO vbselect-vbanzahl ROWS FROM vbhdr
      INTO CORRESPONDING FIELDS OF vbhdr_line
      WHERE vbmandt LIKE vbselect-vbmandt
      AND vbusr LIKE vbselect-vbbname
      AND vbdate > vbdate_from
      AND vbkey LIKE vbselect-vbkey
      AND vbname LIKE vbserver
      ORDER BY vbdate DESCENDING.
        MOVE-CORRESPONDING vbhdr_line TO ls_upd_records. "+V001
        APPEND ls_upd_records TO lt_upd_records. "+V001
      ENDSELECT.
  ENDCASE.
  LOOP AT lt_upd_records INTO ls_upd_records.
* Datum und Uhrzeit separieren
    ls_upd_records-datum = ls_upd_records-vbdate+0(8).
    MOVE ls_upd_records-vbdate+8(6) TO ls_upd_records-zeit.
* eigenene Saetze werden markiert
    IF ls_upd_records-vbusr = sy-uname.
      ls_upd_records-line_col = 'C30'.
    ELSE.
      CLEAR ls_upd_records-line_col.
    ENDIF.
* Status Spalte: Text setzen und entsprechend einfaerben
    CLEAR ls_upd_records-field_col[].
    PERFORM alv_get_vbrc_text USING ls_upd_records-vbrc
          ls_upd_records-status
          color_column-color-col
          color_column-color-int.
    color_column-color-inv = 0.
    APPEND color_column TO ls_upd_records-field_col.
* VBCLIINFO ICONS und Quickinfo setzen
    CLEAR ls_upd_records-info.
    IF ls_upd_records-vbcliinfo O vb_sync_vb.
      ls_upd_records-info1 = lc_150.
    ENDIF.
    IF ls_upd_records-vbcliinfo O vb_dont_process_again.
      ls_upd_records-info2 = lc_151.
    ENDIF.
    IF ls_upd_records-vbcliinfo O vb_with_enqueue.
      ls_upd_records-info3 = lc_152.
    ENDIF.
    IF ls_upd_records-vbcliinfo O vb_external_commit.
      ls_upd_records-info4 = lc_153.
    ENDIF.
    IF ls_upd_records-vbcliinfo O vb_enqueues_released.
      ls_upd_records-info5  = lc_154.
      CLEAR ls_upd_records-info3.
    ENDIF.
    IF ls_upd_records-vbcliinfo O vb_from_bi.
      ls_upd_records-info6 = lc_155.
    ENDIF.
    MODIFY lt_upd_records FROM ls_upd_records.
    CLEAR: ls_upd_records. "+V001
  ENDLOOP.
ENDFORM.                    "load_upd_records

*&---------------------------------------------------------------------*
*&      Form  alv_get_vbrc_text
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->RC         text
*      -->STATUS     text
*      -->COLOR      text
*      -->INTENSE    text
*----------------------------------------------------------------------*
FORM alv_get_vbrc_text USING rc LIKE vbhdr-vbrc
      status LIKE ls_upd_records-status
      color TYPE i
      intense TYPE i.

  CONSTANTS: vb_notexecuted        LIKE th_vb_rc VALUE 255,
             vb_autosysexec        LIKE th_vb_rc VALUE 254,
             vb_autodiaexec        LIKE th_vb_rc VALUE 253,
             vb_restart_v1         LIKE th_vb_rc VALUE 250,
             vb_restart_v2         LIKE th_vb_rc VALUE 249,
             vb_v1_ok              LIKE th_vb_rc VALUE 1,
             vb_run_col            LIKE th_vb_rc VALUE 242,
             vb_run_v1             LIKE th_vb_rc VALUE 246,
             vb_run_v2             LIKE th_vb_rc VALUE 252,
             vb_delete             LIKE th_vb_rc VALUE 251,
             vb_autodelete         LIKE th_vb_rc VALUE 248,
             vb_enq_released       LIKE th_vb_rc VALUE 21,
             vb_executed           LIKE th_vb_rc VALUE 247,
             vb_external_prepared  LIKE th_vb_rc VALUE 244,
             vb_ok                 LIKE th_vb_rc VALUE 0,
             vb_external_abort     LIKE th_vb_rc VALUE 19,
             vb_run_stopped        LIKE th_vb_rc VALUE 12,
             vb_v2_ok              LIKE th_vb_rc VALUE 245,
             vb_v2_err             LIKE th_vb_rc VALUE 200,
             vb_col_err            LIKE th_vb_rc VALUE 201,
             vb_dont_process_again LIKE th_vb_cliinfo VALUE 2,
             vb_external_commit    LIKE th_vb_cliinfo VALUE 32.

  CASE rc.
    WHEN vb_notexecuted.
      status = lc_initial.
      color = col_positive.
      intense = 0.
    WHEN vb_autosysexec.
      status = lc_autosys.
      color = col_positive.
      intense = 0.
    WHEN vb_autodiaexec.
      status = lc_autodia.
      color = col_positive.
      intense = 0.
    WHEN vb_restart_v1 OR vb_restart_v2
      OR vb_run_col OR vb_run_v1
      OR vb_run_v2.
      status = lc_started.
      color = col_positive.
      intense = 0.
    WHEN vb_v1_ok.
      status = lc_v1.
      color = col_positive.
      intense = 1.
    WHEN vb_v2_ok.
      status = lc_v2.
      color = col_positive.
      intense = 1.
    WHEN vb_delete OR vb_autodelete.
      status = lc_delete.
      color = col_total.
      intense = 0.
    WHEN vb_enq_released.
      status = lc_enqueue.
      color = col_negative.
      intense = 1.
    WHEN vb_ok OR vb_executed.
      status = lc_processed.
      color = col_positive.
      intense = 1.
    WHEN vb_external_prepared.
      status = lc_prepared.
      color = col_positive.
      intense = 1.
    WHEN vb_external_abort.
      status = lc_canceled.
      color = col_negative.
      intense = 1.
    WHEN vb_run_stopped.
      status = lc_stopped.
      color = col_total.
      intense = 1.
    WHEN vb_v2_err.
      status = lc_err_v2.
      color = col_total.
      intense = 1.
    WHEN vb_col_err.
      status = lc_collect.
      color = col_total.
      intense = 1.
    WHEN OTHERS.
* jetzt kommen nur noch Fehler
      color = col_negative.
      IF ls_upd_records-vbcliinfo O vb_external_commit.
        status = lc_commit.
        intense = 0.
      ELSEIF ls_upd_records-vbcliinfo O vb_dont_process_again.
        status = lc_noretry.
        intense = 1.
      ELSE.
        status = lc_error.
        intense = 0.
      ENDIF.
  ENDCASE.
ENDFORM.                    "alv_get_vbrc_text