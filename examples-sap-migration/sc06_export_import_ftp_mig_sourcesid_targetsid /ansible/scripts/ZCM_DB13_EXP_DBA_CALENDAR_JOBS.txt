*---------------------------------------------------------------------*
* Program Name        :  ZCM_DB13_EXP_DBA_CALENDAR_JOBS               *
* Title               :  DB Calendar related data Export              *
* Purpose             :  This report is used to export  DB calendar   *
*                     :  related data from system tcode DB13 pre      *
*                     :  migartion                                    *
*---------------------------------------------------------------------*
* Related Transaction OR Standard Program References                  *
* DB13                                                                *
*---------------------------------------------------------------------*
* Tables              :   SELECT    UPDATE      INSERT      DELETE    *
* XXXXX                     X                                         *
*---------------------------------------------------------------------*
* Program Change History                                              *
*---------------------------------------------------------------------*
*Date        Version   Author       TR#/Local     Description         *
*---------------------------------------------------------------------*
*08-20-2020 Initial   Ashwini       Local        To export DB calendar*
*                                                related data from sys*
*                                                tem                  *
*09-15-2022  V001     Soumya Ray   Local         To remove inline de- *
*                                                 clarations          *
*---------------------------------------------------------------------*

REPORT zcm_db13_exp_dba_calendar_jobs.

FORM get_config
              TABLES ft_input  STRUCTURE tab512
                     ft_output STRUCTURE tab512.

  CONSTANTS: lc_sep       TYPE c      VALUE '|',
             lc_once      TYPE char20 VALUE 'Once only',
             lc_null      TYPE char6  VALUE 'NULL',
             lc_act_exp   TYPE char6  VALUE 'EXPORT',
             lc_planned   TYPE char20 VALUE 'Planned',
             lc_hour      TYPE char20 VALUE 'Hourly',
             lc_daily     TYPE char20 VALUE 'Daily',
             lc_week      TYPE char20 VALUE 'Weekly',
             lc_recu      TYPE char20 VALUE 'Recurrence',
             lc_day       TYPE char20 VALUE 'Day for DBA action',
             lc_time      TYPE char20 VALUE 'Time for DBA action',
             lc_tmpstmp   TYPE char50 VALUE 'Schedule timestamp',
             lc_sysid     TYPE char10 VALUE 'Sys ID',
             lc_typ       TYPE char20 VALUE 'DBA type',
             lc_dur       TYPE char50 VALUE 'DBA duration',
             lc_del       TYPE char50 VALUE 'END timestamp',
             lc_first     TYPE char50 VALUE 'First run timestamp',
             lc_client    TYPE char20 VALUE 'Client ID',
             lc_host      TYPE char20 VALUE 'Execution host',
             lc_status    TYPE char20 VALUE 'Job status',
             lc_pos       TYPE char20 VALUE 'Position',
             lc_res_typ   TYPE char20 VALUE 'Resource type',
             lc_res_name  TYPE char20 VALUE 'Resource name',
             lc_res_name1 TYPE char20 VALUE 'Resource name1',
             lc_msg       TYPE char80 VALUE
             'No data found',
* Begin of changes in V001
             lc_inc_input TYPE c VALUE 'Incorrect input'    LENGTH 20,
             lc_noinput   TYPE c VALUE 'No input given'     LENGTH 20.
* End of changes in V001

  TYPES: BEGIN OF lty_status,
           action     TYPE sdba_btype,
           starttstmp TYPE sdba_frsts,
           status     TYPE string,
         END OF lty_status.
  TYPES:BEGIN OF action_descr,
          id    TYPE sdba_btype,
          descr TYPE sdba_lname,
        END OF action_descr.

  DATA: ls_input         TYPE tab512,
        ls_output        TYPE tab512,
        ls_prefinal      TYPE string,
        lv_startdate     TYPE sydatum,
        lv_action        TYPE char8,
        lv_from_date     TYPE sydatum,
        lv_to_date       TYPE sydatum,
        lv_period        TYPE i,
        lt_sdbap1        TYPE STANDARD TABLE OF sdbap,
        lt_sdbap2        TYPE STANDARD TABLE OF sdbap,
        lt_action_buffer TYPE  db6jo_action_table,
        lt_logs          TYPE db6jo_log_entry_table,
        lt_batchlog      TYPE db6jo_batchlog_table,
        ls_sdbap         TYPE sdbap,
        lv_msg           TYPE string,
        lv_line          TYPE c LENGTH 254,
        lt_actions       TYPE STANDARD TABLE OF sdbac,
        ls_action        TYPE sdbac,
        lv_status        TYPE i,
        lt_status        TYPE STANDARD TABLE OF lty_status,
        ls_status        TYPE lty_status.

  DATA: lv_sys_id             TYPE sy-sysid,
        lv_current_dba_config TYPE REF TO cl_dba_config,
        lo_sys                TYPE REF TO cl_db6_sys,
        lo_exec               TYPE REF TO cx_db6_sys,
        lv_function_name      TYPE syrepid,
        lv_datum              TYPE sy-datum,
        lv_daye               TYPE scal-indicator,
        lt_expanded_planning  TYPE TABLE OF sdbap,
        lt_db6_logs           TYPE TABLE OF db6pmprot,
        ls_logs               TYPE  db6pmprot.

  DATA: lv_seconds TYPE i,
        lv_start   TYPE db6tstamp_struct,
        lv_endtime TYPE db6tstamp_struct,
        lv_running TYPE db6tstamp_struct,
        lv_count   TYPE i,
        ls_start   TYPE db6tstamp_struct,
        ls_overdue TYPE db6tstamp_struct,
        ls_gone    TYPE db6tstamp_struct,
        ls_running TYPE db6tstamp_struct,
        ls_endtime TYPE db6tstamp_struct,
* Begin of changes in V001
        lv_dbname  TYPE dbcon_dbms,
        lv_tstmp   TYPE sdba_frsts,
        lt_sdbar   TYPE STANDARD TABLE OF sdbar,
        lt_sdbap   TYPE STANDARD TABLE OF sdbap,
        lt_sdbah   TYPE STANDARD TABLE OF sdbah.

  FIELD-SYMBOLS: <fs_sdbar> TYPE sdbar,
                 <field>    TYPE any.
* End of changes in V001


  CLEAR: ls_output,
         lv_datum,
         lv_msg,
         lv_start,
         lv_endtime,
         lv_status,
         lv_running,
         lv_current_dba_config,
         ls_action,
         ls_start,
         ls_overdue,
         ls_gone,
         lv_seconds,
         ls_running,
         ls_endtime,
         ls_logs,
         ls_prefinal,
         ls_sdbap,
         lv_daye,
         lv_tstmp, lv_dbname. "+V001

  FREE: lt_actions,
        lt_sdbar, lt_sdbap, lt_sdbah. "+V001

  " Title
  CLEAR: ls_output.
  ls_output = 'DBA planned data for recurrence jobs'.
  APPEND ls_output TO ft_output.

  " Read input values from Python
  READ TABLE ft_input INTO ls_input INDEX 1.
* Begin of changes in V001
  IF sy-subrc NE 0.
    " No input given
    ls_output = lc_noinput.
    APPEND ls_output TO ft_output.
    CLEAR ls_output.
    RETURN.
  ENDIF.
* End of changes in V001.
  lv_action = ls_input.

  CASE lv_action.

    WHEN lc_act_exp. "EXPORT

      "Recurrence Job details
      DATA: lv_timestmp TYPE sdba_delts,
            lv_text     TYPE string.
      APPEND ls_output TO ft_output.

      " Heading Columns
      CLEAR: ls_output.
      CONCATENATE lc_day     lc_sep
                  lc_time    lc_sep
                  lc_tmpstmp lc_sep
                  lc_sysid   lc_sep
                  lc_typ     lc_sep
                  lc_dur     lc_sep
                  lc_del     lc_sep
                  lc_first   lc_sep
                  lc_status  lc_sep
                  lc_recu INTO ls_output.
      APPEND ls_output TO ft_output.
      CLEAR ls_output.

      "Planned Jobs
      CONCATENATE sy-datum sy-uzeit INTO lv_timestmp.

      FREE lt_sdbap1.
      CLEAR ls_sdbap.

      SELECT * FROM sdbap INTO TABLE lt_sdbap1
        FOR ALL ENTRIES IN lt_actions
        WHERE btype = lt_actions-shortcut
        AND   period NE space
        AND   deltstmp GT lv_timestmp.
      IF sy-subrc = 0.
        LOOP AT lt_sdbap1 INTO ls_sdbap.
          IF ls_sdbap-daye = '0' AND
                  ls_sdbap-timee = '240000' AND
                  ls_sdbap-period = '001'.
            lv_text = lc_hour.
          ENDIF.
          IF ls_sdbap-period = '007'.
            lv_text = lc_week.
          ENDIF.
          IF ls_sdbap-period = '001'
            AND ls_sdbap-timee NE '240000'.
            lv_text = lc_daily.
          ENDIF.
          IF ls_sdbap-daye IS INITIAL.
            ls_sdbap-daye = lc_null.
          ENDIF.
          IF ls_sdbap-timee IS INITIAL.
            ls_sdbap-timee = lc_null.
          ENDIF.
          IF ls_sdbap-cretstmp  IS INITIAL.
            ls_sdbap-cretstmp  = lc_null.
          ENDIF.
          IF ls_sdbap-sysid IS INITIAL.
            ls_sdbap-sysid = lc_null.
          ENDIF.
          IF ls_sdbap-btype IS INITIAL.
            ls_sdbap-btype = lc_null.
          ENDIF.
          IF ls_sdbap-period IS INITIAL.
            ls_sdbap-period = lc_null.
          ENDIF.
          IF ls_sdbap-deltstmp IS INITIAL.
            ls_sdbap-deltstmp = lc_null.
          ENDIF.
          IF ls_sdbap-starttstmp IS INITIAL.
            ls_sdbap-starttstmp = lc_null.
          ENDIF.
          IF lv_text IS INITIAL.
            lv_text = lc_null.
          ENDIF.

          CONCATENATE     ls_sdbap-daye       lc_sep
               ls_sdbap-timee      lc_sep
               ls_sdbap-cretstmp   lc_sep
               ls_sdbap-sysid      lc_sep
               ls_sdbap-btype      lc_sep
               ls_sdbap-period     lc_sep
               ls_sdbap-deltstmp   lc_sep
               ls_sdbap-starttstmp lc_sep
               lc_planned          lc_sep
               lv_text
               INTO ls_prefinal.
          PERFORM end_null_check CHANGING ls_prefinal.
          ls_output = ls_prefinal.
          APPEND ls_output TO ft_output.
          CLEAR: ls_output, ls_sdbap, ls_prefinal.
        ENDLOOP.
      ENDIF.

      FREE lt_sdbap2.
      CLEAR: ls_sdbap.
      SELECT * FROM sdbap INTO TABLE lt_sdbap2
        FOR ALL ENTRIES IN lt_actions
        WHERE btype = lt_actions-shortcut
        AND   period   NE space
        AND   deltstmp EQ space.
      IF sy-subrc = 0.
        LOOP AT lt_sdbap2 INTO ls_sdbap.
          IF ls_sdbap-daye = '0' AND
                  ls_sdbap-timee = '240000' AND
                  ls_sdbap-period = '001'.
            lv_text = lc_hour.
          ENDIF.
          IF ls_sdbap-period = '007'.
            lv_text = lc_week.
          ENDIF.
          IF ls_sdbap-period = '001'
            AND ls_sdbap-timee NE '240000'.
            lv_text = lc_daily.
          ENDIF.
          IF ls_sdbap-daye IS INITIAL.
            ls_sdbap-daye = lc_null.
          ENDIF.
          IF ls_sdbap-timee IS INITIAL.
            ls_sdbap-timee = lc_null.
          ENDIF.
          IF ls_sdbap-cretstmp  IS INITIAL.
            ls_sdbap-cretstmp  = lc_null.
          ENDIF.
          IF ls_sdbap-sysid IS INITIAL.
            ls_sdbap-sysid = lc_null.
          ENDIF.
          IF ls_sdbap-btype IS INITIAL.
            ls_sdbap-btype = lc_null.
          ENDIF.
          IF ls_sdbap-period IS INITIAL.
            ls_sdbap-period = lc_null.
          ENDIF.
          IF ls_sdbap-deltstmp IS INITIAL.
            ls_sdbap-deltstmp = lc_null.
          ENDIF.
          IF ls_sdbap-starttstmp IS INITIAL.
            ls_sdbap-starttstmp = lc_null.
          ENDIF.
          IF lv_text IS INITIAL.
            lv_text = lc_null.
          ENDIF.
          CONCATENATE     ls_sdbap-daye       lc_sep
               ls_sdbap-timee      lc_sep
               ls_sdbap-cretstmp   lc_sep
               ls_sdbap-sysid      lc_sep
               ls_sdbap-btype      lc_sep
               ls_sdbap-period     lc_sep
               ls_sdbap-deltstmp   lc_sep
               ls_sdbap-starttstmp lc_sep
               lc_planned          lc_sep
               lv_text
        INTO ls_prefinal.
          PERFORM end_null_check CHANGING ls_prefinal.
          ls_output = ls_prefinal.
          APPEND ls_output TO ft_output.
          CLEAR: ls_output, ls_sdbap, ls_prefinal.
        ENDLOOP.
      ENDIF.

      FREE : lt_sdbap2[].
      CLEAR: ls_sdbap.

      CONCATENATE sy-datum sy-uzeit INTO lv_tstmp.

      SELECT * FROM sdbap INTO TABLE lt_sdbap2
        FOR ALL ENTRIES IN lt_actions
        WHERE btype = lt_actions-shortcut
        AND   period   EQ space
        AND   starttstmp GT lv_tstmp.
      IF sy-subrc = 0.
        LOOP AT lt_sdbap2 INTO ls_sdbap.

          IF ls_sdbap-daye IS INITIAL.
            ls_sdbap-daye = lc_null.
          ENDIF.
          IF ls_sdbap-timee IS INITIAL.
            ls_sdbap-timee = lc_null.
          ENDIF.
          IF ls_sdbap-cretstmp  IS INITIAL.
            ls_sdbap-cretstmp  = lc_null.
          ENDIF.
          IF ls_sdbap-sysid IS INITIAL.
            ls_sdbap-sysid = lc_null.
          ENDIF.
          IF ls_sdbap-btype IS INITIAL.
            ls_sdbap-btype = lc_null.
          ENDIF.
          IF ls_sdbap-period IS INITIAL.
            ls_sdbap-period = lc_null.
          ENDIF.
          IF ls_sdbap-deltstmp IS INITIAL.
            ls_sdbap-deltstmp = lc_null.
          ENDIF.
          IF ls_sdbap-starttstmp IS INITIAL.
            ls_sdbap-starttstmp = lc_null.
          ENDIF.

          lv_text = lc_once.

          CONCATENATE     ls_sdbap-daye       lc_sep
               ls_sdbap-timee      lc_sep
               ls_sdbap-cretstmp   lc_sep
               ls_sdbap-sysid      lc_sep
               ls_sdbap-btype      lc_sep
               ls_sdbap-period     lc_sep
               ls_sdbap-deltstmp   lc_sep
               ls_sdbap-starttstmp lc_sep
               lc_planned          lc_sep
               lv_text
        INTO ls_prefinal.
          PERFORM end_null_check CHANGING ls_prefinal.
          ls_output = ls_prefinal.
          APPEND ls_output TO ft_output.
          CLEAR: ls_output, ls_sdbap, ls_prefinal.
        ENDLOOP.
      ENDIF.

      DESCRIBE TABLE ft_output LINES lv_count.
      IF lv_count LT 3.
        DELETE ft_output INDEX 2.
        ls_output = 'Planned Jobs not found'.
        APPEND ls_output TO ft_output.
      ENDIF.

* Under the pre-migration activities, the data
* related to DBA planning created in the system exported to Python
* The table SDBAP holds this data. This is read to
* determine the number of DBA planning actions in the system
      PERFORM get_action_list TABLES lt_actions.

      SELECT *
          FROM sdbap
          INTO TABLE lt_sdbap
        FOR ALL ENTRIES IN lt_actions
        WHERE btype = lt_actions-shortcut.
      IF sy-subrc EQ 0.
        SORT: lt_sdbap[] BY daye.
      ENDIF.
***get action details

      SORT lt_actions BY shortcut.
***Below code is to read the job status

      SELECT  *
        FROM sdbah
        INTO TABLE lt_sdbah.
      IF sy-subrc EQ 0.
        SORT lt_sdbah BY funct beg DESCENDING.
      ENDIF.
      "get start date value
      DELETE lt_sdbap WHERE btype IS INITIAL.
      SORT lt_sdbap BY  starttstmp ASCENDING.
      READ TABLE lt_sdbap INTO ls_sdbap INDEX 1.
      lv_startdate = ls_sdbap-starttstmp+0(8).
      CLEAR: ls_sdbap.

      IF lt_sdbap[] IS NOT INITIAL.

        " Title
        CLEAR: ls_output.
        ls_output = 'DBA planning data'.
        APPEND ls_output TO ft_output.

        " Heading Columns
        CLEAR: ls_output.
        CONCATENATE lc_day     lc_sep
                    lc_time    lc_sep
                    lc_tmpstmp lc_sep
                    lc_del     lc_sep
                    lc_sysid   lc_sep
                    lc_typ     lc_sep
                    lc_status INTO ls_output.
        APPEND ls_output TO ft_output.

        "adding new logic

        lv_sys_id = sy-sysid. "System ID

        TRY .
            cl_db6_sys=>get_sys_ref(
        EXPORTING
          system_id     = lv_sys_id
        RECEIVING
          sys_ref       = lo_sys        ).

          CATCH cx_db6_sys INTO lo_exec.

        ENDTRY.

***Read the database name
        IF lo_sys IS BOUND.
          IF lo_sys->con_ref IS NOT INITIAL.
            lv_dbname = lo_sys->con_ref->con_data-dbms.
          ELSE.
***Check for current s/m being SQL
            IF lo_sys->sys_data IS NOT INITIAL.
              lv_dbname = lo_sys->sys_data-dbsys.
            ENDIF.
          ENDIF.
        ENDIF.

**Function Name
        CONCATENATE lv_dbname '_LOG_READ'
          INTO lv_function_name.

**Call function
        CALL FUNCTION lv_function_name
          DESTINATION lo_sys->sys_data-rfcdest
          EXPORTING
            connection = lo_sys->sys_data-dbcname
            from_date  = lv_startdate
            from_time  = '000000'
            to_date    = sy-datum
            to_time    = '235959'
            system_id  = lv_sys_id
          TABLES
            logs       = lt_db6_logs
            plannings  = lt_sdbap.

        CLEAR: ls_logs,
               ls_sdbap.

        SORT lt_sdbap BY starttstmp.
        SORT lt_db6_logs BY starttime DESCENDING.

**Get status of jobs
        LOOP AT lt_db6_logs INTO ls_logs.

          CASE ls_logs-returncode.
            WHEN 0.
              lv_status = cl_db6_calendar_action=>act_finished.
              lv_msg =
              cl_dba_image=>image_of_action_status( lv_status ).
            WHEN 1.
              lv_status = cl_db6_calendar_action=>act_warning.
              lv_msg =
               cl_dba_image=>image_of_action_status( lv_status ).
            WHEN cl_db6_rc=>x_undefined.
              "Calculating endtime and running time
              IF  ls_logs-endtime IS INITIAL.

                ls_start = ls_logs-starttime.

                lv_current_dba_config =
         cl_dba_config=>get_ref( sysid = lv_sys_id dbsys = lv_dbname  ).

                lv_seconds =
                lv_current_dba_config->get_batch_overdue_time( ).

                lv_running =
                cl_db6_calendar_tool=>add_seconds_to_timestamp(
                seconds   = lv_seconds
                timestamp = ls_start ).

              ELSE.
                lv_endtime = ls_logs-endtime.
                lv_running =
           cl_db6_calendar_tool=>add_hours_to_timestamp( hours     = 12
                timestamp = lv_endtime ).
              ENDIF.
              "Get running or error status
              IF lv_running-date > sy-datum OR
                ( lv_running-date = sy-datum AND
                lv_running-time > sy-uzeit     ).
                lv_status = cl_db6_calendar_action=>act_running.
                lv_msg =
                cl_dba_image=>image_of_action_status( lv_status ).
              ELSE.
                lv_status = cl_db6_calendar_action=>act_error.
                lv_msg =
                cl_dba_image=>image_of_action_status( lv_status ).
              ENDIF.
            WHEN OTHERS.
              lv_status = cl_db6_calendar_action=>act_error.
              lv_msg =
              cl_dba_image=>image_of_action_status( lv_status ).
          ENDCASE.
          lv_datum = ls_logs-starttime+0(8).

          CALL FUNCTION 'DATE_COMPUTE_DAY'
            EXPORTING
              date = lv_datum
            IMPORTING
              day  = lv_daye.

          CONCATENATE lv_daye                   lc_sep
                      ls_logs-starttime+8(6)    lc_sep
                      ls_logs-starttime         lc_sep
                      ls_logs-endtime           lc_sep
                      ls_logs-system_id         lc_sep
                      ls_logs-progid            lc_sep
                      lv_msg INTO ls_prefinal.

          PERFORM end_null_check CHANGING ls_prefinal.
          ls_output = ls_prefinal.
          APPEND ls_output TO ft_output.

          CLEAR: ls_output,
                 lv_datum,
                 lv_msg,
                 lv_start,
                 lv_endtime,
                 lv_status,
                 lv_running,
                 lv_current_dba_config,
                 ls_action,
                 ls_start,
                 ls_overdue,
                 ls_gone,
                 lv_seconds,
                 ls_running,
                 ls_endtime,
                 ls_logs,
                 ls_prefinal,
                 ls_sdbap,
                 lv_daye.

        ENDLOOP.

      ELSE.

        " Title
        CLEAR: ls_output.
        ls_output = 'DBA planning data'.
        APPEND ls_output TO ft_output.

        CLEAR: ls_output.
        " No DBA planning data present in the system
        ls_output = lc_msg.
        APPEND ls_output TO ft_output.

      ENDIF.

      "adding null to blanks - in betweeen
      PERFORM null_check TABLES  ft_output.


* Under the pre-migration activities, the data related to
* DBA resource created in the system exported to Python
* The table SDBAR holds this data. This is read to
* determine the number of DBA resource data in the system

      SELECT *
      FROM sdbar
      INTO TABLE lt_sdbar.
      IF sy-subrc EQ 0.
        SORT: lt_sdbar[] BY daye.
      ENDIF.

      IF lt_sdbar[] IS NOT INITIAL.

        CLEAR: ls_output.
        ls_output = ' '.
        APPEND ls_output TO ft_output.

        " Title
        CLEAR: ls_output.
        ls_output = 'DBA resource data'.
        APPEND ls_output TO ft_output.

        " Heading Columns
        CLEAR: ls_output.
        CONCATENATE lc_day       lc_sep
                    lc_time      lc_sep
                    lc_tmpstmp   lc_sep
                    lc_sysid     lc_sep
                    lc_pos       lc_sep
                    lc_res_typ   lc_sep
                    lc_res_name  lc_sep
                    lc_res_name1 INTO ls_output.
        APPEND ls_output TO ft_output.

        " Data
        LOOP AT lt_sdbar ASSIGNING <fs_sdbar>.

          DO.

            ASSIGN COMPONENT sy-index
            OF STRUCTURE <fs_sdbar> TO <field>.

            CONDENSE <field>.

            IF sy-subrc <> 0.
              EXIT.
            ENDIF.

            IF <field> IS INITIAL.
              <field> = 'NULL'.
            ENDIF.

            IF sy-index EQ 1.
              ls_output = <field>.
            ELSE.
              CONCATENATE ls_output <field> INTO ls_output
              SEPARATED BY lc_sep.
            ENDIF.

          ENDDO.

          CONDENSE ls_output.
          APPEND ls_output TO ft_output.
          CLEAR: ls_output.
        ENDLOOP.

      ELSE.

        CLEAR: ls_output.
        ls_output = ' '.
        APPEND ls_output TO ft_output.

        " Title
        CLEAR: ls_output.
        ls_output = 'DBA resource data'.
        APPEND ls_output TO ft_output.

        CLEAR: ls_output.
        " No DBA resource data present in the system
        ls_output = lc_msg.
        APPEND ls_output TO ft_output.

      ENDIF.

    WHEN OTHERS.
* Begin of changes in V001
      " Incorrect input
      ls_output = lc_inc_input.
      APPEND ls_output TO ft_output.
      CLEAR ls_output.
* End of changes in V001


  ENDCASE.

ENDFORM.
FORM end_null_check CHANGING ls_string TYPE string.

  DATA lv_last_char TYPE char1.

  lv_last_char = substring( val = ls_string
                   off = strlen( ls_string ) - 1
                   len = 1 ).
  IF lv_last_char = '|'.
    CONCATENATE ls_string 'NULL'
      INTO ls_string.
  ENDIF..

ENDFORM.
FORM null_check  TABLES   lt_table TYPE table.

  DO .
    REPLACE ALL OCCURRENCES OF SUBSTRING '||'
    IN TABLE lt_table WITH '|NULL|'.
    FIND '||' IN TABLE lt_table.
    IF sy-subrc <> 0.
      EXIT .
    ENDIF.
  ENDDO.

ENDFORM.

FORM get_action_list  TABLES  lt_action STRUCTURE sdbac.

  TYPES:BEGIN OF action_descr,
          id    TYPE sdba_btype,
          descr TYPE sdba_lname,
        END OF action_descr.

  DATA:ls_input            TYPE tab512,
       lv_action           TYPE char8,
       ls_prefinal         TYPE string,
       ls_output           TYPE tab512,
       ls_action           TYPE sdbac,
       cfg_excp            TYPE REF TO cx_db6_calendar_cfg,
       lv_sys_id           TYPE sy-sysid,
       lo_sys              TYPE REF TO cl_db6_sys,
       lo_exec             TYPE REF TO cx_db6_sys,
       is_valid            TYPE abap_bool,
       action_table_buffer TYPE db6jo_action_descr_table,
       actions_display     TYPE TABLE OF action_descr,
       action_list         TYPE db6jo_action_name_table,
       local_actions       TYPE db6jo_action_config,
       cfg_meta_ref        TYPE REF TO cl_dba_calendar_cfg_meta,
       actions             TYPE dba_sdbac_list,
       wa_job              TYPE action_descr,
       is_offline          TYPE abap_bool,
       count               TYPE i,
       wa_action_descr     TYPE db6jo_action_descr_entry,
       function_name       TYPE syrepid.

  lv_sys_id = sy-sysid. "System ID

*  CONCATENATE lc_id lc_sep
*  lc_action INTO ls_output.
*  APPEND ls_output TO ft_output.

  TRY .
      cl_db6_sys=>get_sys_ref(
  EXPORTING
    system_id     = lv_sys_id
  RECEIVING
    sys_ref       = lo_sys        ).

    CATCH cx_db6_sys INTO lo_exec.

  ENDTRY.
***Read the database name
  IF lo_sys IS BOUND.
    IF lo_sys->con_ref IS NOT INITIAL.
      DATA(lv_dbname) = lo_sys->con_ref->con_data-dbms.
    ELSE.
*        Check for current s/m being SQL
      IF lo_sys->sys_data IS NOT INITIAL.
        lv_dbname = lo_sys->sys_data-dbsys.
      ENDIF.
    ENDIF.
  ENDIF.
  "Function Name
  CONCATENATE
  lo_sys->sys_data-dbsys '_JOB_GET_ACTION_DESCRIPTION'
     INTO function_name.
*      TRY.
  CALL FUNCTION function_name
    EXPORTING
      system                = lo_sys
      offline               = is_offline
    TABLES
      actions               = actions
    EXCEPTIONS
      no_configuration_data = cl_db6_rc=>x_no_configuration_data.
  "Get local actions
  local_actions = cl_dba_calendar_cfg_meta=>get_ref( dbsys    = '*'
  db_opsys = '*' )->sdbac.

  APPEND LINES OF local_actions TO actions.

  LOOP AT actions INTO wa_action_descr-sdba.
    IF wa_action_descr-sdba-atype = 'BIFWK' OR
       wa_action_descr-sdba-atype = 'TCOLL'.
      wa_action_descr-category = cl_dba_calendar_cfg=>category_coll.
    ELSE.
      IF wa_action_descr-sdba-ctype = db6jo_ctype_report.
        SELECT COUNT(*) FROM tcoll INTO count
          WHERE rname = wa_action_descr-sdba-cname. "#EC
        IF sy-subrc = 0 AND count = 1.
          wa_action_descr-category =
          cl_dba_calendar_cfg=>category_coll.
        ELSE.
          wa_action_descr-category =
          cl_dba_calendar_cfg=>category_plan.
        ENDIF.
      ELSE.
        wa_action_descr-category =
        cl_dba_calendar_cfg=>category_plan.
      ENDIF.
    ENDIF.
    APPEND wa_action_descr TO action_table_buffer[].
    CLEAR: wa_action_descr.
  ENDLOOP.

  LOOP AT action_table_buffer INTO wa_action_descr
    WHERE category     =
    cl_dba_calendar_cfg=>category_plan AND
    sdba-atype IS INITIAL.
    IF sy-subrc = 0  AND
      ( lo_sys->sys_data-cockrel >= wa_action_descr-sdba-begrel
      OR wa_action_descr-sdba-begrel   IS INITIAL )
      AND
      ( lo_sys->sys_data-saprel <= wa_action_descr-sdba-endrel
      OR wa_action_descr-sdba-endrel   IS INITIAL )
      AND
      ( lo_sys->sys_data-dbrel  >= wa_action_descr-sdba-begdbrel
      OR
      wa_action_descr-sdba-begdbrel IS INITIAL )
      AND
      ( lo_sys->sys_data-dbrel  <= wa_action_descr-sdba-enddbrel
      OR
      wa_action_descr-sdba-enddbrel IS INITIAL ).
      is_valid = abap_true.
    ELSE.
      is_valid = abap_false.
    ENDIF.
    IF ( ( lo_sys->is_remote_system( ) = abap_false
     AND
      wa_action_descr-sdba-actmode = db6jo_actmode_r3 )
      OR
      ( lo_sys->is_remote_system( ) = abap_true
      AND
      wa_action_descr-sdba-actmode = db6jo_actmode_native ) OR
      wa_action_descr-sdba-actmode = db6jo_actmode_both ) AND
      is_valid = abap_true.
      wa_job-id = wa_action_descr-sdba-shortcut.
      wa_job-descr = wa_action_descr-sdba-longname.
      APPEND wa_job TO actions_display.
      ls_action-shortcut = wa_job-id.
      ls_action-longname = wa_job-descr.
      APPEND ls_action TO lt_action.
    ENDIF.
    CLEAR: wa_action_descr, ls_prefinal, ls_output, ls_action, wa_job.
  ENDLOOP.
ENDFORM.