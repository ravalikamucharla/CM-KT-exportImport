*---------------------------------------------------------------------*
* Program Name        :  ZCM_SMGW_EXP_REGINFO                         *
* Title               :  Export REGINFO data in SMGW                  *
* Purpose             :  This report is for exporting REGINFO data in *
*                         SMGW during Cloud Migration                 *
*---------------------------------------------------------------------*
* Related Transaction OR Standard Program References                  *
* SMGW                                                                *
*---------------------------------------------------------------------*
* Tables              :   SELECT    UPDATE      INSERT      DELETE    *
* XXXXX                     X                                         *
*---------------------------------------------------------------------*
* Program Change History                                              *
*---------------------------------------------------------------------*
*Date        Version   Author         TR#/Local     Description       *
*---------------------------------------------------------------------*
*08-18-2020  Initial   Ruchir Kamble  Local       Export REGINFO data *
*                                                in SMGW              *
*07-28-2022   V001     Soumya Ray     Local   To pass message "No data*
*                                             found" in case of no    *
*                                             data found in sytem     *
*---------------------------------------------------------------------*

REPORT zcm_smgw_exp_reginfo.

LOAD-OF-PROGRAM.

FORM get_config
               TABLES lt_input  STRUCTURE tab512
                      lt_output STRUCTURE tab512.

  CONSTANTS: lc_acl_reg TYPE i VALUE 2,
             lc_export  TYPE c VALUE 'EXPORT'             LENGTH 6,
             lc_title   TYPE c VALUE 'Reginfo File'       LENGTH 12,
             lc_head    TYPE c VALUE 'Data'               LENGTH 4,
             lc_noinput TYPE c VALUE
             'No input passed'                            LENGTH 20,
             lc_inc_inp TYPE c VALUE
             'Incorrect input'                            LENGTH 20,
*  Begin of changes in V001
             lc_err_msg TYPE c VALUE
             'No data found'                              LENGTH 20.
*  End of changes in V001

  DATA: ls_input       TYPE tab512,
        ls_output      TYPE tab512,
        lv_action      TYPE char20,
        lv_marked_line TYPE c LENGTH 1,
        lt_acl_tab     TYPE gwy_acl_lines,
        ls_acl_tab     TYPE gwy_acl_line,
        lt_reginfo     TYPE STANDARD TABLE OF gwy_acl_line_colored,
        ls_reginfo     TYPE gwy_acl_line_colored,
        lt_data_line   TYPE gwy_acl_line_colored.

  " Adding title to the output
  ls_output = lc_title.
  APPEND ls_output TO lt_output.
  CLEAR ls_output.

  READ TABLE lt_input INTO ls_input INDEX 1.
  IF sy-subrc EQ 0.
    lv_action = ls_input.       " Action
  ELSE.
    " No input passed
    ls_output = lc_noinput.
    APPEND ls_output TO lt_output.
    CLEAR ls_output.
    RETURN.
  ENDIF.

  CASE lv_action.

    WHEN lc_export.      " If action is Export

      " FM to get SMGW data
      CALL FUNCTION 'GWY_READ_ACLFILE'
        EXPORTING
          acl_type = lc_acl_reg
        IMPORTING
          lines    = lt_acl_tab
          marked   = lv_marked_line
        EXCEPTIONS
          OTHERS   = 1.

      IF sy-subrc NE 0.
        " No records found in the system
        ls_output = lc_err_msg.
        APPEND ls_output TO lt_output.
        CLEAR: ls_output.
        RETURN.
      ENDIF.

      LOOP AT lt_acl_tab INTO ls_acl_tab.

        IF lv_marked_line = 'X'.
          lt_data_line-line = ls_acl_tab+1.
        ELSE.
          lt_data_line-line = ls_acl_tab.
        ENDIF.

        APPEND lt_data_line TO lt_reginfo.

      ENDLOOP.

      IF lt_reginfo IS NOT INITIAL.
        " Adding heading to the output
        ls_output = lc_head.
        APPEND ls_output TO lt_output.
        CLEAR ls_output.

        LOOP AT lt_reginfo INTO ls_reginfo.
          ls_output = ls_reginfo-line.
          APPEND ls_output TO lt_output.
          CLEAR: ls_output.
        ENDLOOP.
      ELSE.
        " No data found
        ls_output = lc_err_msg.
        APPEND ls_output TO lt_output.
        CLEAR: ls_output.
        RETURN.
      ENDIF.

    WHEN OTHERS.
      " Incorrect input
      ls_output = lc_inc_inp.
      APPEND ls_output TO lt_output.
      CLEAR ls_output.
      RETURN.

  ENDCASE.

ENDFORM.