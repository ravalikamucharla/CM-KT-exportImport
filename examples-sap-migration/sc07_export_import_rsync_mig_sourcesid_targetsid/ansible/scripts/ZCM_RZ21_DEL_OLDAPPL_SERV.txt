*---------------------------------------------------------------------*
* Program Name        :   ZCM_RZ21_DEL_OLDAPPL_SERV                   *
* Title               :   Delete local Segments in RZ21               *
* Purpose             :   To read local segments & delete old segments*
*---------------------------------------------------------------------*
* Related Transaction OR Standard Program References                  *
* RZ21                                                                *
*---------------------------------------------------------------------*
* Tables              :   SELECT    UPDATE      INSERT      DELETE    *
* XXXXX                     X                                         *
*---------------------------------------------------------------------*
* Program Change History                                              *
*---------------------------------------------------------------------*
*Date        Version   Author       TR#/Local     Description         *
*---------------------------------------------------------------------*
*12-01-2020  Initial   Soumya Ray   Local       To read local segments*
*                                               & delete old segments *
*04-13-2022  V001      Soumya Ray   Local      To correct the message *
*                                            in case of no data, wrong*
*                                              input and remove inline*
*                                              declarations           *
*---------------------------------------------------------------------*

REPORT zcm_rz21_del_oldappl_serv.

LOAD-OF-PROGRAM.

FORM get_config
               TABLES lt_input  STRUCTURE tab512 " Input from RFC
                      lt_output STRUCTURE tab512. " Output to RFC

  CONSTANTS: lc_sep       TYPE char1   VALUE '|',
             lc_delete    TYPE char1   VALUE 'D',
             lc_smsg      TYPE string  VALUE 'Segment deleted',
             lc_nodeldata TYPE string  VALUE
                            'Segments not deleted',
             lc_wrongdest TYPE string  VALUE
                            'Destination is not present',
             lc_unchanged TYPE string
                            VALUE 'No segments passed from input',
             lc_naction   TYPE string  VALUE 'No action performed',
             lc_export    TYPE char10  VALUE 'EXPORT',
             lc_headread  TYPE string  VALUE 'Segments in local system',
             lc_headdel   TYPE string  VALUE 'Segments delete status',
             lc_headndel  TYPE string  VALUE 'Segments not deleted',
             lc_segmname  TYPE char15  VALUE 'Segmentname',
             lc_dest      TYPE char15  VALUE 'Instance',
             lc_segstatus TYPE char15  VALUE 'Segmentstatus',
             lc_shutdown  TYPE char10  VALUE 'Shutdown',
             lc_offline   TYPE char10  VALUE 'Offline',
             lc_online    TYPE char10  VALUE 'Online',
             lc_fail      TYPE char10  VALUE 'Comm.fail',
* Begin of changes in V001
             lc_nodata    TYPE string  VALUE 'No data found',
             lc_noinput   TYPE c       VALUE
             'No input passed'         LENGTH 15.
* End of changes in V001

  TYPES: BEGIN OF lty_segment,
           segmname TYPE almsegname,
           dest     TYPE rfcdest,
           status   TYPE string,
           action   TYPE char1,
         END OF lty_segment.

  DATA: ls_output    TYPE tab512,
        lt_locsegm   TYPE csmlocsegm_tab,
        lt_segment_d TYPE TABLE OF lty_segment,
        ls_segment   TYPE lty_segment,
        lv_count     TYPE i VALUE 0,
        ls_prefinal  TYPE string,
        lv_number    TYPE char3,
        lv_status    TYPE string,
*   Begin of changes in V001
        ls_locsegm   TYPE csmlocsegm,
        ls_input     TYPE tab512,
        lv_action    TYPE string,
        lv_lines     TYPE i,
        lv_sysid     TYPE sy-sysid.
*   End of changes in V001


* Check if the input is more than 1 line as 1 line denotes its for read
*and more than 1 line for delete.
*//Start of logic to read segments in RZ21
  DESCRIBE TABLE lt_input LINES lv_lines.
  IF lv_lines EQ 1.
    ls_output = lc_headread. " Heading of the output
    APPEND ls_output TO lt_output.
    CLEAR ls_output.
* Read action required from Python interface
    READ TABLE lt_input INTO ls_input INDEX 1.
* Begin of changes in V001
    IF sy-subrc NE 0.
      ls_output = lc_noinput.
      APPEND ls_output TO lt_output.
      CLEAR ls_output.
      RETURN.
    ENDIF.
* End of changes in V001
    lv_action = ls_input.

* Case to read the local segments in RZ21
    CASE lv_action.
      WHEN lc_export.  "Export action
*    Method to pull the local segments into internal table
        CALL METHOD cl_ccms_al_local_segments=>get_table
          IMPORTING
            e_table = lt_locsegm.
        IF lt_locsegm IS NOT INITIAL.
          CONCATENATE lc_segmname lc_sep
          lc_dest     lc_sep
          lc_segstatus INTO ls_output. "Field heading

          APPEND ls_output TO lt_output.
          CLEAR ls_output.
*  Logic in loop to set status of the segments from segmstatus value
          LOOP AT lt_locsegm INTO ls_locsegm.
            IF ls_locsegm-segmstatus EQ 'S'. " shutdown
              lv_status = lc_shutdown.
            ELSEIF ls_locsegm-segmstatus EQ 'O'. "Offline
              lv_status = lc_offline.
            ELSEIF ls_locsegm-segmstatus EQ 'F'. "Comm.fail
              lv_status = lc_fail.
            ELSEIF ls_locsegm-segmstatus EQ ''.  "Online
              lv_status = lc_online.
            ENDIF.
            CONCATENATE ls_locsegm-segmname lc_sep
            ls_locsegm-destinat lc_sep
            lv_status INTO ls_prefinal." Value of segments

            PERFORM end_null_check CHANGING ls_prefinal."Blank check
            ls_output = ls_prefinal.
            APPEND ls_output TO lt_output.
            CLEAR :ls_output, ls_prefinal, lv_status, ls_locsegm.

          ENDLOOP.
        ELSE.
          ls_output = lc_nodata. "Message if no local segment is found
          APPEND ls_output TO lt_output.
          CLEAR ls_output.
        ENDIF.
      WHEN OTHERS.
        IF lv_action EQ lc_nodata. " Check if input is no data
          ls_output = lc_unchanged."Msg if no local segment is found
          APPEND ls_output TO lt_output.
        ELSE.
          ls_output = lc_naction.  " Message if action is not for read
          APPEND ls_output TO lt_output.
        ENDIF.
        CLEAR ls_output.
        RETURN. " Exit the program without further processing
    ENDCASE.
    PERFORM null_check TABLES  lt_output. " Check if value in blank
*//End of logic to read segments in RZ21
*// Start of logic to delete Segments of RZ21
  ELSEIF lv_lines > 1. " To check if the imported file has data
* Form to replace NULL value in field (from PYTHON input) to blank.
    PERFORM blank_check TABLES lt_input.
    DELETE lt_input INDEX 1." To delete the header line and data head
    lv_sysid = sy-sysid.      "System id
*// Logic to split the read data and check if action is for  delete
    LOOP AT lt_input INTO ls_input.
      SPLIT ls_input AT lc_sep INTO
      ls_segment-segmname       "Segment Name
      ls_segment-dest           "Destination
      ls_segment-status         "status
      ls_segment-action.        "Action
      IF ls_segment-action EQ lc_delete.
*   Segments apart from the ones coming as input with action D will
*    be deleted.
        APPEND ls_segment TO lt_segment_d.
      ENDIF.
      CLEAR: ls_input, ls_segment.
    ENDLOOP.
*// End of logic for split and delete action check

    ls_output = lc_headdel.  " Header for delete script output
    APPEND ls_output TO lt_output.
    CLEAR: ls_output, lv_count, ls_segment.
    FREE: lt_locsegm.

    IF lt_segment_d IS NOT INITIAL.
*   FM to fetch all local segments present in RZ21
      CALL METHOD cl_ccms_al_local_segments=>get_table
        IMPORTING
          e_table = lt_locsegm.
**  Records are selected apart from the destination specified
      LOOP AT lt_segment_d INTO ls_segment.
        READ TABLE lt_locsegm INTO ls_locsegm
        WITH KEY sysid = lv_sysid
        destinat = ls_segment-dest.
        IF sy-subrc EQ 0.
          DELETE lt_locsegm
          WHERE  destinat = ls_segment-dest.
          lv_count = lv_count + 1.
        ENDIF.
        CLEAR : ls_segment, ls_locsegm.
      ENDLOOP.

      IF lv_count EQ 0. " The destination supplied is not in RZ21
        ls_output = lc_wrongdest.
        APPEND ls_output TO lt_output.
        CLEAR ls_output.
        FREE: lt_locsegm, lt_segment_d.
        RETURN.
      ELSE.     " Destination supplied is in RZ21
*// Start of logic to delete local segments if present in RZ21 expect
*   the one supplied from PYTHON
        CLEAR: lv_count, ls_locsegm.
        LOOP AT lt_locsegm INTO ls_locsegm.
*   FM to mark the records that are to be deleted from standard tables
          CALL FUNCTION 'SCSM_DELETE_ROUTE'
            EXPORTING
              sysid             = lv_sysid
              segment           = ls_locsegm-segmname
              destinat          = ls_locsegm-destinat
            EXCEPTIONS
              segment_not_found = 1
              context_not_found = 2
              system_not_found  = 3
              not_allowed       = 4
              OTHERS            = 5.
*    FM to commit the records delete
          CALL FUNCTION 'SCSM_ROUTE_UPDATE_DB'
*       EXPORTING
*       MODE                        = CSM_UPDMODE_NOCOMMIT
            EXCEPTIONS
              OTHERS = 0.

          COMMIT WORK.
          lv_count = lv_count + 1.
          CLEAR: ls_locsegm.
        ENDLOOP.
        FREE: lt_locsegm.
*// End of logic to delete local segments if present in RZ21

*   FM to fetch all local segments present in RZ21 after deletion
        CALL METHOD cl_ccms_al_local_segments=>get_table
          IMPORTING
            e_table = lt_locsegm.

        lv_number = lv_count. "Type casted to string
        CONCATENATE lc_smsg ':' lv_number INTO ls_output
        SEPARATED BY space. " No of segments deleted
        APPEND ls_output TO lt_output.
        CLEAR: ls_output, ls_segment.
*// Start of logic to give output of segments that are not deleted
        IF ( lt_locsegm  IS NOT INITIAL ).
          APPEND ls_output TO lt_output.
          ls_output = lc_headndel. " Header of segments not deleted
          APPEND ls_output TO lt_output.
          CLEAR ls_output.
          CONCATENATE lc_segmname lc_sep
          lc_dest     INTO ls_output.
          APPEND ls_output TO lt_output.
          CLEAR: ls_output, ls_locsegm.
          LOOP AT lt_locsegm INTO ls_locsegm.
            CONCATENATE ls_locsegm-segmname lc_sep
            ls_locsegm-destinat INTO ls_prefinal.
            "Data of segments not deleted
* Form to fill last field which have blank value with NULL
            PERFORM end_null_check CHANGING ls_prefinal.
            ls_output = ls_prefinal.
            APPEND ls_output TO lt_output.
            CLEAR: ls_output, ls_locsegm, ls_prefinal.
          ENDLOOP.
        ENDIF.
*// End of logic to give output of segments that are not deleted
      ENDIF.
    ELSE. " If no action has come from input
      ls_output = lc_nodeldata.
      APPEND ls_output TO lt_output.
      CLEAR ls_output.
    ENDIF.
  ENDIF.
*// End of logic to delete Segments of RZ21
* Form to fill fields( in between) which have blank value with NULL
  PERFORM null_check TABLES  lt_output. "Blank check
  CLEAR: lv_action, ls_output, ls_segment, lv_count, lv_lines,
  lv_number, lv_sysid, ls_prefinal, ls_locsegm.
  FREE: lt_locsegm, lt_segment_d.
ENDFORM.
* // Begin of form to replace values in field which are Null
* as input from python with blank value for further processing
FORM blank_check TABLES lt_table TYPE table.

  DO .
    REPLACE ALL OCCURRENCES OF SUBSTRING '|NULL|'
    IN TABLE lt_table WITH '||'.
    FIND '|NULL|' IN TABLE lt_table.
    IF sy-subrc <> 0.
      EXIT .
    ENDIF.
  ENDDO.
  DO .

    REPLACE ALL OCCURRENCES OF SUBSTRING '|NULL'
    IN TABLE lt_table WITH '|'.
    FIND '|NULL' IN TABLE lt_table.
    IF sy-subrc <> 0.
      EXIT .
    ENDIF.
  ENDDO.

ENDFORM.
* //End of form
* // Begin of form to replace values in field which are blank
* ( in end of the line) with null value for python
FORM end_null_check  CHANGING ls_string TYPE string.

  DATA lv_last_char TYPE char1.

  lv_last_char = substring( val = ls_string
  off = strlen( ls_string ) - 1
  len = 1 ).
  IF lv_last_char = '|'.
    CONCATENATE ls_string 'NULL'
    INTO ls_string.
  ENDIF.

ENDFORM.
*// End of form
* // Befin of form to replace values in field which are blank
* ( in middle of the line) with null value for python
FORM null_check  TABLES   lt_table TYPE table.

  DO .
    REPLACE ALL OCCURRENCES OF SUBSTRING '||'
    IN TABLE lt_table WITH '|NULL|'.
    FIND '||' IN TABLE lt_table.
    IF sy-subrc <> 0.
      EXIT .
    ENDIF.
  ENDDO.

ENDFORM.
*// End of form