*---------------------------------------------------------------------*
* Program Name        :   ZCM_SMQR_EXP_QUEUE                          *
* Title               :   Inbound Queue in SMQR                       *
* Purpose             :   To Export, Register & Deregister inbound    *
*                         queue in SMQR for Cloud Migration           *
*---------------------------------------------------------------------*
* Related Transaction OR Standard Program References                  *
* SMQR                                                                *
*---------------------------------------------------------------------*
* Tables              :   SELECT    UPDATE      INSERT      DELETE    *
* XXXXX                     X                                         *
*---------------------------------------------------------------------*
* Program Change History                                              *
*---------------------------------------------------------------------*
*Date        Version   Author       TR#/Local     Description         *
*---------------------------------------------------------------------*
*09-08-2020  Initial   Ruchir Kamble  FIOK900653  To Export, Register *
*                                                 Deregister queue    *
*10-14-2021   V001    Ruchir Kamble  FIOK900653   Bug fixes           *
*05-17-2022   V002   Soumya/Yasaswini Local      To pass "No data     *
*                                                found" in case no    *
*                                                data present         *
*---------------------------------------------------------------------*

REPORT zcm_smqr_exp_queue.

LOAD-OF-PROGRAM.

FORM get_config
               TABLES lt_input  STRUCTURE tab512
                      lt_output STRUCTURE tab512.

  TABLES: qiwktab.

  CONSTANTS: lc_sep          TYPE c VALUE '|'               LENGTH 1,
             lc_limited      TYPE c VALUE 'E'               LENGTH 1,
             lc_active_key   LIKE sy-input VALUE 'A',
             lc_inactive_key LIKE sy-input VALUE 'I',
             lc_waiting_key  LIKE sy-input VALUE 'W',
             lc_starting_key LIKE sy-input VALUE 'T',
             lc_res_lack_key LIKE sy-input VALUE 'L',
             lc_off          TYPE c VALUE 'Off'             LENGTH 3,
             lc_null         TYPE c VALUE 'NULL'            LENGTH 4,
             lc_smqr         TYPE c VALUE 'SMQR'            LENGTH 4,
             lc_client       TYPE c VALUE 'Client'          LENGTH 6,
             lc_queue_name   TYPE c VALUE 'Queuename'       LENGTH 12,
             lc_type         TYPE c VALUE 'Type'            LENGTH 4,
             lc_mode         TYPE c VALUE 'Mode'            LENGTH 4,
             lc_runtime      TYPE c VALUE 'MaxRuntime'      LENGTH 15,
             lc_attempts     TYPE c VALUE 'Attempts'        LENGTH 10,
             lc_pause        TYPE c VALUE 'Pause'           LENGTH 5,
             lc_default      TYPE c VALUE 'DEFAULT'         LENGTH 7,
             lc_export       TYPE c VALUE 'EXPORT'          LENGTH 6,
             lc_register     TYPE c VALUE 'REGISTER'        LENGTH 8,
             lc_deregister   TYPE c VALUE 'DEREGISTER'      LENGTH 10,
             lc_active       TYPE c VALUE 'Active'          LENGTH 6,
             lc_inactive     TYPE c VALUE 'Inactive'        LENGTH 8,
             lc_waiting      TYPE c VALUE 'Waiting'         LENGTH 10,
             lc_starting     TYPE c VALUE 'Starting'        LENGTH 12,
             lc_res_lack     TYPE c VALUE 'ResourceError'   LENGTH 20,
             lc_seconds      TYPE c VALUE 'seconds'         LENGTH 8,
             lc_rfcdest      TYPE c VALUE
             'DestinationwithLOGONData'                     LENGTH 25,
             lc_sch_info     TYPE c VALUE
             'SchedulerInformation'                         LENGTH 40,
             lc_sch_status   TYPE c VALUE 'SchedulerStatus' LENGTH 25,
             lc_last_update  TYPE c VALUE
             'LastUpdateEvery2min'                          LENGTH 40,
             lc_group_name   TYPE c VALUE
             'NameofASGroupDEFAULTAll'                      LENGTH 40,
             lc_entries      TYPE c VALUE
             'NumberofEntriesDisplayed'                     LENGTH 40,
             lc_host_id      TYPE c VALUE 'HostID'          LENGTH 6,
             lc_active_conn  TYPE c VALUE
             'NumberofActiveConnections'                    LENGTH 40,
             lc_sch_monitor  TYPE c VALUE
             'SchedulerMonitoring'                          LENGTH 30,
             lc_title        TYPE c VALUE 'QINScheduler'    LENGTH 25,
*  Begin of changes in V002
             lc_ninput       TYPE c VALUE
             'No input passed'                              LENGTH 20,
             lc_err_msg      TYPE c VALUE
             'No data found'                                LENGTH 40,
             lc_inc_input TYPE c VALUE
             'Incorrect input'                              LENGTH 20.
*  End of changes in V002

  DATA: ls_input             TYPE tab512,
        ls_output            TYPE tab512,
        lv_action            TYPE char20,
        lv_maxtime           TYPE char10,
        lv_tdelay            TYPE char10,
        lv_status            LIKE sy-input,
        lv_date              TYPE sy-datum,
        lv_time              TYPE sy-uzeit,
        lv_groupname         LIKE qiwktab-groupdest,
        lv_count             TYPE char10,
        lv_hostid            LIKE qiwktab-hostid,
        lv_nactive           LIKE qiwktab-nactive,
        lv_seconds           TYPE i,
        lv_secs              TYPE char10,
        lv_qtime_sched_watch LIKE sy-uzeit VALUE '003000',
        lv_qn_nowatch        LIKE qiwktab-qname VALUE '%QIWK_NOWATCH',
        lv_qn_mainscheduler  LIKE qiwktab-qname VALUE '%QIWK_SCHEDULER',
        ls_schedwatch        TYPE qiwktab,
        lv_sched_watch       TYPE char10,
        lt_qiwklist          LIKE qiwktab OCCURS 0 WITH HEADER LINE,
        ls_qiwklist          TYPE qiwktab.

* Begin of changes in V002
  " Adding title to the output
  ls_output = lc_title.
  APPEND ls_output TO lt_output.
  CLEAR ls_output.
* End of changes in V002

  READ TABLE lt_input INTO ls_input INDEX 1.
* Begin of changes in V002
  IF sy-subrc NE 0.
    ls_output = lc_ninput.
    APPEND ls_output TO lt_output.
    CLEAR ls_output.
    RETURN.
  ENDIF.
* End of changes in V002
  lv_action = ls_input.      " Action

  CASE lv_action.

    WHEN lc_export.               " When action is EXPORT

      CALL FUNCTION 'QIWK_GET_ALL'
        EXPORTING
          client    = sy-mandt
        IMPORTING
          status    = lv_status
          last_date = lv_date
          last_time = lv_time
          groupname = lv_groupname
          hostid    = lv_hostid
          nactive   = lv_nactive
        TABLES
          qiwklist  = lt_qiwklist.

*   Begin of changes in V001
      IF lt_qiwklist[] IS NOT INITIAL.
*   End of changes in V001

        " Constructing header information to the output
        ls_output = lc_sch_info.
        APPEND ls_output TO lt_output.

*********************Scheduler Status*************************
        CASE lv_status.
          WHEN lc_starting_key.
            CONCATENATE lc_sch_status ':' lc_starting
            INTO ls_output SEPARATED BY space.
            APPEND ls_output TO lt_output.

          WHEN lc_active_key.
            CONCATENATE lc_sch_status ':' lc_active
            INTO ls_output SEPARATED BY space.
            APPEND ls_output TO lt_output.

          WHEN lc_inactive_key.
            CONCATENATE lc_sch_status ':' lc_inactive
            INTO ls_output SEPARATED BY space.
            APPEND ls_output TO lt_output.

          WHEN lc_waiting_key.
            CONCATENATE lc_sch_status ':' lc_waiting
            INTO ls_output SEPARATED BY space.
            APPEND ls_output TO lt_output.

          WHEN lc_res_lack_key.
            CONCATENATE lc_sch_status ':' lc_res_lack
            INTO ls_output SEPARATED BY space.
            APPEND ls_output TO lt_output.

        ENDCASE.

*********************Last Update*************************

        CONCATENATE lc_last_update ':' lv_date lv_time
        INTO ls_output SEPARATED BY space.
        APPEND ls_output TO lt_output.

*********************Name of AS Group************************

        IF lv_groupname = space.
          lv_groupname = lc_default.
        ENDIF.

        CONCATENATE lc_group_name ':' lv_groupname
        INTO ls_output SEPARATED BY space.
        APPEND ls_output TO lt_output.

*********************Number of Entries Displayed**************

        DESCRIBE TABLE lt_qiwklist LINES lv_count.

        CONDENSE lv_count.

        CONCATENATE lc_entries ':' lv_count
        INTO ls_output SEPARATED BY space.
        APPEND ls_output TO lt_output.

************************Host ID*******************************

        CONCATENATE lc_host_id ':' lv_hostid
        INTO ls_output SEPARATED BY space.
        APPEND ls_output TO lt_output.

*****************Number of Active Connections*****************
        CONDENSE lv_nactive.

        CONCATENATE lc_active_conn ':' lv_nactive
        INTO ls_output SEPARATED BY space.
        APPEND ls_output TO lt_output.

*********************Scheduler Monitoring*************************

        lv_seconds = lv_qtime_sched_watch.
        lv_secs = lv_seconds.
        SELECT SINGLE * INTO ls_schedwatch
        FROM qiwktab WHERE qname = lv_qn_mainscheduler.
        IF sy-subrc = 0.
          SELECT SINGLE * FROM qiwktab WHERE qname = lv_qn_nowatch.

          IF sy-subrc = 0.
            CONCATENATE lc_sch_monitor ':' lc_off
            INTO ls_output SEPARATED BY space.
            APPEND ls_output TO lt_output.

          ELSEIF ls_schedwatch-sched_watch <= lv_qtime_sched_watch.
            ls_schedwatch-sched_watch = 0.

            CONDENSE lv_secs.

            CONCATENATE lc_sch_monitor ':' lc_default lv_secs
            lc_seconds
            INTO ls_output SEPARATED BY space.
            APPEND ls_output TO lt_output.
          ELSE.

            lv_sched_watch =  ls_schedwatch-sched_watch.
            CONCATENATE lc_sch_monitor ':'  lv_sched_watch
            lc_seconds
            INTO ls_output SEPARATED BY space.
            APPEND ls_output TO lt_output.
          ENDIF.
        ENDIF.
*****************************************************************
        " Adding empty line
        ls_output = space.
        APPEND ls_output TO lt_output.

        " Constructing title and heading to the output
        ls_output = lc_smqr.
        APPEND ls_output TO lt_output.

        CONCATENATE lc_client       lc_sep
        lc_queue_name   lc_sep
        lc_type         lc_sep
        lc_mode         lc_sep
        lc_runtime      lc_sep
        lc_attempts     lc_sep
        lc_pause        lc_sep
        lc_rfcdest
        INTO ls_output.
        APPEND ls_output TO lt_output.

        LOOP AT lt_qiwklist INTO ls_qiwklist.

          lv_maxtime = ls_qiwklist-maxtime.
          lv_tdelay  = ls_qiwklist-tdelay.

          CONDENSE: lv_maxtime, lv_tdelay.

          IF ls_qiwklist-userdest IS INITIAL.
            ls_qiwklist-userdest = lc_null.
          ENDIF.

          CONCATENATE ls_qiwklist-mandt     lc_sep
          ls_qiwklist-qname     lc_sep
          ls_qiwklist-type      lc_sep
          ls_qiwklist-exemode   lc_sep
          lv_maxtime            lc_sep
          ls_qiwklist-nretry    lc_sep
          lv_tdelay             lc_sep
          ls_qiwklist-userdest
          INTO ls_output.
          APPEND ls_output TO lt_output.

        ENDLOOP.

      ELSE.
        " No Queue found in the system
        ls_output = lc_err_msg.              "+V002
        APPEND ls_output TO lt_output.
        CLEAR: ls_output.
      ENDIF.

    WHEN lc_register.                       " When action is REGISTER

      " FM to fetch all Queue in the system
      CALL FUNCTION 'QIWK_GET_ALL'
        EXPORTING
          client   = sy-mandt
        TABLES
          qiwklist = lt_qiwklist.

      IF lt_qiwklist IS NOT INITIAL.

        LOOP AT lt_qiwklist INTO ls_qiwklist.

          " FM to Register Queue
          CALL FUNCTION 'QIWK_REGISTER'
            EXPORTING
              qname              = ls_qiwklist-qname
              no_activate        = ' '
            EXCEPTIONS
              invalid_queue_name = 1
              invalid_exe_mode   = 2
              OTHERS             = 3.

          IF sy-subrc EQ 0.

          ENDIF.

        ENDLOOP.

        " FM to fetch all Queue in the system
        CALL FUNCTION 'QIWK_GET_ALL'
          EXPORTING
            client   = sy-mandt
          TABLES
            qiwklist = lt_qiwklist.

*  Begin of changes in V002
        IF lt_qiwklist IS INITIAL.
          FREE lt_output.
*   End of changes in V002
          " Constructing title and heading to the output
          ls_output = lc_smqr.
          APPEND ls_output TO lt_output.

          CONCATENATE lc_client       lc_sep
          lc_queue_name   lc_sep
          lc_type         lc_sep
          lc_mode         lc_sep
          lc_runtime      lc_sep
          lc_attempts     lc_sep
          lc_pause        lc_sep
          lc_rfcdest
          INTO ls_output.
          APPEND ls_output TO lt_output.

          LOOP AT lt_qiwklist INTO ls_qiwklist.

            lv_maxtime = ls_qiwklist-maxtime.
            lv_tdelay  = ls_qiwklist-tdelay.

            CONDENSE: lv_maxtime, lv_tdelay.

            IF ls_qiwklist-userdest IS INITIAL.
              ls_qiwklist-userdest = lc_null.
            ENDIF.

            CONCATENATE ls_qiwklist-mandt     lc_sep
            ls_qiwklist-qname     lc_sep
            ls_qiwklist-type      lc_sep
            ls_qiwklist-exemode   lc_sep
            lv_maxtime            lc_sep
            ls_qiwklist-nretry    lc_sep
            lv_tdelay             lc_sep
            ls_qiwklist-userdest
            INTO ls_output.
            APPEND ls_output TO lt_output.

          ENDLOOP.

* Begin of changes in V002
        ELSE.
          " No Destination found in the system
          ls_output = lc_err_msg.
          APPEND ls_output TO lt_output.
          CLEAR: ls_output.
        ENDIF.
* End of changes in V002

      ELSE.

        " No Queue found in the system
        ls_output = lc_err_msg.                     "+V002
        APPEND ls_output TO lt_output.
        CLEAR: ls_output.
      ENDIF.

    WHEN lc_deregister.                   " When action is DEREGISTER

      " FM to fetch all Queue in the system
      CALL FUNCTION 'QIWK_GET_ALL'
        EXPORTING
          client   = sy-mandt
        TABLES
          qiwklist = lt_qiwklist.

      IF lt_qiwklist IS NOT INITIAL.

        LOOP AT lt_qiwklist INTO ls_qiwklist.

          " FM to De-register Queue
          CALL FUNCTION 'QIWK_UNREGISTER'
            EXPORTING
              qname              = ls_qiwklist-qname
              limited            = lc_limited
            EXCEPTIONS
              invalid_queue_name = 1
              OTHERS             = 2.

          IF sy-subrc EQ 0.

          ENDIF.

        ENDLOOP.

        " FM to fetch all Queue in the system
        CALL FUNCTION 'QIWK_GET_ALL'
          EXPORTING
            client   = sy-mandt
          TABLES
            qiwklist = lt_qiwklist.

*  Begin of changes in V002
        IF lt_qiwklist IS INITIAL.
          FREE lt_output.
*   End of changes in V002
          " Constructing title and heading to the output
          ls_output = lc_smqr.
          APPEND ls_output TO lt_output.

          CONCATENATE lc_client       lc_sep
          lc_queue_name   lc_sep
          lc_type         lc_sep
          lc_mode         lc_sep
          lc_runtime      lc_sep
          lc_attempts     lc_sep
          lc_pause        lc_sep
          lc_rfcdest
          INTO ls_output.
          APPEND ls_output TO lt_output.

          LOOP AT lt_qiwklist INTO ls_qiwklist.

            lv_maxtime = ls_qiwklist-maxtime.
            lv_tdelay  = ls_qiwklist-tdelay.

            CONDENSE: lv_maxtime, lv_tdelay.

            IF ls_qiwklist-userdest IS INITIAL.
              ls_qiwklist-userdest = lc_null.
            ENDIF.

            CONCATENATE ls_qiwklist-mandt     lc_sep
            ls_qiwklist-qname     lc_sep
            ls_qiwklist-type      lc_sep
            ls_qiwklist-exemode   lc_sep
            lv_maxtime            lc_sep
            ls_qiwklist-nretry    lc_sep
            lv_tdelay             lc_sep
            ls_qiwklist-userdest
            INTO ls_output.
            APPEND ls_output TO lt_output.

          ENDLOOP.

* Begin of changes in V002
        ELSE.
          " No Destination found in the system
          ls_output = lc_err_msg.
          APPEND ls_output TO lt_output.
          CLEAR: ls_output.
        ENDIF.
* End of changes in V002

      ELSE.

        " No Queue found in the system
        ls_output = lc_err_msg.                    "+V002
        APPEND ls_output TO lt_output.
        CLEAR: ls_output.
      ENDIF.

* Begin of changes in V002
  WHEN OTHERS.
    ls_output = lc_inc_input. "Incorrect input
    APPEND ls_output TO lt_output.
    CLEAR ls_output.
* End of changes in V002
  ENDCASE.

ENDFORM.