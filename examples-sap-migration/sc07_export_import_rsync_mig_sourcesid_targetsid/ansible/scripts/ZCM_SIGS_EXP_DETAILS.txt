*---------------------------------------------------------------------*
* Program Name        :   ZCM_SIGS_EXP_DETAILS                        *
* Title               :   Export SIGS Data                            *
* Purpose             :   This report is used to Export SIGS Status   *
*                         and statistics Data                         *
*---------------------------------------------------------------------*
* Related Transaction OR Standard Program References                  *
* SIGS                                                                *
*---------------------------------------------------------------------*
* Tables              :   SELECT    UPDATE      INSERT      DELETE    *
*   X                      X                                          *
*---------------------------------------------------------------------*
* Program Change History                                              *
*---------------------------------------------------------------------*
*Date        Version   Author       TR#/Local     Description         *
*---------------------------------------------------------------------*
*05-09-2021  Initial  Yasaswini K     Local     To export SIGS        *
*                                               Data                  *
*---------------------------------------------------------------------*
REPORT zcm_sigs_exp_details.

LOAD-OF-PROGRAM.

FORM get_config
              TABLES lt_input  STRUCTURE tab512
                     lt_output STRUCTURE tab512.

  CONSTANTS: lc_version   TYPE c VALUE 'Version'          LENGTH 7,
             lc_extend    TYPE c VALUE 'EXTENDED'         LENGTH 8,
             lc_x         TYPE c VALUE 'X'                LENGTH 1,
             lc_sep       TYPE c VALUE '|'                LENGTH 1,
             lc_comma     TYPE c VALUE ','                LENGTH 1,
             lc_title3    TYPE c VALUE 'STATISTICS'       LENGTH 10,
             lc_title4    TYPE c VALUE 'SUMMARY'          LENGTH 7,
             lc_title5    TYPE c VALUE 'REQUESTS'         LENGTH 8,
             lc_title6    TYPE c VALUE 'CONNECTEDLISTENER'
                                                          LENGTH 20,
             lc_title7    TYPE c VALUE 'REGISTEREDPORTWATCHER'
                                                          LENGTH 30,
             lc_title8    TYPE c VALUE 'REGISTEREDINTERPRETER'
                                                          LENGTH 30,
             lc_nodata    TYPE c VALUE 'No Data Found'    LENGTH 20,
             lc_incorrect TYPE c VALUE 'Incorrect input'  LENGTH 20,
             lc_title9    TYPE c VALUE 'FREESERVER'
                                                          LENGTH 10,
             lc_title10   TYPE c VALUE 'REGISTEREDTYPES'
                                                          LENGTH 30,
             lc_title11   TYPE c VALUE 'RESTARTCOUNT'
                                                          LENGTH 30,
             lc_title12   TYPE c VALUE 'UPTIME'           LENGTH 6,
             lc_null      TYPE c VALUE 'NULL'             LENGTH 4,
             lc_rfc       TYPE c VALUE 'IGS_RFC_DEST'     LENGTH 12,
             lc_statnew   TYPE c VALUE 'ADM:STATISTICNEW' LENGTH 16,
             lc_stat      TYPE c VALUE 'ADM:STATISTIC'    LENGTH 14,
             lc_6300      TYPE c VALUE '6300'             LENGTH 4,
             lc_watcher   TYPE c VALUE 'REGISTERED_PORTWATCHER'
                                                          LENGTH 30,
             lc_admver    TYPE c VALUE 'ADM:GETVERSION'   LENGTH 14,
             lc_admstat   TYPE c VALUE 'ADM:STATUS'       LENGTH 10,
             lc_noinput   TYPE c VALUE 'No input given'   LENGTH 20,
             lc_title     TYPE c VALUE 'SIGSData'         LENGTH 8,
             lc_title2    TYPE c VALUE 'PortDetails'      LENGTH 11,
             lc_export    TYPE c VALUE 'EXPORT'           LENGTH 6,
             lc_build     TYPE c VALUE 'BuildDate'        LENGTH 9,
             lc_system    TYPE c VALUE 'System'           LENGTH 6,
             lc_port      TYPE c VALUE 'Port'             LENGTH 4,
             lc_server    TYPE c VALUE 'Server'           LENGTH 6,
             lc_1         TYPE c VALUE '1'                LENGTH 1,
             lc_2         TYPE c VALUE '2'                LENGTH 1,
             lc_3         TYPE c VALUE '3'                LENGTH 1,
             lc_4         TYPE c VALUE '4'                LENGTH 1,
             lc_5         TYPE c VALUE '5'                LENGTH 1,
             lc_6         TYPE c VALUE '6'                LENGTH 1,
             lc_7         TYPE c VALUE '7'                LENGTH 1,
             lc_profile   TYPE c VALUE 'ProfileFilePath'  LENGTH 15.

  DATA: lv_message     TYPE char80,
        lv_farmtype    TYPE char40,
        lv_admstatus   TYPE char40,
        ls_output      TYPE tab512,
        lv_table_count TYPE i,
        lv_stat_event  TYPE char40,
        ltt_html       TYPE w3htmltabtype,
        ls_html        TYPE w3html,
        lv_what        TYPE string,
        lv_count       TYPE string,
        lv_time        TYPE string,
        lv_table       TYPE i,
        lv_table_name  TYPE char32,
        lr_igs_data    TYPE REF TO cl_igs_data,
        lv_h           TYPE string,
        lv_server      TYPE string,
        lv_port        TYPE string,
        lv_version     TYPE string,
        lv_author      TYPE string,
        lv_id          TYPE string,
        lv_type        TYPE string,
        lv_parameter   TYPE string,
        lv_callin      TYPE string,
        lv_callout     TYPE string,
        lv_dimin       TYPE string,
        lv_dimax       TYPE string,
        lv_diavg       TYPE string,
        lv_domin       TYPE string,
        lv_domax       TYPE string,
        lv_doavg       TYPE string,
        lv_tmin        TYPE string,
        lv_tmax        TYPE string,
        ls_input       TYPE tab512,
        lv_action      TYPE char6,
        lv_x           TYPE string,
        lv_tavg        TYPE string.

  CLEAR: lv_message, lv_farmtype, lv_admstatus,lv_dimax,lv_domin,
         ls_output, lv_table_count, lv_stat_event, lv_callin,lv_diavg,
         ls_html, lv_what, lv_count, lv_time, lv_table, lv_h, lv_server,
         lv_port, lv_version, lv_author,lv_dimin, lv_domax, lv_doavg,
         lv_id, lv_type, lv_parameter, lv_tmin, lv_tmax, ls_input,
         lv_action, lv_x, lv_tavg.

  FREE: ltt_html.

  "Title
  ls_output = lc_title.
  APPEND ls_output TO lt_output.
  CLEAR: ls_output.

  READ TABLE lt_input INTO ls_input INDEX 1.

  IF sy-subrc EQ 0.
    lv_action = ls_input.              " Action
  ELSE.
    " No input given
    ls_output = lc_noinput.
    APPEND ls_output TO lt_output.
    CLEAR ls_output.
    RETURN.
  ENDIF.

  CASE lv_action.

    WHEN lc_export.               " When action is EXPORT

      "Header Data

      CREATE OBJECT lr_igs_data.

      CALL METHOD lr_igs_data->reset.

      "Passing constants to variables
      lv_x = lc_x.
      lv_farmtype = lc_admver.
      lv_admstatus = lc_admstat.

      "Add string
      CALL METHOD lr_igs_data->add_string
        EXPORTING
          name  = lc_extend
          input = lv_x.

      "ADM status
      CALL METHOD lr_igs_data->send
        EXPORTING
          rfcdestination          = lc_rfc
          farm_type               = lv_farmtype
        IMPORTING
          msg_text                = lv_message
        EXCEPTIONS
          rfc_communication_error = 1
          rfc_system_error        = 2
          internal_error          = 3
          OTHERS                  = 4.

      IF sy-subrc EQ 0.

        "Get table data
        CALL METHOD lr_igs_data->get_table
          EXPORTING
            number    = 1
          IMPORTING
            texttable = ltt_html.

        IF ltt_html[] IS NOT INITIAL.
          "Column Headings
          CONCATENATE lc_version lc_sep
                      lc_build   lc_sep
                      lc_system  lc_sep
                      lc_profile
          INTO ls_output.
          APPEND ls_output TO lt_output.
          CLEAR: ls_output.

          "Data
          LOOP AT ltt_html INTO ls_html.
            IF ls_output IS INITIAL.
              ls_output = ls_html.
            ELSE.
              CONCATENATE ls_output lc_sep ls_html
              INTO ls_output.
            ENDIF.
          ENDLOOP.
          IF ls_output IS NOT INITIAL.
            APPEND ls_output TO lt_output.
          ENDIF.
          CLEAR: ls_output, ls_html.
        ELSE.
          ls_output = lc_nodata.
          APPEND ls_output TO lt_output.
          CLEAR: ls_output.
        ENDIF.
      ELSE.
        ls_output = lc_nodata.
        APPEND ls_output TO lt_output.
        CLEAR: ls_output.
      ENDIF.

      "Blank line
      APPEND ls_output TO lt_output.

      "Title
      ls_output = lc_title2.
      APPEND ls_output TO lt_output.
      CLEAR: ls_output.

      FREE: ltt_html[].

      "Reset
      CALL METHOD lr_igs_data->reset.

      "ADM status
      CALL METHOD lr_igs_data->send
        EXPORTING
          rfcdestination          = lc_rfc
          farm_type               = lv_admstatus
        IMPORTING
          tables                  = lv_table_count
          msg_text                = lv_message
        EXCEPTIONS
          rfc_communication_error = 1
          rfc_system_error        = 2
          internal_error          = 3
          OTHERS                  = 4.

      IF sy-subrc IS INITIAL.

        "PORT Watcher Data
        CALL METHOD lr_igs_data->get_index_by_name
          EXPORTING
            name  = lc_watcher
          RECEIVING
            index = lv_table.

        "Get table data
        CALL METHOD lr_igs_data->get_table
          EXPORTING
            number    = lv_table
          IMPORTING
            texttable = ltt_html.

        IF ltt_html[] IS NOT INITIAL.

          "To remove header data
          DELETE ltt_html INDEX 1.

          "Column Heading
          CONCATENATE lc_server lc_sep lc_port INTO ls_output.
          APPEND ls_output TO lt_output.
          CLEAR: ls_output.

          "Data
          LOOP AT ltt_html INTO ls_html.
            SPLIT ls_html AT lc_comma INTO
            lv_h lv_server lv_port lv_version.

            IF lv_server IS INITIAL.
              lv_server = lc_null.
            ENDIF.

            IF lv_port IS INITIAL.
              lv_port = lc_null.
            ENDIF.

            CONCATENATE lv_server lc_sep lv_port INTO ls_output.
            APPEND ls_output TO lt_output.
            CLEAR : lv_h, lv_server, lv_port, lv_version, ls_html,
                    ls_output.
          ENDLOOP.
        ELSE.
          ls_output = lc_nodata.
          APPEND ls_output TO lt_output.
          CLEAR: ls_output.
        ENDIF.
      ELSE.
        ls_output = lc_nodata.
        APPEND ls_output TO lt_output.
        CLEAR: ls_output.
      ENDIF.

      "Get Version
      READ TABLE ltt_html INTO ls_html INDEX 1.
      IF sy-subrc = 0.
        SPLIT ls_html AT lc_comma INTO
        lv_h lv_server lv_port lv_version.
      ENDIF.

      "Based on version assign event
      IF lv_version IS NOT INITIAL.
        IF lv_version+0(4) GE lc_6300.
          lv_stat_event = lc_statnew.
        ELSE.
          lv_stat_event = lc_stat.
        ENDIF.
      ENDIF.

      CLEAR: lv_h, lv_server, lv_port, lv_version, lv_table_count,
             lv_message.
      FREE: ltt_html.

      "Get event data
      CALL METHOD lr_igs_data->send
        EXPORTING
          rfcdestination          = lc_rfc
          farm_type               = lv_stat_event
        IMPORTING
          tables                  = lv_table_count
          msg_text                = lv_message
        EXCEPTIONS
          rfc_communication_error = 1
          rfc_system_error        = 2
          internal_error          = 3
          OTHERS                  = 4.
      IF sy-subrc EQ 0.
        "Get all table details
        DO lv_table_count TIMES.

          lv_table = sy-index.

          CALL METHOD lr_igs_data->get_table
            EXPORTING
              number    = lv_table
            IMPORTING
              name      = lv_table_name
              texttable = ltt_html.

*STATISTICS
          IF lv_table = lc_1.

            "Blank Line
            APPEND ls_output TO lt_output.


            "Title
            ls_output = lc_title3.
            APPEND ls_output TO lt_output.
            CLEAR: ls_output.

            IF ltt_html[] IS NOT INITIAL.
              "Column Heading and Data
              LOOP AT ltt_html INTO ls_html.

                SPLIT ls_html AT lc_comma INTO lv_h
                                          lv_id
                                          lv_type
                                          lv_callin
                                          lv_callout
                                          lv_dimin
                                          lv_dimax
                                          lv_diavg
                                          lv_domin
                                          lv_domax
                                          lv_doavg
                                          lv_tmin
                                          lv_tmax
                                          lv_tavg.

                IF lv_id IS INITIAL.
                  lv_id = lc_null.
                ENDIF.

                IF lv_tavg IS INITIAL.
                  lv_tavg = lc_null.
                ENDIF.

                CONCATENATE lv_id      lc_sep
                            lv_type    lc_sep
                            lv_callin  lc_sep
                            lv_callout lc_sep
                            lv_dimin   lc_sep
                            lv_dimax   lc_sep
                            lv_diavg   lc_sep
                            lv_domin   lc_sep
                            lv_domax   lc_sep
                            lv_doavg   lc_sep
                            lv_tmin    lc_sep
                            lv_tmax    lc_sep
                            lv_tavg    INTO ls_output.

                APPEND ls_output TO lt_output.

                CLEAR: ls_output,
                       ls_html,
                       lv_h,
                       lv_id,
                       lv_type,
                       lv_callin,
                       lv_callout,
                       lv_dimin,
                       lv_dimax,
                       lv_diavg,
                       lv_domin,
                       lv_domax,
                       lv_doavg,
                       lv_tmin,
                       lv_tmax,
                       lv_tavg.

              ENDLOOP.
            ELSE.
              ls_output = lc_nodata.
              APPEND ls_output TO lt_output.
              CLEAR: ls_output.
            ENDIF.
          ENDIF.

*SUMMARY
          IF lv_table = lc_2.

            APPEND ls_output TO lt_output.
            "Title
            ls_output = lc_title4.
            APPEND ls_output TO lt_output.
            CLEAR: ls_output.

            IF ltt_html[] IS NOT INITIAL.

              "Column Headings and Data
              LOOP AT ltt_html INTO ls_html.

                SPLIT ls_html AT lc_comma INTO lv_h
                                          lv_type
                                          lv_callin
                                          lv_callout
                                          lv_dimin
                                          lv_dimax
                                          lv_diavg
                                          lv_domin
                                          lv_domax
                                          lv_doavg
                                          lv_tmin
                                          lv_tmax
                                          lv_tavg.

                IF lv_type IS INITIAL.
                  lv_type = lc_null.
                ENDIF.

                IF lv_tavg IS INITIAL.
                  lv_tavg = lc_null.
                ENDIF.

                CONCATENATE lv_type    lc_sep
                            lv_callin  lc_sep
                            lv_callout lc_sep
                            lv_dimin   lc_sep
                            lv_dimax   lc_sep
                            lv_diavg   lc_sep
                            lv_domin   lc_sep
                            lv_domax   lc_sep
                            lv_doavg   lc_sep
                            lv_tmin    lc_sep
                            lv_tmax    lc_sep
                            lv_tavg    INTO ls_output.

                APPEND ls_output TO lt_output.
                CLEAR: ls_output,
                       ls_html,
                       lv_h,
                       lv_id,
                       lv_type,
                       lv_callin,
                       lv_callout,
                       lv_dimin,
                       lv_dimax,
                       lv_diavg,
                       lv_domin,
                       lv_domax,
                       lv_doavg,
                       lv_tmin,
                       lv_tmax,
                       lv_tavg.

              ENDLOOP.
            ELSE.
              ls_output = lc_nodata.
              APPEND ls_output TO lt_output.
              CLEAR: ls_output.
            ENDIF.
          ENDIF.

*REQUESTS
          IF lv_table = lc_3.
            "Blank line
            APPEND ls_output TO lt_output.

            "Title
            ls_output = lc_title5.
            APPEND ls_output TO lt_output.
            CLEAR: ls_output.

            IF ltt_html[] IS NOT INITIAL.

              "Column Heading and Data
              LOOP AT ltt_html INTO ls_html.

                SPLIT ls_html AT lc_comma INTO lv_h
                                          lv_type
                                          lv_callin
                                          lv_callout
                                          lv_dimin
                                          lv_dimax
                                          lv_diavg
                                          lv_domin
                                          lv_domax
                                          lv_doavg.

                IF lv_type IS INITIAL.
                  lv_type = lc_null.
                ENDIF.

                IF lv_doavg IS INITIAL.
                  lv_doavg = lc_null.
                ENDIF.

                CONCATENATE lv_type    lc_sep
                            lv_callin  lc_sep
                            lv_callout lc_sep
                            lv_dimin   lc_sep
                            lv_dimax   lc_sep
                            lv_diavg   lc_sep
                            lv_domin   lc_sep
                            lv_domax   lc_sep
                            lv_doavg   INTO ls_output.

                APPEND ls_output TO lt_output.
                CLEAR: ls_output,
                       ls_html,
                       lv_h,
                       lv_id,
                       lv_type,
                       lv_callin,
                       lv_callout,
                       lv_dimin,
                       lv_dimax,
                       lv_diavg,
                       lv_domin,
                       lv_domax,
                       lv_doavg,
                       lv_tmin,
                       lv_tmax,
                       lv_tavg.

              ENDLOOP.
            ELSE.
              ls_output = lc_nodata.
              APPEND ls_output TO lt_output.
              CLEAR: ls_output.
            ENDIF.
          ENDIF.
          FREE: ltt_html.
          CLEAR: lv_table_name, lv_table.
        ENDDO.
      ENDIF.

      CLEAR: lv_table_count, lv_message.
      "Reset Data
      CALL METHOD lr_igs_data->reset.

      "Get Status data
      CALL METHOD lr_igs_data->send
        EXPORTING
          rfcdestination          = lc_rfc
          farm_type               = lv_admstatus
        IMPORTING
          tables                  = lv_table_count
          msg_text                = lv_message
        EXCEPTIONS
          rfc_communication_error = 1
          rfc_system_error        = 2
          internal_error          = 3
          OTHERS                  = 4.

      IF sy-subrc EQ 0.

        DO lv_table_count TIMES.

          lv_table = sy-index.

          CALL METHOD lr_igs_data->get_table
            EXPORTING
              number    = lv_table
            IMPORTING
              name      = lv_table_name
              texttable = ltt_html.

          "CONNECTED_LISTENER
          IF lv_table = lc_1.
            "Blank Line
            APPEND ls_output TO lt_output.

            "Title
            ls_output = lc_title6.
            APPEND ls_output TO lt_output.
            CLEAR: ls_output.

            IF ltt_html IS NOT INITIAL.

              "Column Heading and data
              LOOP AT ltt_html INTO ls_html.
                SPLIT ls_html AT lc_comma INTO lv_h
                                          lv_id
                                          lv_type
                                          lv_parameter.
                IF lv_id IS INITIAL.
                  lv_id = lc_null.
                ENDIF.

                IF lv_parameter IS INITIAL.
                  lv_parameter = lc_null.
                ENDIF.

                CONCATENATE lv_id lc_sep
                            lv_type lc_sep
                            lv_parameter INTO ls_output.
                APPEND ls_output TO lt_output.

                CLEAR: ls_output,
                       ls_html,
                       lv_id,
                       lv_h,
                       lv_type,
                       lv_parameter.
              ENDLOOP.
            ELSE.
              ls_output = lc_nodata.
              APPEND ls_output TO lt_output.
              CLEAR: ls_output.
            ENDIF.
          ENDIF.

*REGISTERED_PORTWATCHER
          IF lv_table = lc_2.
            "Blank Line
            APPEND ls_output TO lt_output.

            "Title
            ls_output = lc_title7.
            APPEND ls_output TO lt_output.
            CLEAR: ls_output.

            IF ltt_html[] IS NOT INITIAL.

              "Column Heading and data
              LOOP AT ltt_html INTO ls_html.
                SPLIT ls_html AT lc_comma INTO lv_h
                                          lv_server
                                          lv_port
                                          lv_version.

                IF lv_server IS INITIAL.
                  lv_server = lc_null.
                ENDIF.

                IF lv_version IS INITIAL.
                  lv_version = lc_null.
                ENDIF.


                CONCATENATE lv_server lc_sep
                            lv_port lc_sep
                            lv_version INTO ls_output.
                APPEND ls_output TO lt_output.

                CLEAR: ls_output,
                       ls_html,
                       lv_server,
                       lv_port,
                       lv_h,
                       lv_version.
              ENDLOOP.
            ELSE.
              ls_output = lc_nodata.
              APPEND ls_output TO lt_output.
              CLEAR: ls_output.
            ENDIF.
          ENDIF.

*REGISTERED_INTERPRETER
          IF lv_table = lc_3.
            "Blank line
            APPEND ls_output TO lt_output.

            "Title
            ls_output = lc_title8.
            APPEND ls_output TO lt_output.
            CLEAR: ls_output.

            IF ltt_html[] IS NOT INITIAL.

              "Column Heading and data
              LOOP AT ltt_html INTO ls_html.
                SPLIT ls_html AT lc_comma INTO lv_h
                                          lv_server
                                          lv_port
                                          lv_type
                                          lv_version
                                          lv_author.
                IF lv_server IS INITIAL.
                  lv_server = lc_null.
                ENDIF.

                IF lv_author IS INITIAL.
                  lv_author = lc_null.
                ENDIF.
                CONCATENATE lv_server lc_sep
                            lv_port lc_sep
                            lv_type lc_sep
                            lv_version lc_sep
                            lv_author INTO ls_output.
                APPEND ls_output TO lt_output.

                CLEAR: ls_output,
                       ls_html,
                       lv_server,
                       lv_port,
                       lv_type,
                       lv_author,
                       lv_h,
                       lv_version.
              ENDLOOP.
            ELSE.
              ls_output = lc_nodata.
              APPEND ls_output TO lt_output.
              CLEAR: ls_output.
            ENDIF.
          ENDIF.

          "FREE_SERVER
          IF lv_table = lc_4.
            "Blank line
            APPEND ls_output TO lt_output.

            "Title
            ls_output = lc_title9.
            APPEND ls_output TO lt_output.
            CLEAR: ls_output.

            IF ltt_html[] IS NOT INITIAL.

              "Column Heading and data
              LOOP AT ltt_html INTO ls_html.
                SPLIT ls_html AT lc_comma INTO lv_h
                                          lv_server
                                          lv_port
                                          lv_type.
                IF lv_server IS INITIAL.
                  lv_server = lc_null.
                ENDIF.

                IF lv_type IS INITIAL.
                  lv_type = lc_null.
                ENDIF.

                CONCATENATE lv_server lc_sep
                            lv_port lc_sep
                            lv_type INTO ls_output.
                APPEND ls_output TO lt_output.

                CLEAR: ls_output,
                       ls_html,
                       lv_server,
                       lv_h,
                       lv_port,
                       lv_type.
              ENDLOOP.
            ELSE.
              ls_output = lc_nodata.
              APPEND ls_output TO lt_output.
              CLEAR: ls_output.
            ENDIF.
          ENDIF.

*REGISTERED_TYPES
          IF lv_table = lc_5.
            "Blank line
            APPEND ls_output TO lt_output.
            IF ltt_html[] IS NOT INITIAL.
              "Title
              ls_output = lc_title10.
              APPEND ls_output TO lt_output.
              CLEAR: ls_output.

              "Column headings and data
              LOOP AT ltt_html INTO ls_html.
                SPLIT ls_html AT lc_comma INTO lv_h
                                          lv_type.
                IF lv_type IS INITIAL.
                  ls_output = lc_null.
                ELSE.
                  ls_output = lv_type.
                ENDIF.
                APPEND ls_output TO lt_output.
                CLEAR: ls_output,
                       lv_type,
                       lv_h.
              ENDLOOP.
            ELSE.
              ls_output = lc_nodata.
              APPEND ls_output TO lt_output.
              CLEAR: ls_output.
            ENDIF.
          ENDIF.

          "RESTART_COUNT
          IF lv_table = lc_6.
            "Blank Line
            APPEND ls_output TO lt_output.

            "Title
            ls_output = lc_title11.
            APPEND ls_output TO lt_output.
            CLEAR: ls_output.

            IF ltt_html[] IS NOT INITIAL.
              "Column Headings and Data
              LOOP AT ltt_html INTO ls_html.
                SPLIT ls_html AT lc_comma INTO lv_h
                                          lv_what
                                          lv_count.
                IF lv_what IS INITIAL.
                  lv_what = lc_null.
                ENDIF.

                IF lv_count IS INITIAL.
                  lv_count = lc_null.
                ENDIF.

                CONCATENATE lv_what lc_sep
                            lv_count INTO ls_output.
                APPEND ls_output TO lt_output.

                CLEAR: ls_output,
                       ls_html,
                       lv_what,
                       lv_h,
                       lv_count.
              ENDLOOP.
            ELSE.
              ls_output = lc_nodata.
              APPEND ls_output TO lt_output.
              CLEAR: ls_output.
            ENDIF.
          ENDIF.

          "UPTIME
          IF lv_table = lc_7.
            "Blank line
            APPEND ls_output TO lt_output.

            "Heading
            ls_output = lc_title12.
            APPEND ls_output TO lt_output.
            CLEAR: ls_output.

            IF ltt_html IS NOT INITIAL.

              "Column Headings and Data
              LOOP AT ltt_html INTO ls_html.
                SPLIT ls_html AT lc_comma INTO lv_h
                                          lv_what
                                          lv_time.

                IF lv_what IS INITIAL.
                  lv_what = lc_null.
                ENDIF.

                IF lv_time IS INITIAL.
                  lv_time = lc_null.
                ENDIF.

                CONCATENATE lv_what lc_sep
                            lv_time INTO ls_output.
                APPEND ls_output TO lt_output.

                CLEAR: ls_output,
                       ls_html,
                       lv_h,
                       lv_what,
                       lv_time.
              ENDLOOP.
            ELSE.
              ls_output = lc_nodata.
              APPEND ls_output TO lt_output.
              CLEAR: ls_output.
            ENDIF.
          ENDIF.
          CLEAR: lv_table, lv_table_name.
          FREE: ltt_html.
        ENDDO.
      ENDIF.

    WHEN OTHERS.
      " Incorrect input
      ls_output = lc_incorrect.
      APPEND ls_output TO lt_output.
      CLEAR ls_output.

  ENDCASE.

  IF lt_output[] IS NOT INITIAL.
    "Adding NULL values in between
    DO.
      REPLACE ALL OCCURRENCES OF SUBSTRING '||'
      IN TABLE lt_output WITH '|NULL|'.
      FIND '||' IN TABLE lt_output.
      IF sy-subrc <> 0.
        EXIT .
      ENDIF.
    ENDDO.

  ENDIF.

ENDFORM.