*---------------------------------------------------------------------*
* Program Name        :   ZCM_STMS_EXP_IMPORT_RUNNIG_TRS              *
* Title               :   Export TRs with Status Import Running       *
* Purpose             :   This report is used to Export TRs with      *
*                         Status Import Running                       *
*---------------------------------------------------------------------*
* Related Transaction OR Standard Program References                  *
* STMS_IMPORT                                                         *
*---------------------------------------------------------------------*
* Tables              :   SELECT    UPDATE      INSERT      DELETE    *
*  X                                                                  *
*---------------------------------------------------------------------*
* Program Change History                                              *
*---------------------------------------------------------------------*
*Date        Version   Author       TR#/Local     Description         *
*---------------------------------------------------------------------*
*05-03-2021  Initial  Yasaswini K  Local     To export TRs with Status*
*                                            Import Running           *
*07-09-2022  V001     Yasaswini K  Local     To add no data found     *
*                                            changes                  *
*---------------------------------------------------------------------*
REPORT zcm_stms_exp_import_runnig_trs.

LOAD-OF-PROGRAM.

FORM get_config
              TABLES lt_input  STRUCTURE tab512
                     lt_output STRUCTURE tab512.

  CONSTANTS: lc_title              TYPE c VALUE
             'TRs with status Import running'            LENGTH 30,
             lc_tr                 TYPE c VALUE
             'Request'                                   LENGTH 7,
             lc_invalid            TYPE c VALUE
             'Incorrect input'                           LENGTH 16,
             lc_impstat_cverschck  TYPE c   VALUE 'C'    LENGTH 1,
             lc_impstat_approve    TYPE c   VALUE 'A'    LENGTH 1,
             lc_tp_actflg_suspend  TYPE c   VALUE 'D'    LENGTH 1,
             lc_impstat_deny       TYPE c   VALUE 'D'    LENGTH 1,
             lc_impstat_noimp      TYPE c   VALUE 'N'    LENGTH 1,
             lc_impstat_stopmark   TYPE c   VALUE 'P'    LENGTH 1,
             lc_impstat_overtake   TYPE c   VALUE 'Q'    LENGTH 1,
             lc_tp_umode_prel_imp  TYPE c   VALUE 'V'    LENGTH 1,
             lc_tp_actflg_inactive TYPE c   VALUE 'I'    LENGTH 1,
             lc_impstat_ready      TYPE c   VALUE 'R'    LENGTH 1,
             lc_impstat_scheduled  TYPE c   VALUE 'S'    LENGTH 1,
             lc_impstat_running    TYPE c   VALUE 'T'    LENGTH 1,
             lc_impstat_finished   TYPE c   VALUE 'X'    LENGTH 1,
             lc_export             TYPE c   VALUE 'EXPORT'
                                                         LENGTH 6,
             lc_tp_stopmark        TYPE c   VALUE 'STOPMARK'
                                                         LENGTH 8,
             lc_sep                TYPE c VALUE '|'      LENGTH 1,
             lc_owner              TYPE c VALUE
                                               'Owner'  LENGTH 5,
             lc_3                  TYPE c VALUE '3'     LENGTH 1,
             lc_5                  TYPE c VALUE '5'     LENGTH 1,
             lc_6                  TYPE c VALUE '6'     LENGTH 1,
             lc_7                  TYPE c VALUE '7'     LENGTH 1,
             lc_t                  TYPE c VALUE 'T'     LENGTH 1,
             lc_c                  TYPE c VALUE 'C'     LENGTH 1,
             lc_k                  TYPE c VALUE 'K'     LENGTH 1,
             lc_w                  TYPE c VALUE 'W'     LENGTH 1,
             lc_e                  TYPE c VALUE 'E'     LENGTH 1,
             lc_m                  TYPE c VALUE 'M'     LENGTH 1,
             lc_o                  TYPE c VALUE 'O'     LENGTH 1,
             lc_2                  TYPE c VALUE '2'     LENGTH 1,
             lc_1                  TYPE c VALUE '1'     LENGTH 1,
             lc_i                  TYPE c VALUE 'I'     LENGTH 1,
             lc_j                  TYPE c VALUE 'J'     LENGTH 1,
             lc_h                  TYPE c VALUE '-'     LENGTH 1,
             lc_g                  TYPE c VALUE '='     LENGTH 1,
             lc_f                  TYPE c VALUE 'F'     LENGTH 1,
*  Begin of changes in V001
             lc_null               TYPE c VALUE 'NULL'  LENGTH 4,
             lc_nodata             TYPE c VALUE
             'No data found'                            LENGTH 50,
             lc_noinput            TYPE c VALUE
             'No input passed'                          LENGTH 20.
*  End of changes in V001

  DATA: lt_requests TYPE tmsiqreqs,
        ls_requests TYPE stmsiqreq,
        ls_input    TYPE tab512,
        ls_output   TYPE tab512,
        lv_lines    TYPE i,
        lv_before   TYPE stms_flag,
        lv_action   TYPE string,
        lv_system   TYPE tmscsys-sysnam.

  "Clear variables
  CLEAR: ls_requests,
         ls_input,
         ls_output,
         lv_before,
         lv_action,
         lv_system.

  "Free internal tables
  FREE: lt_output,
        lt_requests.

  "Tittle
  ls_output = lc_title.
  APPEND ls_output TO lt_output.
  CLEAR:ls_output.

  READ TABLE lt_input INTO ls_input INDEX 1.
  IF sy-subrc EQ 0.
    lv_action = ls_input.              " Action
  ELSE.
    " No input given
    ls_output = lc_noinput.            "+V001
    APPEND ls_output TO lt_output.
    CLEAR ls_output.
    RETURN.
  ENDIF.

  CASE lv_action.

    WHEN lc_export.                     "Export

      lv_system = sy-sysid.

      CALL FUNCTION 'TMS_UIQ_IQD_READ_QUEUE'
        EXPORTING
          iv_system         = lv_system
        IMPORTING
          et_requests       = lt_requests
        EXCEPTIONS
          read_queue_failed = 1
          OTHERS            = 2.

      IF sy-subrc <> 0.
        "output
        ls_output = lc_nodata.                    "+V001
        APPEND ls_output TO lt_output.
        CLEAR: ls_output.
        RETURN.
      ENDIF.

      lv_before = abap_true.

      IF lt_requests IS NOT INITIAL.

        "Column Headings
        CONCATENATE lc_tr lc_sep lc_owner
        INTO ls_output.
        APPEND ls_output TO lt_output.
        CLEAR: ls_output.

        LOOP AT lt_requests INTO ls_requests.

*     check if request is before or after stopmark
          IF ls_requests-trkorr = lc_tp_stopmark.
            CLEAR lv_before.
          ENDIF.

*     handle active flag, comp version flag and import status
          IF ls_requests-impflg = lc_3 OR        " invalid source system
             ls_requests-impflg = lc_5 OR        " is not marked
             ls_requests-impflg = lc_6 OR        " exclude marked
             ls_requests-impflg = lc_7 OR        " invalid target client
             ls_requests-impflg = lc_t OR         " transport type T
             ls_requests-impflg = lc_c OR         " transport type C
             ls_requests-impflg = lc_k OR         " transport type K
             ls_requests-impflg = lc_w OR         " transport type W
             ls_requests-impflg = lc_e OR         " transport type E
             ls_requests-impflg = lc_m OR         " client transport
             ls_requests-impflg = lc_o.           " transport type O
            ls_requests-impstat = lc_impstat_noimp.
          ELSEIF ls_requests-impflg = lc_2.       " already imported
            ls_requests-impstat = lc_impstat_finished.
          ELSEIF lv_before <> abap_true.         " behind stopmark
            ls_requests-impstat = lc_impstat_stopmark.
          ELSE.                                 " ready for import
            ls_requests-impstat = lc_impstat_ready.
            IF ( ls_requests-umodes = lc_1 OR     " u1
                 ls_requests-umodes CS lc_i OR    " uI
                 ls_requests-umodes CS lc_j OR    " uJ
                 ls_requests-umodes CS lc_f ) AND " uF
               ls_requests-maxrc <> space.       " preliminary imported
              ls_requests-impstat = lc_impstat_overtake.
            ELSEIF ls_requests-umodes CS lc_tp_umode_prel_imp.
              ls_requests-impstat = lc_impstat_overtake.
            ENDIF.
          ENDIF.

          IF ls_requests-actflg = lc_tp_actflg_inactive.   "inactive
            ls_requests-impstat = lc_impstat_approve.
          ELSEIF ls_requests-actflg =  lc_tp_actflg_suspend. "suspend
            ls_requests-impstat = lc_impstat_deny.
          ENDIF.

          IF ls_requests-impstat <> lc_impstat_finished.
            " cvers check
            IF ls_requests-cversflg <> lc_h AND   " unknown
               ls_requests-cversflg <> lc_g AND   " fits
               ls_requests-cversflg <> space.    " no data available
              ls_requests-impstat = lc_impstat_cverschck.
            ENDIF.
          ELSE.
            ls_requests-cversflg = lc_h.
            " already imported -> data may be invalid
          ENDIF.

          IF ls_requests-tpstatid IS INITIAL.       " tp not running
            IF NOT ls_requests-jobid IS INITIAL.    " scheduled
              IF ls_requests-impsing = abap_true.   " single import
                CASE ls_requests-impstat.
                  WHEN lc_impstat_noimp
                    OR lc_impstat_cverschck
                    OR lc_impstat_stopmark
                    OR lc_impstat_overtake
                    OR lc_impstat_ready.
                    ls_requests-impstat = lc_impstat_scheduled.
                  WHEN OTHERS.
                    CLEAR:ls_requests-impstat.
                ENDCASE.
              ELSE.                                   " project import
                CASE ls_requests-impstat.
                  WHEN lc_impstat_overtake
                    OR lc_impstat_cverschck
                    OR lc_impstat_ready.
                    ls_requests-impstat = lc_impstat_scheduled.
                  WHEN OTHERS.
                    CLEAR:ls_requests-impstat.
                ENDCASE.
              ENDIF.
            ENDIF.
          ELSE.                                        " tp is running
            IF ls_requests-impsing = abap_true.        " single import
              CASE ls_requests-impstat.
                WHEN lc_impstat_noimp
                  OR lc_impstat_cverschck
                  OR lc_impstat_stopmark
                  OR lc_impstat_overtake
                  OR lc_impstat_ready.
* Begin of changes V001
                  IF ls_requests-owner IS INITIAL.
                  ls_requests-owner = lc_null.
                  ENDIF.
* End of changes V001
                  "Status - Import Running append to output
                  ls_requests-impstat = lc_impstat_running.
                  CONCATENATE ls_requests-trkorr lc_sep
                  ls_requests-owner
                  INTO ls_output.
                  APPEND ls_output TO lt_output.
                  CLEAR:ls_output.
                WHEN OTHERS.
                  CLEAR:ls_requests-impstat.
              ENDCASE.
            ELSE.                                      " project import
              CASE ls_requests-impstat.
                WHEN lc_impstat_overtake
                  OR lc_impstat_cverschck
                  OR lc_impstat_ready.
* Begin of changes V001
                  IF ls_requests-owner IS INITIAL.
                  ls_requests-owner = lc_null.
                  ENDIF.
* End of changes V001
                  "Status - Import Running append to output
                  ls_requests-impstat = lc_impstat_running.
                  CONCATENATE ls_requests-trkorr lc_sep
                  ls_requests-owner
                  INTO ls_output.
                  APPEND ls_output TO lt_output.
                  CLEAR:ls_output.
                WHEN OTHERS.
                  CLEAR:ls_requests-impstat.
              ENDCASE.
            ENDIF.
          ENDIF.
          CLEAR: ls_requests.
        ENDLOOP.

"Removing column heading from output table if no entries were appended
        DESCRIBE TABLE lt_output LINES lv_lines.
        IF lv_lines LT lc_3.
          DELETE lt_output INDEX 2.
          ls_output = lc_nodata.
          APPEND ls_output TO lt_output.
          CLEAR: ls_output.
        ENDIF.

      ELSE.
        "No records with Import Running Status
        ls_output = lc_nodata.
        APPEND ls_output TO lt_output.
        CLEAR: ls_output.
      ENDIF.

    WHEN OTHERS.
      " Incorrect input
      ls_output = lc_invalid.
      APPEND ls_output TO lt_output.
      CLEAR ls_output.
  ENDCASE.
ENDFORM.