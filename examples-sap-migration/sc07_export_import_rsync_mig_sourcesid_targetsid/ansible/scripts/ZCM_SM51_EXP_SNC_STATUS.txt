*---------------------------------------------------------------------*
* Program Name        :   ZCM_SM51_EXP_SNC_STATUS                     *
* Title               :   Export SNC Status of Application Server     *
* Purpose             :   This report is for exporting SNC Status of  *
*                         Application Server during Cloud Migration   *
*---------------------------------------------------------------------*
* Related Transaction OR Standard Program References                  *
* SM51                                                                *
*---------------------------------------------------------------------*
* Tables              :   SELECT    UPDATE      INSERT      DELETE    *
* XXXXX                     X                                         *
*---------------------------------------------------------------------*
* Program Change History                                              *
*---------------------------------------------------------------------*
*Date        Version   Author          TR#/Local       Description    *
*---------------------------------------------------------------------*
*09-01-2020  Initial   Ruchir Kamble    Local     To export SNC status*
*                                                of application server*
*08-17-2022  V001      Soumya/Yasaswini Local     To pass message "No *
*                                                 data found" in case *
*                                                 of no data found in *
*                                                 system and removal  *
*                                                 of dead code        *
*---------------------------------------------------------------------*

" This code is referred from Standard Report RSSNCSRV
" Refer type group ICON for icons
" Using metadata to replace icons
" Icons replaced in this report are
" icon_alert , icon_unlocked, icon_led_green & icon_system_user_menu

REPORT zcm_sm51_exp_snc_status.

TYPES: BEGIN OF lty_outtab, "+V001
  classname                        LIKE rzllitab-classname,
  name                             LIKE msxxlist-name,
  snc_enable(4),
  pname_appl                       LIKE rfcdessecu-pname_appl,
  snc_accept_insecure_gui(4),
  snc_accept_insecure_rfc(4),
  snc_accept_insecure_r3int_rfc(4),
  snc_accept_insecure_cpic(4),
  snc_permit_insecure_start(4),
  snc_gssapi_lib                   LIKE rsdbtext-zeile,
END OF lty_outtab.

CONSTANTS: lc_sep          TYPE C VALUE '|'                LENGTH 1,
lc_alert        TYPE C VALUE 'AG'               LENGTH 2,
lc_led_green    TYPE C VALUE '5B'               LENGTH 2,
lc_unlocked     TYPE C VALUE '07'               LENGTH 2,
lc_user_menu    TYPE C VALUE '6C'               LENGTH 2,
lc_null         TYPE C VALUE 'NULL'             LENGTH 4,
lc_export       TYPE C VALUE 'EXPORT'           LENGTH 6,
lc_logon_groups LIKE rzllitab-grouptype VALUE space,
lc_active       TYPE C VALUE 'Active'           LENGTH 8,
lc_pr_name      TYPE C VALUE 'PrAsName'         LENGTH 15,
lc_gui_logon    TYPE C VALUE
'Non-secureGUIlogonsallowed'                    LENGTH 50,
lc_rfc_logon    TYPE C VALUE
'Non-secureRFClogonsallowed'                    LENGTH 50,
lc_rfc_internal TYPE C VALUE
'Non-secureInternalRFClogonsallowed'            LENGTH 50,
lc_cpic_logon   TYPE C VALUE
'Non-secureCPIClogonsallowed'                   LENGTH 50,
lc_ext_prog     TYPE C VALUE
'Non-secureexternalprogramsallowed'             LENGTH 50,
lc_library      TYPE C VALUE 'GSSAPILib'        LENGTH 20,
lc_app_server   TYPE C VALUE
'ApplicationServerInstance'                     LENGTH 30,
lc_title        TYPE C VALUE
'SNCStatusofApplicationServer'                  LENGTH 40,
*  Begin of changes of V001
lc_rfcconn      TYPE C VALUE
'RFC connection not possible'                   LENGTH 30,
lc_snc_nactive  TYPE C VALUE 'SNC not active'   LENGTH 14,
lc_othererr     TYPE C VALUE 'Other Error'      LENGTH 11,
lc_nodata       TYPE C VALUE 'No data found'    LENGTH 20,
lc_inc_input    TYPE C VALUE 'Incorrect input'  LENGTH 20,
lc_noinput      TYPE C VALUE 'No input passed'  LENGTH 20.
*  End of changes of V001

DATA : ls_input        TYPE tab512,
      ls_output       TYPE tab512,
      lv_action       TYPE char20,
      lv_subrc        TYPE sy-subrc,
      snc_enable      TYPE C,
      parameter_value TYPE rsdbtext-zeile,
* Begin of changes in V001
      ls_imsxxlist    TYPE msxxlist,
      ls_outtab       TYPE lty_outtab,
      lt_imsxxlist    TYPE STANDARD TABLE OF msxxlist,
      lt_outtab       TYPE STANDARD TABLE OF lty_outtab.

FIELD-SYMBOLS: <fs_outtab> TYPE lty_outtab.
* End of changes in V001


LOAD-OF-PROGRAM.

FORM get_config
               TABLES lt_input  STRUCTURE tab512
                      lt_output STRUCTURE tab512.

* Begin of changes in V001
  " Adding title to the output
  ls_output = lc_title.
  APPEND ls_output TO lt_output.
* End of changes in V001

  READ TABLE lt_input INTO ls_input INDEX 1.
  IF sy-subrc EQ 0.
    lv_action = ls_input.      " Action
* Begin of changes in V001
  ELSE.
    " No input given
    ls_output = lc_noinput.
    APPEND ls_output TO lt_output.
    CLEAR ls_output.
    RETURN.
  ENDIF.
* End of changes in V001

  CASE lv_action.

  WHEN lc_export.  " If action is EXPORT

    CALL FUNCTION 'TH_SERVER_LIST'
    TABLES
      list           = lt_imsxxlist
    EXCEPTIONS
      no_server_list = 1
      OTHERS         = 2.

*   Begin of changes in V001
    IF lt_imsxxlist IS INITIAL.
      ls_output = lc_nodata.
      APPEND ls_output TO lt_output.
      CLEAR ls_output.
      RETURN.
    ENDIF.
*   End of changes in V001

    LOOP AT lt_imsxxlist INTO ls_imsxxlist. "+V001
      CLEAR: ls_outtab, snc_enable.

* Servername
      ls_outtab-name = ls_imsxxlist-name. "+V001

* SNC-Status
      CALL FUNCTION 'SNC_GET_MY_INFO'
      DESTINATION ls_imsxxlist-name
      IMPORTING
        pname_appl            = ls_outtab-pname_appl
        rc                    = lv_subrc
      EXCEPTIONS
        internal_error        = 1
        snc_not_active        = 2
        communication_failure = 3
        system_failure        = 4
        OTHERS                = 5.
      CASE sy-subrc.
      WHEN 2.
        ls_outtab-pname_appl = lc_snc_nactive. "+V001
      WHEN 3 OR 4.
        ls_outtab-pname_appl = lc_rfcconn. "+V001
        ls_outtab-snc_enable = icon_alert.  "ICON_FAILURE.
        APPEND ls_outtab TO lt_outtab. "+V001
        CONTINUE.
      WHEN 1 OR 5.
        ls_outtab-pname_appl = lc_othererr. "+V001
      ENDCASE.

* Profile Parameter lesen      SBUF_PARAMETER_GET
* Alle Profile Parameter lesen RZL_GET_PROFILE_PAR
      DATA: par_sub  LIKE spfparlist OCCURS 0 WITH HEADER LINE,
            par_usub LIKE spfparlist OCCURS 0 WITH HEADER LINE.

      CALL FUNCTION 'RZL_GET_PROFILE_PAR'
      DESTINATION ls_imsxxlist-name
      IMPORTING
        subrc                 = lv_subrc
      TABLES
        par_sub               = par_sub
        par_usub              = par_usub
      EXCEPTIONS
        communication_failure = 3
        system_failure        = 4
        OTHERS                = 1.
      CASE sy-subrc.
      WHEN 3 OR 4.
        ls_outtab-pname_appl = lc_rfcconn. "+V001
        ls_outtab-snc_enable = lc_alert.  "ICON_FAILURE.
        APPEND ls_outtab TO lt_outtab.
        CONTINUE.
      WHEN 1.
        ls_outtab-pname_appl = lc_othererr. "+V001
      ENDCASE.
      IF lv_subrc NE 0.
        ls_outtab-pname_appl = lc_othererr. "+V001
      ENDIF.

* snc/enable
      READ TABLE par_sub
      WITH KEY parname = 'snc/enable'.
      IF sy-subrc = 0.
        IF par_sub-parvalu IS INITIAL.
          par_sub-parvalu = par_sub-parvald.
        ENDIF.
        IF par_sub-parvalu = '1'.
          snc_enable = 'X'.
          ls_outtab-snc_enable = lc_led_green. "icon_activate.
        ELSE.

        ENDIF.
      ENDIF.

* snc/accept_insecure_gui
      READ TABLE par_sub
      WITH KEY parname = 'snc/accept_insecure_gui'.
      IF sy-subrc = 0.
        IF par_sub-parvalu IS INITIAL.
          par_sub-parvalu = par_sub-parvald.
        ENDIF.
        IF par_sub-parvalu = '1' OR snc_enable IS INITIAL.
          ls_outtab-snc_accept_insecure_gui = lc_unlocked.
      ELSEIF parameter_value = 'U'.
          ls_outtab-snc_accept_insecure_gui = lc_user_menu.
        ENDIF.
      ENDIF.

* snc/accept_insecure_rfc
      READ TABLE par_sub
      WITH KEY parname = 'snc/accept_insecure_rfc'.
      IF sy-subrc = 0.
        IF par_sub-parvalu IS INITIAL.
          par_sub-parvalu = par_sub-parvald.
        ENDIF.

        IF par_sub-parvalu = '1' OR snc_enable IS INITIAL.
          ls_outtab-snc_accept_insecure_rfc = lc_unlocked.
      ELSEIF parameter_value = 'U'.
          ls_outtab-snc_accept_insecure_rfc = lc_user_menu.
        ENDIF.
      ENDIF.

* snc/accept_insecure_r3int_rfc
      READ TABLE par_sub
      WITH KEY parname = 'snc/accept_insecure_r3int_rfc'.
      IF sy-subrc = 0.
        IF par_sub-parvalu IS INITIAL.
          par_sub-parvalu = par_sub-parvald.
        ENDIF.

        IF par_sub-parvalu = '1' OR snc_enable IS INITIAL.
          ls_outtab-snc_accept_insecure_r3int_rfc = lc_unlocked.
        ENDIF.
      ENDIF.

* snc/accept_insecure_cpic
      READ TABLE par_sub
      WITH KEY parname = 'snc/accept_insecure_cpic'.
      IF sy-subrc = 0.
        IF par_sub-parvalu IS INITIAL.
          par_sub-parvalu = par_sub-parvald.
        ENDIF.

        IF par_sub-parvalu = '1' OR snc_enable IS INITIAL.
          ls_outtab-snc_accept_insecure_cpic = lc_unlocked.
      ELSEIF parameter_value = 'U'.
          ls_outtab-snc_accept_insecure_cpic = lc_user_menu.
        ENDIF.
      ENDIF.

* snc/permit_insecure_start
      READ TABLE par_sub
      WITH KEY parname = 'snc/permit_insecure_start'.
      IF sy-subrc = 0.
        IF par_sub-parvalu IS INITIAL.
          par_sub-parvalu = par_sub-parvald.
        ENDIF.

        IF par_sub-parvalu = '1' OR snc_enable IS INITIAL.
          ls_outtab-snc_permit_insecure_start = lc_unlocked.
        ENDIF.
      ENDIF.

* snc/gssapi_lib
      READ TABLE par_sub
      WITH KEY parname = 'snc/gssapi_lib'.
      IF sy-subrc = 0.
        IF par_sub-parvalu IS INITIAL.
          par_sub-parvalu = par_sub-parvald.
        ENDIF.
        ls_outtab-snc_gssapi_lib = par_sub-parvalu.
      ENDIF.

* Logon Gruppen

      SELECT classname FROM rzllitab INTO ls_outtab-classname
      WHERE applserver = ls_imsxxlist-name
      AND grouptype  = lc_logon_groups.
        APPEND ls_outtab TO lt_outtab. "+V001
      ENDSELECT.
      IF sy-subrc NE 0.
        CLEAR ls_outtab-classname.
        APPEND ls_outtab TO lt_outtab. "+V001
      ENDIF.

      APPEND ls_outtab TO lt_outtab. "+V001

    ENDLOOP.

    DELETE ADJACENT DUPLICATES FROM lt_outtab.

    IF lt_outtab IS NOT INITIAL.

      " Adding heading to the output
      CONCATENATE lc_app_server     lc_sep
      lc_active         lc_sep
      lc_pr_name        lc_sep
      lc_gui_logon      lc_sep
      lc_rfc_logon      lc_sep
      lc_rfc_internal   lc_sep
      lc_cpic_logon     lc_sep
      lc_ext_prog       lc_sep
      lc_library
      INTO ls_output.
      APPEND ls_output TO lt_output.

      LOOP AT lt_outtab ASSIGNING <fs_outtab>.

        IF <fs_outtab>-snc_enable IS INITIAL.
          <fs_outtab>-snc_enable = lc_null.
        ENDIF.
* Begin of changes in V001
        IF <fs_outtab>-snc_gssapi_lib IS INITIAL.
          <fs_outtab>-snc_gssapi_lib = lc_null.
        ENDIF.
* End of changes in V001

        CONCATENATE <fs_outtab>-name                          lc_sep
        <fs_outtab>-snc_enable                    lc_sep
        <fs_outtab>-pname_appl                    lc_sep
        <fs_outtab>-snc_accept_insecure_gui       lc_sep
        <fs_outtab>-snc_accept_insecure_rfc       lc_sep
        <fs_outtab>-snc_accept_insecure_r3int_rfc lc_sep
        <fs_outtab>-snc_accept_insecure_cpic      lc_sep
        <fs_outtab>-snc_permit_insecure_start     lc_sep
        <fs_outtab>-snc_gssapi_lib
        INTO ls_output.
        APPEND ls_output TO lt_output.
      ENDLOOP.
*  Begin of changes in V001
    ELSE.
      ls_output = lc_nodata.
      APPEND ls_output TO lt_output.
      CLEAR ls_output.
      RETURN.
*  End of changes in V001
    ENDIF.

*   Begin of changes in V001

    "Adding NULL values in between
    DO.
      REPLACE ALL OCCURRENCES OF SUBSTRING '||'
      IN TABLE lt_output WITH '|NULL|'.
      FIND '||' IN TABLE lt_output.
      IF sy-subrc <> 0.
        EXIT .
      ENDIF.
    ENDDO.

  WHEN OTHERS.
    " Incorrect input
    ls_output = lc_inc_input.
    APPEND ls_output TO lt_output.
    CLEAR ls_output.
*   End of changes in V001

  ENDCASE.


ENDFORM.