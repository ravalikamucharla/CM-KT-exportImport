*---------------------------------------------------------------------*
* Program Name        :  ZCM_SM02_READ_SYSTEM_MESSAGE                 *
* Title               :  Read System Messages                         *
* Purpose             :  This report is used to read system messages  *
*---------------------------------------------------------------------*
* Related Transaction OR Standard Program References                  *
* XXXXXXX                                                             *
*---------------------------------------------------------------------*
* Tables              :   SELECT    UPDATE      INSERT      DELETE    *
* XXXXX                     X                                         *
*---------------------------------------------------------------------*
* Program Change History                                              *
*---------------------------------------------------------------------*
*Date        Version   Author       TR#/Local     Description         *
*---------------------------------------------------------------------*
*09-03-2020  Initial  Fathima Hussain Local     To read system        *
*                                               messages in SM02 tcode*
*13-09-2022  V001     Yasaswini K    Local      To add no data found  *
*                                               in case no data in sys*
*                                               tem                   *
*---------------------------------------------------------------------*

REPORT zcm_sm02_read_system_message.

FORM get_config
              TABLES lt_input  STRUCTURE tab512
                     lt_output STRUCTURE tab512.

  CONSTANTS:
    lc_sep       TYPE c       VALUE '|',
    lc_nodata    TYPE char80 VALUE 'No data found',           "+V001
    lc_title     TYPE char20 VALUE 'System Messages',
    lc_msg_id    TYPE char20 VALUE 'Message ID',
    lc_id        TYPE char20 VALUE 'ID of System Message',
    lc_text      TYPE char80 VALUE 'Text of System Message',
    lc_created   TYPE char80 VALUE 'Creation Date of System Message',
    lc_crtime    TYPE char80 VALUE 'Creation Time of System Message',
    lc_expire    TYPE char80 VALUE 'Expiration Date of System Message',
    lc_exptime   TYPE char80 VALUE 'Expiration Time of System Message',
    lc_author    TYPE char80 VALUE  'Author',
    lc_server    TYPE char80 VALUE 'Server Name',
    lc_norow     TYPE char80 VALUE 'Number of Lines in System Message',
    lc_currow    TYPE char80 VALUE 'Current Row',
    lc_client    TYPE char80 VALUE  'Client',
    lc_delete    TYPE char80 VALUE 'Delete date',
    lc_deltime   TYPE char80 VALUE 'Delete time',
    lc_langu     TYPE char80 VALUE 'Language',
    lc_export    TYPE char20 VALUE 'EXPORT',

*  Begin of changes in V001
    lc_ninput    TYPE c VALUE
    'No input passed'                              LENGTH 15,
    lc_inc_input TYPE c VALUE
    'Incorrect input'                              LENGTH 20.
*  End of changes in V001

  DATA: ls_input     TYPE tab512,
        ls_output    TYPE tab512,
        ls_prefinal  TYPE string,
        lv_action    TYPE char8,
        lv_msg_id    TYPE string,
        lv_id        TYPE string,
        lv_norow     TYPE string,
        lv_currow    TYPE string,
        lv_msg_nr    TYPE int4,
        lt_messages  TYPE STANDARD TABLE OF temsg,
        ls_messages  TYPE temsg,
        lv_iteration TYPE string,
        lv_timestamp TYPE string.


  CLEAR: ls_input,
         lv_action.

  " Title
  ls_output = lc_title.
  APPEND ls_output TO lt_output.

  " Read action required from Python interface
  READ TABLE lt_input INTO ls_input INDEX 1.

  IF sy-subrc EQ 0.
    lv_action = ls_input.
  ELSE.
    " No input passed
    ls_output = lc_ninput.
    APPEND ls_output TO lt_output.
    CLEAR ls_output.
    RETURN.
  ENDIF.

  CASE lv_action.

    WHEN lc_export.

      CLEAR: ls_output.

      CALL FUNCTION 'SM02_READ_MESSAGES'
        TABLES
          messages = lt_messages.

      IF lt_messages IS INITIAL.
        ls_output = lc_nodata.                    "+V001
        APPEND ls_output TO lt_output.
        RETURN.
      ENDIF.

* Column Headings
      CONCATENATE lc_msg_id   lc_sep
                  lc_norow    lc_sep
                  lc_currow   lc_sep
                  lc_id       lc_sep
                  lc_text     lc_sep
                  lc_created  lc_sep
                  lc_crtime   lc_sep
                  lc_expire   lc_sep
                  lc_exptime  lc_sep
                  lc_author   lc_sep
                  lc_server   lc_sep
                  lc_client   lc_sep
                  lc_delete   lc_sep
                  lc_deltime  lc_sep
                  lc_langu  INTO ls_output.
      APPEND ls_output TO lt_output.

* Set initial values in order to determine the message group
      lv_msg_nr = 1.
      READ TABLE lt_messages INTO ls_messages INDEX 1.
      IF sy-subrc = 0.
        CONCATENATE ls_messages-datcre
                    ls_messages-timcre
                    INTO lv_iteration.
      ENDIF.

      LOOP AT lt_messages INTO ls_messages.

        lv_id = ls_messages-id.
        lv_norow = ls_messages-norow.
        lv_currow = ls_messages-curow.

* Determining the grouping of messages based on timestamp
        CONCATENATE ls_messages-datcre
                    ls_messages-timcre
                    INTO lv_timestamp.

        IF lv_timestamp = lv_iteration.
          lv_msg_id = lv_msg_nr.
        ELSE.
          lv_msg_nr = lv_msg_nr + 1.
          lv_msg_id = lv_msg_nr.
          lv_iteration = lv_timestamp.
        ENDIF.

        CONCATENATE
                lv_msg_id          lc_sep
                lv_norow           lc_sep
                lv_currow          lc_sep
                lv_id              lc_sep
                ls_messages-emtext lc_sep
                ls_messages-datcre lc_sep
                ls_messages-timcre lc_sep
                ls_messages-datdel lc_sep
                ls_messages-timdel lc_sep
                ls_messages-author lc_sep
                ls_messages-applserver lc_sep
                ls_messages-client lc_sep
                ls_messages-datrem lc_sep
                ls_messages-timrem lc_sep
                ls_messages-langu
                INTO   ls_prefinal.
        PERFORM end_null_check CHANGING ls_prefinal.
        ls_output = ls_prefinal.
        APPEND ls_output TO lt_output.

      ENDLOOP.

      "adding null to blanks - in betweeen
      PERFORM null_check TABLES  lt_output.


    WHEN OTHERS.
*  Begin of changes in V001
      ls_output = lc_inc_input. "Incorrect input
      APPEND ls_output TO lt_output.
      CLEAR ls_output.
*  End of changes in V001
  ENDCASE.

ENDFORM.

FORM null_check TABLES lt_table TYPE table.
  DO .
    REPLACE ALL OCCURRENCES OF SUBSTRING '||'
    IN TABLE lt_table WITH '|NULL|'.
    FIND '||' IN TABLE lt_table.
    IF sy-subrc <> 0.
      EXIT .
    ENDIF.
  ENDDO.
ENDFORM.

FORM end_null_check CHANGING ls_string TYPE string.

  DATA lv_last_char TYPE char1.

  lv_last_char = substring( val = ls_string
                   off = strlen( ls_string ) - 1
                   len = 1 ).
  IF lv_last_char = '|'.
    CONCATENATE ls_string 'NULL'
      INTO ls_string.
  ENDIF.

ENDFORM.