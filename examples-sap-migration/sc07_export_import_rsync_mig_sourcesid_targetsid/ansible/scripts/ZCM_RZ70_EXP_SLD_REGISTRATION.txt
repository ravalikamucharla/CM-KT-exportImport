*---------------------------------------------------------------------*
* Program Name        :  ZCM_RZ70_EXP_SLD_REGISTRATION                *
* Title               :  Fetch details of Gateway host, service and   *
*                        period in minutes                            *
* Purpose             :  To export Gateway host,  service and period  *
*                        in minutes                                   *
*---------------------------------------------------------------------*
* Related Transaction OR Standard Program References                  *
* RZ70                                                                *
*---------------------------------------------------------------------*
* Tables              :   SELECT    UPDATE      INSERT      DELETE    *
* SLDAGADM                  X                                         *
*---------------------------------------------------------------------*
* Program Change History                                              *
*---------------------------------------------------------------------*
*Date        Version   Author       TR#/Local     Description         *
*---------------------------------------------------------------------*
*09-22-2020  Initial   Soumya Ray   Local      To export Gateway host,*
*                                              service and period in  *
*                                              minutes                *
*03-30-2022  V001      Soumya Ray   Local      To correct the message *
*                                            in case of no data, wrong*
*                                              input and remove inline*
*                                              declarations           *
*---------------------------------------------------------------------*

REPORT zcm_rz70_exp_sld_registration.

FORM get_config
               TABLES lt_input  STRUCTURE tab512 " Input from PYTHON
                      lt_output STRUCTURE tab512. " Output to PYTHON

  CONSTANTS: lc_sep       TYPE c       VALUE '|',
             lc_export    TYPE char20   VALUE 'EXPORT',
             lc_msg_head  TYPE string VALUE
                            'Registrationinsystemlandscapedirectory',
             lc_tablename TYPE tabname  VALUE 'SLDAGADM',
*   Begin of changes in V001
             lc_noinput   TYPE c        VALUE
             'No input passed'                            LENGTH 15,
             lc_inc_input TYPE c        VALUE
             'Incorrect Input'                            LENGTH 20,
             lc_nodata    TYPE c        VALUE
             'No data found'                              LENGTH 20.
* End of changes in V001

  DATA: ls_output     TYPE tab512,
        ref_table_des TYPE REF TO cl_abap_structdescr,
        idetails      TYPE abap_compdescr_tab,
        xdetails      TYPE abap_compdescr,
        ls_prefinal   TYPE string,
        lv_btcmin     TYPE string,
*  Begin of changes in V001
        ls_input      TYPE tab512,
        lv_action     TYPE string,
        ls_sldagadm   TYPE sldagadm.

  CLEAR: ls_output, ls_prefinal, lv_btcmin, ls_input, lv_action,
  ls_sldagadm, xdetails.
  FREE: idetails, ref_table_des.

  ls_output = lc_msg_head. " Heading of script
  APPEND ls_output TO lt_output.
  CLEAR ls_output.
*  End of changes in V001

  " Read action required from Python interface
  READ TABLE lt_input INTO ls_input INDEX 1.
* Begin of changes in V001
  IF sy-subrc NE 0.
    ls_output = lc_noinput.
    APPEND ls_output TO lt_output.
    CLEAR ls_output.
    RETURN.
  ENDIF.
* End of changes in V001
  lv_action = ls_input.

  CASE lv_action.

    WHEN lc_export. " EXPORT action

* Select to get the table entries of SLDAGADM for PROGNAME RSLDAGDS
      SELECT SINGLE * FROM sldagadm
      INTO ls_sldagadm
            WHERE progname = 'RSLDAGDS'.
      IF sy-subrc NE 0. " In case table has no value
        ls_output = lc_nodata.
        APPEND ls_output TO lt_output.
        CLEAR ls_output.
        RETURN. "+V001
      ELSE.                 " In case table has value
* //Logic to get Column headings
        ref_table_des ?=
        cl_abap_typedescr=>describe_by_name( lc_tablename ).
        idetails[] = ref_table_des->components[].
        LOOP AT idetails INTO xdetails.
          CONCATENATE ls_prefinal xdetails-name lc_sep
          INTO ls_prefinal.
          CLEAR xdetails.
        ENDLOOP.
        ls_prefinal = shift_right( val = ls_prefinal  places = 1 ).
        ls_output = ls_prefinal.
        APPEND ls_output TO lt_output.
* //Logic to get Column headings
        CLEAR: ls_prefinal, ls_output.
        lv_btcmin = ls_sldagadm-btcmin. " BTCMIN type casted to string
*   Table value is concatenated to output table
        CONCATENATE ls_sldagadm-progname lc_sep
        ls_sldagadm-active   lc_sep
        ls_sldagadm-seqnr    lc_sep
        ls_sldagadm-dorfc    lc_sep
        ls_sldagadm-rfcdest  lc_sep
        ls_sldagadm-gwhost   lc_sep
        ls_sldagadm-gwserv   lc_sep
        ls_sldagadm-doshm    lc_sep
        ls_sldagadm-dobtc    lc_sep
        lv_btcmin            lc_sep
        ls_sldagadm-cshmhost lc_sep
        ls_sldagadm-test     lc_sep
        ls_sldagadm-testcnt  lc_sep
        ls_sldagadm-testprnt INTO ls_prefinal. " Data value
*  Form to replace blank values in last field with NULL.
        PERFORM end_null_check CHANGING ls_prefinal.
        CONDENSE ls_prefinal.
        ls_output = ls_prefinal.
        APPEND ls_output TO lt_output.
      ENDIF.

*  Form to replace blank values in fields ( in between ) with NULL.
      PERFORM null_check TABLES  lt_output.
*  Begin of changes in V001
    WHEN OTHERS.
      ls_output = lc_inc_input. "Incorrect input
      APPEND ls_output TO lt_output.
      CLEAR ls_output.
*  End of changes in V001
  ENDCASE.

  CLEAR: ls_prefinal, lv_btcmin, ls_input, lv_action,
  xdetails, lv_action.
  FREE: idetails, ref_table_des.

ENDFORM.

FORM null_check  TABLES   lt_table TYPE table.

  DO .
    REPLACE ALL OCCURRENCES OF SUBSTRING '||'
    IN TABLE lt_table WITH '|NULL|'.
    FIND '||' IN TABLE lt_table.
    IF sy-subrc <> 0.
      EXIT .
    ENDIF.
  ENDDO.

ENDFORM.

FORM end_null_check  CHANGING ls_string TYPE string.

  DATA lv_last_char TYPE char1.

  lv_last_char = substring( val = ls_string
  off = strlen( ls_string ) - 1
  len = 1 ).
  IF lv_last_char = '|'.
    CONCATENATE ls_string 'NULL'
    INTO ls_string.
  ENDIF.

ENDFORM.