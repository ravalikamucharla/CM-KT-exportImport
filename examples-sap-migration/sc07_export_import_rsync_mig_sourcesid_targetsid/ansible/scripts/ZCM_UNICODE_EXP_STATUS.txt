*---------------------------------------------------------------------*
* Program Name        : ZCM_UNICODE_EXP_STATUS                        *
* Title               : Unicode information                           *
* Purpose             : This report is used to export if the system   *
*                       is unicode or not                             *
*---------------------------------------------------------------------*
* Related Transaction OR Standard Program References                  *
* XXX                                                                 *
*---------------------------------------------------------------------*
* Tables              :   SELECT    UPDATE      INSERT      DELETE    *
* TCPDB                     X                                         *
*---------------------------------------------------------------------*
* Program Change History                                              *
*---------------------------------------------------------------------*
*Date        Version   Author       TR#/Local     Description         *
*---------------------------------------------------------------------*
*09-04-2020  Initial  Fathima Hussain   Local     To export if the s/m*
*                                                 is unicode or not   *
*09-07-2022  V001     Yasaswini K       Local     To pass "No data    *
*                                                 found" in case no   *
*                                                 data present and to *
*                                                 delete dead code    *
*---------------------------------------------------------------------*

REPORT zcm_unicode_exp_status.


FORM get_config
              TABLES lt_input  STRUCTURE tab512
                     lt_output STRUCTURE tab512.

  CONSTANTS: lc_sep       TYPE c       VALUE '|',
             lc_export    TYPE char20  VALUE 'EXPORT',
* Begin of changes in V001
             lc_cpkind    TYPE c VALUE
             'CPKIND'                                     LENGTH 6,
             lc_u         TYPE c VALUE
             'U'                                          LENGTH 1,
             lc_yes       TYPE c VALUE
             'Yes'                                        LENGTH 3,
             lc_no        TYPE c VALUE
             'No'                                         LENGTH 2,
             lc_tcpdb     TYPE c VALUE
             'TCPDB'                                      LENGTH 5,
             lc_title     TYPE c VALUE
             'Unicode'                                    LENGTH 25,
             lc_noinput   TYPE c VALUE
             'No input passed'                            LENGTH 15,
             lc_inc_input TYPE c VALUE
             'Incorrect Input'                            LENGTH 20,
             lc_cptransfld TYPE c VALUE
             'CPTRANSFLD'                                 LENGTH 10,
             lc_cppoolclus TYPE c VALUE
             'CPPOOLCLUS'                                 LENGTH 10,
             lc_err_msg   TYPE c VALUE
             'No data found'                              LENGTH 50.
* End of changes in V001

  DATA: ls_input    TYPE tab512,
        ls_output   TYPE tab512,
        ls_prefinal TYPE string,
        lv_action   TYPE char8,
        lv_cpkind   TYPE cpkind,
        ls_tcpdb    TYPE tcpdb, "+V001
        lt_tcpdb    TYPE STANDARD TABLE OF tcpdb.          "+V001

  CLEAR: ls_input, lv_action.

* Begin of changes in V001
  " Adding title to the output
  ls_output = lc_title.
  APPEND ls_output TO lt_output.
  CLEAR ls_output.
* End of changes in V001

  " Read the action required from Python interface
  READ TABLE lt_input INTO ls_input INDEX 1.

* Begin of changes in V001
  IF sy-subrc NE 0.
    ls_output = lc_noinput.
    APPEND ls_output TO lt_output.
    CLEAR ls_output.
    RETURN.
  ENDIF.
* End of changes in V001

  lv_action = ls_input.

  CASE lv_action.

    WHEN lc_export.

      FREE: lt_output[].                     "+V001

*      Table Name
      ls_output = lc_title.
      APPEND ls_output TO lt_output.

      CALL FUNCTION 'SCP_GET_CODEPAGE_KIND'
        IMPORTING
          cpkind    = lv_cpkind
        EXCEPTIONS
          not_found = 1
          OTHERS    = 2.
      IF sy-subrc <> 0.
        ls_output = lc_err_msg.                     "+V001
        APPEND ls_output TO lt_output.
        RETURN.
      ENDIF.

      " Field Name
      ls_output = lc_cpkind.                      "+V001
      APPEND ls_output TO lt_output.

      " Table Data
      IF lv_cpkind(1) = lc_u.                     "+V001
        ls_output = lc_yes.
        APPEND ls_output TO lt_output.

      ELSE.
        ls_output = lc_no.                         "+V001
        APPEND ls_output TO lt_output.

*Blank line between tables
        CLEAR ls_output.
        APPEND ls_output TO lt_output.


*      Table Name
        ls_output = lc_tcpdb.
        APPEND ls_output TO lt_output.

        SELECT * FROM tcpdb
          INTO TABLE lt_tcpdb.
        IF sy-subrc <> 0.
          ls_output = lc_err_msg.                   "+V001
          APPEND ls_output TO lt_output.
          RETURN.
        ENDIF.

        " Titles
        CONCATENATE lc_cptransfld lc_sep
                    lc_cppoolclus                  "+V001
                    INTO ls_output.
        APPEND ls_output TO lt_output.

        "Table data
        LOOP AT lt_tcpdb INTO ls_tcpdb.
          CONCATENATE ls_tcpdb-cptransfld lc_sep
                      ls_tcpdb-cppoolclus
                     INTO ls_prefinal.
          PERFORM end_null_check CHANGING ls_prefinal.
          ls_output = ls_prefinal.
          APPEND ls_output TO lt_output.
        ENDLOOP.

        PERFORM null_check TABLES  lt_output.

      ENDIF.

* Begin of changes in V001
    WHEN OTHERS.
      ls_output = lc_inc_input. "Incorrect input
      APPEND ls_output TO lt_output.
      CLEAR ls_output.
*  End of changes in V001

  ENDCASE.

ENDFORM.

FORM end_null_check CHANGING ls_string TYPE string.

  DATA lv_last_char TYPE char1.

  lv_last_char = substring( val = ls_string
                   off = strlen( ls_string ) - 1
                   len = 1 ).
  IF lv_last_char = '|'.
    CONCATENATE ls_string 'NULL'
      INTO ls_string.
  ENDIF.

ENDFORM.


FORM null_check TABLES lt_table TYPE table.

  DO .
    REPLACE ALL OCCURRENCES OF SUBSTRING '||'
    IN TABLE lt_table WITH '|NULL|'.
    FIND '||' IN TABLE lt_table.
    IF sy-subrc <> 0.
      EXIT .
    ENDIF.
  ENDDO.

ENDFORM.