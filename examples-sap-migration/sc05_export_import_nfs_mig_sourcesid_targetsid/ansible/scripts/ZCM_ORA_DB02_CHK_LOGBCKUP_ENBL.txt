*---------------------------------------------------------------------*
* Program Name        :  ZCM_ORA_DB02_CHK_LOGBCKUP_ENBL               *
* Title               :  Logical Systems                              *
* Purpose             :  To make sure the log backup is enabled during*
*                        import (DB02 tcode). The Logmode is checked. *
*                       If its ARCHIVELOG thefreespace, last sucessful*
*                       backup, and the latest redo log backup details*
*                       are fetched.                                  *
*---------------------------------------------------------------------*
* Related Transaction OR Standard Program References                  *
* DB02                                                                *
*---------------------------------------------------------------------*
* Tables              :   SELECT    UPDATE      INSERT      DELETE    *
* SDBAH                     X                                         *
*---------------------------------------------------------------------*
* Program Change History                                              *
*---------------------------------------------------------------------*
*Date        Version     Author       TR#/Local     Description       *
*---------------------------------------------------------------------*
*10-08-2020  Initial   Soumya Ray     Loacl        To check log backup*
*                                                  enabled or not     *
*09-12-2022  V001      Soumya Ray     Local        To remove the inlin*
*                                                  e declarations     *
*---------------------------------------------------------------------*
REPORT zcm_ora_db02_chk_logbckup_enbl.

LOAD-OF-PROGRAM.

FORM get_config
               TABLES ft_input  STRUCTURE tab512
                      ft_output STRUCTURE tab512.

  CONSTANTS: lc_export     TYPE char8 VALUE 'EXPORT',
             lc_sep        TYPE c VALUE '|',
             lc_head       TYPE string
                             VALUE 'Logbackupstatus',
             lc_subhead1   TYPE string
                             VALUE 'Archivingdirectorystatus',
             lc_subhead2   TYPE string
                             VALUE 'Overviewofredologbackups',
             lc_msg        TYPE char30 VALUE 'Logmode',
             lc_fsysname   TYPE sdbaidir-directory VALUE
                             '/oracle/NWO/oraarch',
             lc_system     TYPE dbcon_name VALUE 'DEFAULT',
             lc_funct      TYPE sdba_funct VALUE 'cds',
             lc_host       TYPE char30 VALUE 'Databasehost',
             lc_directory  TYPE char30 VALUE 'Directory',
             lc_status     TYPE char30 VALUE 'Freespace(MB)',
             lc_function   TYPE char30 VALUE 'Function',
             lc_opstart    TYPE char30 VALUE 'Operationstart',
             lc_opend      TYPE char30 VALUE 'Operationend',
             lc_rc         TYPE char2  VALUE 'Rc',
             lc_actionid   TYPE char30 VALUE 'Actionid',
             lc_databaseop TYPE char30 VALUE 'Databaseoperation',
             lc_fid        TYPE char4  VALUE 'Fid',
             lc_nredomsg   TYPE char30  VALUE 'Redo log unavailable',
             lc_subhead3   TYPE char30 VALUE 'Lastscucessfulbackup',
             lc_narcstatus TYPE string
                             VALUE  'No archiving directory',
             lc_msgbackup  TYPE string
                             VALUE  'Backup unsucessful',
             lc_date       TYPE char30 VALUE 'Date',
             lc_time       TYPE char30 VALUE 'Time',
* Begin of changes in V001
             lc_noinput    TYPE c VALUE 'No input given'    LENGTH 20,
             lc_inc_input  TYPE c VALUE 'Incorrect input'   LENGTH 20.
* En of changes in V001



  DATA: ls_dbgemd    TYPE db02n_dbgemd,
        lt_hisavg    TYPE TABLE OF dbase_hist_avg,
        lt_his       TYPE TABLE OF dbase_hist,
        lt_fsingle   TYPE TABLE OF fsy_single,
        ls_output    TYPE tab512,
        lv_free      TYPE string,
        lv_host      TYPE string,
        ls_prefinal  TYPE string,
        lv_function  TYPE string VALUE 'copy,delete,save',
        lt_backup    TYPE TABLE OF sdbah,
* Begin of changes in V001
        lv_fsysname  TYPE string,
        ls_fsingle   TYPE fsy_single,
        ls_input     TYPE tab512,
        lv_action    TYPE string,
        ls_dbafid    TYPE dbafid,
        ls_sdbah     TYPE sdbah,
        ls_backup    TYPE sdbah,
        lv_date      TYPE sy-datum,
        lv_time      TYPE sy-uzeit,
        lt_sdbah     TYPE STANDARD TABLE OF sdbah.
* End of changes in V001

  ls_output = lc_head.
  APPEND ls_output TO ft_output.
  CLEAR:ls_output.

  READ TABLE ft_input INTO ls_input INDEX 1.
* Begin of changes in V001
  IF sy-subrc NE 0.
    " No input given
    ls_output = lc_noinput.
    APPEND ls_output TO ft_output.
    CLEAR ls_output.
    RETURN.
  ENDIF.
* End of changes in V001

  lv_action = ls_input.

  CASE lv_action.
    WHEN lc_export.
      CALL FUNCTION 'C_ORA_DB_INIT'
        EXPORTING
          i_remote_system            = lc_system
        IMPORTING
          wa_db_ge_md                = ls_dbgemd
        TABLES
          tab_db_ge_hi_d             = lt_hisavg
          tab_db_ge_hi_d_with_dup    = lt_his
          tab_db_ge_hi_d_without_dup = lt_his
          tab_db_ge_hi_w             = lt_hisavg
          tab_db_ge_hi_w_with_dup    = lt_his
          tab_db_ge_hi_w_without_dup = lt_his
          tab_db_ge_hi_m             = lt_hisavg
          tab_db_ge_hi_m_with_dup    = lt_his
          tab_db_ge_hi_m_without_dup = lt_his.

      ls_output = lc_msg.
      APPEND ls_output TO ft_output.
      CLEAR:ls_output.
      ls_output = ls_dbgemd-log_mode.
      APPEND ls_output TO ft_output.
      CLEAR:ls_output.

      IF ls_dbgemd-log_mode EQ 'ARCHIVELOG'.

        "To get Archiving directory status
        CALL FUNCTION 'GET_FSYS_SINGLE'
          EXPORTING
            local_remote                   = 'LOCAL'
          TABLES
            tf_fsys_single                 = lt_fsingle
          EXCEPTIONS
            internal_error_adress_failed   = 1
            internal_error_different_field = 2
            internal_error_no_new_line     = 3
            collector_not_running          = 4
            shared_memory_not_available    = 5
            collector_busy                 = 6
            version_conflict               = 7
            no_network_collector_running   = 8
            system_failure                 = 9
            communication_failure          = 10
            OTHERS                         = 11.
        IF NOT lt_fsingle IS INITIAL.

          APPEND ls_output TO ft_output.
          ls_output = lc_subhead1. " Heading of archiving status
          APPEND ls_output TO ft_output.
          CLEAR ls_output.

          READ TABLE lt_fsingle INTO ls_fsingle
          WITH KEY fsysname = lc_fsysname.
          IF sy-subrc EQ 0.

            lv_free = ls_fsingle-free.
            lv_host  = sy-host.
            CONCATENATE lc_fsysname '/.' INTO lv_fsysname.
            CONCATENATE lc_host lc_sep
            lc_directory lc_sep
            lc_status INTO ls_output.
            APPEND ls_output TO ft_output.
            CLEAR ls_output.
            CONCATENATE lv_host lc_sep " dbname
            lv_fsysname lc_sep "path
            lv_free INTO ls_prefinal. "free space
            PERFORM end_null_check CHANGING ls_prefinal.
            ls_output = ls_prefinal.
            APPEND ls_output TO ft_output.
            CLEAR ls_output.
          ELSE.
            ls_output = lc_narcstatus."
            APPEND ls_output TO ft_output.
            CLEAR ls_output.
          ENDIF.
          " To get overview of backup logs
          APPEND ls_output TO ft_output.
          ls_output = lc_subhead2." Heading of redo log backup
          APPEND ls_output TO ft_output.
          CLEAR ls_output.

          SELECT * FROM sdbah
          INTO TABLE lt_sdbah
          WHERE funct = lc_funct.
          IF sy-subrc EQ 0.

            SORT lt_sdbah BY ende DESCENDING.
*             Select from dbafid table for action description
            SELECT SINGLE * FROM dbafid
            INTO ls_dbafid
            WHERE func_id = lc_funct.

*       Heading of redo backup log
            CONCATENATE  lc_function  lc_sep
            lc_opstart   lc_sep
            lc_opend     lc_sep
            lc_actionid  lc_sep
            lc_fid       lc_sep
            lc_rc        lc_sep
            lc_databaseop INTO ls_output.
            APPEND ls_output TO ft_output.
            CLEAR ls_output.
*        Data of redo log backup
            READ TABLE lt_sdbah INTO ls_sdbah INDEX 1.
            CONCATENATE  lv_function     lc_sep
            ls_sdbah-beg    lc_sep
            ls_sdbah-ende   lc_sep
            ls_sdbah-actid  lc_sep
            ls_sdbah-funct  lc_sep
            ls_sdbah-rc     lc_sep
            ls_dbafid-func_desc INTO ls_prefinal.
            PERFORM end_null_check CHANGING ls_prefinal.
            ls_output = ls_prefinal.
            APPEND ls_output TO ft_output.
            CLEAR:ls_output, ls_prefinal.
          ELSE.
            ls_output = lc_nredomsg." No redo log
            APPEND ls_output TO ft_output.
            CLEAR ls_output.
          ENDIF.
          APPEND ls_output TO ft_output.
          ls_output = lc_subhead3. " Main heading of redo log
          APPEND ls_output TO ft_output.
          CLEAR ls_output.

          SELECT * FROM sdbah INTO TABLE lt_backup
          WHERE funct IN
          ('ant','aft','and','afd','anp',
          'afp', 'anf','aff','anv','afv',
          'pnt','pft','pnd','pfd','pnp',
          'pfp', 'pnf','pff','pnv','pfv', 'fnd')
          AND rc IN ('0000' , '0001')
          ORDER BY ende DESCENDING.

          IF sy-subrc <> 0.
            ls_output = lc_msgbackup. " No successful backup
            APPEND ls_output TO ft_output.
            CLEAR ls_output.
          ELSE.
*            Heading of last sucessful backup
            CONCATENATE  lc_date      lc_sep
            lc_time      lc_sep
            lc_actionid  lc_sep
            lc_fid       lc_sep
            lc_rc        INTO ls_output.
            APPEND ls_output TO ft_output.
            CLEAR: ls_output, ls_prefinal.
            READ TABLE lt_backup INTO ls_backup INDEX 1.
            lv_date = ls_backup-beg+0(8).
            lv_time = ls_backup-beg+8(6).
*          Data of last sucessful backup
            CONCATENATE  lv_date      lc_sep
            lv_time      lc_sep
            ls_backup-actid  lc_sep
            ls_backup-funct lc_sep
            ls_backup-rc  INTO ls_prefinal.
            PERFORM end_null_check CHANGING ls_prefinal.
            ls_output = ls_prefinal.
            APPEND ls_output TO ft_output.
            CLEAR ls_output.
          ENDIF.

        ENDIF.
      ELSE.
        RETURN.
      ENDIF.
      PERFORM null_check TABLES  ft_output.

* Begin of changes in V001
    WHEN OTHERS.
      " Incorrect input
      ls_output = lc_inc_input.
      APPEND ls_output TO ft_output.
      CLEAR ls_output.
* End of changes in V001

  ENDCASE.

ENDFORM.
FORM end_null_check  CHANGING ls_string TYPE string.

  DATA lv_last_char TYPE char1.

  lv_last_char = substring( val = ls_string
  off = strlen( ls_string ) - 1
  len = 1 ).
  IF lv_last_char = '|'.
    CONCATENATE ls_string 'NULL'
    INTO ls_string.
  ENDIF.

ENDFORM.
FORM null_check  TABLES   lt_table TYPE table.

  DO .
    REPLACE ALL OCCURRENCES OF SUBSTRING '||'
    IN TABLE lt_table WITH '|NULL|'.
    FIND '||' IN TABLE lt_table.
    IF sy-subrc <> 0.
      EXIT .
    ENDIF.
  ENDDO.

ENDFORM.