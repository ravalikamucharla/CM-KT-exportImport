*---------------------------------------------------------------------*
* Program Name        :  ZCM_SMLG_UPD_LOGON_GROUPS                    *
* Title               :  Restore Logon Groups                         *
* Purpose             :  This report is to restore Logon groups (SMLG)*
*                        during Cloud Migration                       *
*---------------------------------------------------------------------*
* Related Transaction OR Standard Program References                  *
* SMLG                                                                *
*---------------------------------------------------------------------*
* Tables              :   SELECT    UPDATE      INSERT      DELETE    *
* XXXXX               :     X                                         *
*---------------------------------------------------------------------*
* Program Change History                                              *
*---------------------------------------------------------------------*
*Date        Version   Author       TR#/Local     Description         *
*---------------------------------------------------------------------*
*11-24-2021  Initial  Ruchir Kamble  Local    To restore Logon groups *
*02-22-2023   V001    Ashwini K P    Local    Removed the logic of    *
*                                             adding default entry to *
*                                          logon grp assignment table *
*03-21-2023   V002    Ashwini K P    Local   Adding default values to *
*                                        Logon group assignment table *
*---------------------------------------------------------------------*

REPORT zcm_smlg_upd_logon_groups.

LOAD-OF-PROGRAM.

FORM get_config
              TABLES lt_input  STRUCTURE tab512
                     lt_output STRUCTURE tab512.

  CONSTANTS: lc_sep        TYPE c VALUE '|'        LENGTH 1,
             lc_insert     TYPE c VALUE 'I'        LENGTH 1,
             lc_update     TYPE c VALUE 'U'        LENGTH 1,
             lc_delete     TYPE c VALUE 'D'        LENGTH 1,
             lc_title      TYPE c VALUE
             'Restore Logon groups'                LENGTH 30,
             lc_insert_msg TYPE c VALUE
             'Number of entries created in SMLG: ' LENGTH 50,
             lc_update_msg TYPE c VALUE
             'Number of entries updated in SMLG: ' LENGTH 50,
             lc_delete_msg TYPE c VALUE
             'Number of entries deleted in SMLG: ' LENGTH 50,
             lc_err_msg    TYPE c VALUE
             'No entries to restore'               LENGTH 35,
             lc_fail_ins   TYPE c VALUE
             'Failed to create logon group'        LENGTH 35,
             lc_fail_upd   TYPE c VALUE
             'Failed to update logon group'        LENGTH 35,
             lc_fail_del   TYPE c VALUE
             'Failed to delete logon group'        LENGTH 35.

  DATA:ls_input          TYPE tab512,
       ls_output         TYPE tab512,
       lv_lines          TYPE i,
       lv_action         TYPE char1,
       ls_rzllimodif     TYPE rzllimodif,
       ls_rzllimodgp     TYPE rzllimodgp,
       lt_rzllimodif_ins TYPE TABLE OF rzllimodif,
       lt_rzllimodgp_ins TYPE TABLE OF rzllimodgp,
       lt_rzllimodif_upd TYPE TABLE OF rzllimodif,
       lt_rzllimodgp_upd TYPE TABLE OF rzllimodgp,
       lt_rzllimodif_del TYPE TABLE OF rzllimodif,
       lt_rzllimodgp_del TYPE TABLE OF rzllimodgp.

  " To remove NULL and N in the input
  PERFORM null_check TABLES lt_input.

  CLEAR lv_lines.
  DESCRIBE TABLE lt_input LINES lv_lines.

  " Adding title to the output
    ls_output = lc_title.
    APPEND ls_output TO lt_output.
    CLEAR ls_output.

  IF lv_lines < 2.

    " No logon groups to restore
    ls_output = lc_err_msg.
    APPEND ls_output TO lt_output.
    CLEAR ls_output.
    RETURN.
  ENDIF.

  " To delete heading
  DELETE lt_input INDEX 1.

  FREE: lt_rzllimodgp_del, lt_rzllimodgp_upd, lt_rzllimodgp_ins,
        lt_rzllimodif_del, lt_rzllimodif_upd, lt_rzllimodif_ins.

  LOOP AT lt_input INTO ls_input.

    CLEAR: ls_rzllimodif, ls_rzllimodgp, lv_action.

    SPLIT ls_input AT lc_sep INTO
          ls_rzllimodif-classname
          ls_rzllimodif-applserver
          ls_rzllimodif-resp_time
          ls_rzllimodif-users
          ls_rzllimodif-ipv6
          ls_rzllimodif-ipv6_address
          ls_rzllimodgp-classnum
          ls_rzllimodgp-classname
          ls_rzllimodgp-favtype
          lv_action.

    IF lv_action EQ lc_insert.                " If action is Insert

      ls_rzllimodif-modificatn = lv_action.

      APPEND ls_rzllimodif TO lt_rzllimodif_ins.
      CLEAR ls_rzllimodif.

* Begin of changes V001
      IF ls_rzllimodgp-favtype IS NOT INITIAL.
* End of changes V001
* Begin of changes V002
        ls_rzllimodgp-timererd = '120'.
        ls_rzllimodgp-logrerd  = '200'.
* End of changes V002
        ls_rzllimodgp-modificatn = lv_action.

        APPEND ls_rzllimodgp TO lt_rzllimodgp_ins.
        CLEAR ls_rzllimodgp.
      ENDIF.  " +V001

    ELSEIF lv_action EQ lc_update.            " If action is Update

      ls_rzllimodif-modificatn = lv_action.

      APPEND ls_rzllimodif TO lt_rzllimodif_upd.
      CLEAR ls_rzllimodif.

* Begin of changes V001
      IF ls_rzllimodgp-favtype IS NOT INITIAL.
* End of changes V001
* Begin of changes V002
        ls_rzllimodgp-timererd = '120'.
        ls_rzllimodgp-logrerd  = '200'.
* End of changes V002
        ls_rzllimodgp-modificatn = lv_action.

        APPEND ls_rzllimodgp TO lt_rzllimodgp_upd.
        CLEAR ls_rzllimodgp.
      ENDIF.   " +V001


    ELSEIF lv_action EQ lc_delete.            " If action is Delete

      ls_rzllimodif-modificatn = lv_action.

      APPEND ls_rzllimodif TO lt_rzllimodif_del.
      CLEAR ls_rzllimodif.

* Begin of changes V001
      IF ls_rzllimodgp-favtype IS NOT INITIAL.
* End of changes V001
* Begin of changes V002
        ls_rzllimodgp-timererd = '120'.
        ls_rzllimodgp-logrerd  = '200'.
* End of changes V002
        ls_rzllimodgp-modificatn = lv_action.

        APPEND ls_rzllimodgp TO lt_rzllimodgp_del.
        CLEAR ls_rzllimodgp.
      ENDIF.  " +V001

    ENDIF.

  ENDLOOP.

  " Sorting and deleting duplicate values
  SORT lt_rzllimodif_ins BY classname applserver.
  DELETE ADJACENT DUPLICATES FROM lt_rzllimodif_ins
  COMPARING classname applserver.

  SORT lt_rzllimodif_upd BY classname applserver.
  DELETE ADJACENT DUPLICATES FROM lt_rzllimodif_upd
  COMPARING classname applserver.

  SORT lt_rzllimodif_del BY classname applserver.
  DELETE ADJACENT DUPLICATES FROM lt_rzllimodif_del
  COMPARING classname applserver.

  SORT lt_rzllimodgp_ins BY classname.
  DELETE ADJACENT DUPLICATES FROM lt_rzllimodgp_ins
  COMPARING classname.

  SORT lt_rzllimodgp_upd BY classname.
  DELETE ADJACENT DUPLICATES FROM lt_rzllimodgp_upd
  COMPARING classname.

  SORT lt_rzllimodgp_del BY classname.
  DELETE ADJACENT DUPLICATES FROM lt_rzllimodgp_del
  COMPARING classname.

*******************Delete Logon Group********************

  " FM to delete logon group
  CALL FUNCTION 'SMLG_MODIFY'
    EXPORTING
      set_lock           = space
      grouptype          = space
    TABLES
      modifications      = lt_rzllimodif_del
      erfc_modifications = lt_rzllimodgp_del
    EXCEPTIONS
      deletion_failed    = 2.

  IF sy-subrc EQ 0.
    CLEAR lv_lines.
    DESCRIBE TABLE lt_rzllimodif_del LINES lv_lines.

    ls_output-wa = |{ lc_delete_msg } { lv_lines } |.
    APPEND ls_output TO lt_output.
    CLEAR: ls_output.

  ELSE.
    ls_output-wa = |{ lc_fail_del }|.
    APPEND ls_output TO lt_output.
    CLEAR ls_output.
  ENDIF.

*******************Insert Logon Group********************

  " FM to insert logon group
  CALL FUNCTION 'SMLG_MODIFY'
    EXPORTING
      set_lock           = space
      grouptype          = space
    TABLES
      modifications      = lt_rzllimodif_ins
      erfc_modifications = lt_rzllimodgp_ins
    EXCEPTIONS
      insertion_failed   = 4.

  IF sy-subrc EQ 0.
    CLEAR lv_lines.
    DESCRIBE TABLE lt_rzllimodif_ins LINES lv_lines.

    ls_output-wa = |{ lc_insert_msg } { lv_lines } |.
    APPEND ls_output TO lt_output.
    CLEAR: ls_output.

  ELSE.
    ls_output-wa = |{ lc_fail_ins }|.
    APPEND ls_output TO lt_output.
    CLEAR ls_output.

  ENDIF.

*******************Update Logon Group********************

  " FM to update logon group
  CALL FUNCTION 'SMLG_MODIFY'
    EXPORTING
      set_lock           = space
      grouptype          = space
    TABLES
      modifications      = lt_rzllimodif_upd
      erfc_modifications = lt_rzllimodgp_upd
    EXCEPTIONS
      update_failed      = 3.

  IF sy-subrc EQ 0.
    CLEAR lv_lines.
    DESCRIBE TABLE lt_rzllimodif_upd LINES lv_lines.

    ls_output-wa = |{ lc_update_msg } { lv_lines } |.
    APPEND ls_output TO lt_output.
    CLEAR: ls_output.

  ELSE.

    ls_output-wa = |{ lc_fail_upd }|.
    APPEND ls_output TO lt_output.
    CLEAR ls_output.
  ENDIF.

ENDFORM.

FORM null_check TABLES lt_table TYPE table.

  DO.
    REPLACE ALL OCCURRENCES OF SUBSTRING '|N|'
    IN TABLE lt_table WITH '| |'.
    FIND '|N|' IN TABLE lt_table.
    IF sy-subrc <> 0.
      EXIT .
    ENDIF.
  ENDDO.

  DO.
    REPLACE ALL OCCURRENCES OF SUBSTRING '|NULL|'
    IN TABLE lt_table WITH '| |'.
    FIND '|NULL|' IN TABLE lt_table.
    IF sy-subrc <> 0.
      EXIT .
    ENDIF.
  ENDDO.

ENDFORM.