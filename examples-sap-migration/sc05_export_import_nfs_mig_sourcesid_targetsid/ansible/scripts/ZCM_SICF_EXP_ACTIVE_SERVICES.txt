*---------------------------------------------------------------------*
* Program Name        :   ZCM_SICF_EXP_ACTIVE_SERVICES                *
* Title               :   Active Services in SICF                     *
* Purpose             :   This report is used to export Active        *
*                         Services in SICF during Cloud Migration     *
*---------------------------------------------------------------------*
* Related Transaction OR Standard Program References                  *
* SICF                                                                *
*---------------------------------------------------------------------*
* Tables              :   SELECT    UPDATE      INSERT      DELETE    *
* ICFVIRHOST                X                                         *
* ICFSERVICE                X                                         *
* ICFSERVLOC                X                                         *
* ICFDOCU                   X                                         *
*---------------------------------------------------------------------*
* Program Change History                                              *
*---------------------------------------------------------------------*
*Date        Version   Author       TR#/Local     Description         *
*---------------------------------------------------------------------*
*06-21-2021  Initial  Ruchir/Yasaswini   Local  To export Active      *
*                                               Services in SICF      *
*07-25-2022   V001    Soumya Ray     Local    To pass message "No data*
*                                             found" in case of no    *
*                                             data found in sytem     *
*---------------------------------------------------------------------*

" Nested loops cannot be avoided as
" the active services are to be listed in tree structure in parent
" node hierarchy

REPORT zcm_sicf_exp_active_services.

LOAD-OF-PROGRAM.

FORM get_config
              TABLES lt_input  STRUCTURE tab512
                     lt_output STRUCTURE tab512.

  TYPES: BEGIN OF lty_icf,
           icf_name   TYPE icfname,
           icfparguid TYPE icfparguid,
           icfnodguid TYPE icfnodguid,
           icf_redir  TYPE icfchar255,
         END OF lty_icf.

  CONSTANTS:
    lc_sep           TYPE c VALUE '|'                        LENGTH 1,
    lc_x             TYPE c VALUE 'X'                        LENGTH 1,
    lc_null          TYPE c VALUE 'NULL'                     LENGTH 4,
    lc_export        TYPE c VALUE 'EXPORT'                   LENGTH 6,
    lc_title         TYPE c VALUE 'SICF Services'            LENGTH 13,
    lc_vir_host      TYPE c VALUE 'Virtual Hosts / Services' LENGTH 25,
    lc_documentation TYPE c VALUE 'Documentation'            LENGTH 13,
    lc_ref_service   TYPE c VALUE 'Reference Service'        LENGTH 17,
    lc_inc_input     TYPE c VALUE 'Incorrect input'          LENGTH 20,
    lc_noinput       TYPE c VALUE 'No input given'           LENGTH 20,
*   Begin of changes in V001
    lc_noentry       TYPE c VALUE 'No data found'            LENGTH 20.
*   End of changes in V001

  DATA: ls_output     TYPE tab512,
        ls_input      TYPE tab512,
        lv_action     TYPE char6,
        lt_icfvirhost TYPE STANDARD TABLE OF icfvirhost,
        lt_icfservice TYPE STANDARD TABLE OF icfservice,
        ls_icfservice TYPE icfservice,
        lt_icfdocu    TYPE STANDARD TABLE OF icfdocu,
        ls_icfdocu    TYPE icfdocu,
        lt_icfservloc TYPE STANDARD TABLE OF icfservloc,
        ls_icfservloc TYPE icfservloc,
        lt_icfdata    TYPE STANDARD TABLE OF lty_icf,
        ls_icfdata    TYPE lty_icf,
        lt_icfmain    TYPE STANDARD TABLE OF lty_icf,
        lt_icfdata1   TYPE STANDARD TABLE OF lty_icf,
        ls_icfdata1   TYPE lty_icf,
        lt_icfdata2   TYPE STANDARD TABLE OF lty_icf,
        ls_icfdata2   TYPE lty_icf,
        lt_icfdata3   TYPE STANDARD TABLE OF lty_icf,
        ls_icfdata3   TYPE lty_icf,
        lt_icfdata4   TYPE STANDARD TABLE OF lty_icf,
        ls_icfdata4   TYPE lty_icf.

  " Clearing variables before use
  CLEAR: ls_output, ls_input, lv_action, ls_icfservice, ls_icfdocu,
         ls_icfdata, ls_icfdata1, ls_icfdata2, ls_icfdata3,
         ls_icfdata4, ls_icfservloc.

  FREE: lt_icfvirhost, lt_icfservice, lt_icfdocu, lt_icfdata,
        lt_icfdata1, lt_icfdata2, lt_icfdata3, lt_icfdata4,
        lt_icfservloc.

  " Adding title to the output
  ls_output = lc_title.
  APPEND ls_output TO lt_output.
  CLEAR ls_output.

  READ TABLE lt_input INTO ls_input INDEX 1.
  IF sy-subrc EQ 0.
    lv_action = ls_input.              " Action
  ELSE.
    " No input given
    ls_output = lc_noinput.
    APPEND ls_output TO lt_output.
    CLEAR ls_output.
    RETURN.
  ENDIF.

  CASE lv_action.

    WHEN lc_export.               " When action is EXPORT

      " To get virtual hosts
      SELECT * FROM icfvirhost
               INTO TABLE lt_icfvirhost.

      IF lt_icfvirhost IS INITIAL.

        " No data found
        ls_output = lc_noentry.
        APPEND ls_output TO lt_output.
        CLEAR ls_output.
        RETURN.

      ENDIF.

      " To get all services
      SELECT * FROM icfservice
               INTO TABLE lt_icfservice
               FOR ALL ENTRIES IN lt_icfvirhost
               WHERE icfparguid = lt_icfvirhost-icfparguid.

      IF lt_icfservice IS INITIAL.

        " No data found
        ls_output = lc_noentry.
        APPEND ls_output TO lt_output.
        CLEAR ls_output.
        RETURN.

      ENDIF.

      "To get server details
      SELECT icf_name icfparguid icfnodguid icf_redir
               FROM icfservice
               INTO TABLE lt_icfmain.

      SORT lt_icfmain BY icfparguid.

      " To get active services
      SELECT * FROM icfservloc
               INTO TABLE lt_icfservloc
               WHERE icfactive = lc_x.

      " To get documentation of services
      SELECT * FROM icfdocu
               INTO TABLE lt_icfdocu
               WHERE icf_langu = sy-langu.

      " Adding headings to the output
      CONCATENATE lc_vir_host
                  lc_documentation
                  lc_ref_service
                  INTO ls_output SEPARATED BY lc_sep.
      APPEND ls_output TO lt_output.
      CLEAR ls_output.

      " Sorting services by service name in Ascending order
      SORT lt_icfservice BY icf_name ASCENDING.

      LOOP AT lt_icfservice INTO ls_icfservice.

        " To read active services
        READ TABLE lt_icfservloc INTO ls_icfservloc
                   WITH KEY icfparguid = ls_icfservice-icfparguid
                            icf_name = ls_icfservice-icf_name.

        IF sy-subrc EQ 0.

          " To read documentation
          READ TABLE lt_icfdocu INTO ls_icfdocu
                     WITH KEY icfparguid = ls_icfservice-icfparguid
                              icf_name = ls_icfservice-icf_name.

          IF sy-subrc EQ 0.

            IF ls_icfservice-icf_redir IS INITIAL.
              ls_icfservice-icf_redir = lc_null.
            ENDIF.

            CONCATENATE ls_icfservice-icf_name
                        ls_icfdocu-icf_docu
                        ls_icfservice-icf_redir
                        INTO ls_output SEPARATED BY lc_sep.
            APPEND ls_output TO lt_output.
            CLEAR: ls_icfdocu, ls_output.

          ENDIF.

        ENDIF.

**********************************************************************
        " To get node service

        FREE: lt_icfdata[].
        lt_icfdata[] = lt_icfmain[].

        DELETE lt_icfdata WHERE icfparguid NE ls_icfservice-icfnodguid.

        IF lt_icfdata IS NOT INITIAL.

          " Sorting services by service name in Ascending order
          SORT lt_icfdata BY icf_name ASCENDING.

          LOOP AT lt_icfdata INTO ls_icfdata.

            " To read active services
            READ TABLE lt_icfservloc INTO ls_icfservloc
                       WITH KEY icfparguid = ls_icfdata-icfparguid
                                icf_name = ls_icfdata-icf_name.

            IF sy-subrc EQ 0.

              " To read documentation
              READ TABLE lt_icfdocu INTO ls_icfdocu
                         WITH KEY icfparguid = ls_icfdata-icfparguid
                         icf_name = ls_icfdata-icf_name.

              IF sy-subrc EQ 0.

                IF ls_icfdata-icf_redir IS INITIAL.
                  ls_icfdata-icf_redir = lc_null.
                ENDIF.

                CONDENSE ls_icfdocu-icf_docu.

                CONCATENATE ls_icfdata-icf_name
                            ls_icfdocu-icf_docu
                            ls_icfdata-icf_redir
                            INTO ls_output SEPARATED BY lc_sep.
                APPEND ls_output TO lt_output.
                CLEAR: ls_output.

              ENDIF.

            ENDIF.

**********************************************************************
            " To get node service

            FREE: lt_icfdata1[].
            lt_icfdata1[] = lt_icfmain[].

            DELETE lt_icfdata1 WHERE
            icfparguid NE ls_icfdata-icfnodguid.

            IF lt_icfdata1 IS NOT INITIAL.

              " Sorting services by service name in Ascending order
              SORT lt_icfdata1 BY icf_name ASCENDING.

              LOOP AT lt_icfdata1 INTO ls_icfdata1.

                " To read active services
                READ TABLE lt_icfservloc INTO ls_icfservloc
                           WITH KEY icfparguid = ls_icfdata1-icfparguid
                                    icf_name = ls_icfdata1-icf_name.

                IF sy-subrc EQ 0.

                  " To read documentation
                  READ TABLE lt_icfdocu INTO ls_icfdocu
                  WITH KEY icfparguid = ls_icfdata1-icfparguid
                           icf_name = ls_icfdata1-icf_name.

                  IF sy-subrc EQ 0.

                    IF ls_icfdata1-icf_redir IS INITIAL.
                      ls_icfdata1-icf_redir = lc_null.
                    ENDIF.

                    CONDENSE ls_icfdocu-icf_docu.

                    CONCATENATE ls_icfdata1-icf_name
                                ls_icfdocu-icf_docu
                                ls_icfdata1-icf_redir
                                INTO ls_output SEPARATED BY lc_sep.
                    APPEND ls_output TO lt_output.
                    CLEAR: ls_output.

                  ENDIF.

                ENDIF.

**********************************************************************
                " To get node service

                FREE: lt_icfdata2[].
                lt_icfdata2[] = lt_icfmain[].

                DELETE lt_icfdata2 WHERE
                icfparguid NE ls_icfdata1-icfnodguid.

                IF lt_icfdata2 IS NOT INITIAL.

                  " Sorting services by service name in Ascending order
                  SORT lt_icfdata2 BY icf_name ASCENDING.

                  LOOP AT lt_icfdata2 INTO ls_icfdata2.

                    " To read active services
                    READ TABLE lt_icfservloc INTO ls_icfservloc
                    WITH KEY icfparguid = ls_icfdata2-icfparguid
                             icf_name = ls_icfdata2-icf_name.

                    IF sy-subrc EQ 0.

                      " To read documentation
                      READ TABLE lt_icfdocu INTO ls_icfdocu
                       WITH KEY icfparguid = ls_icfdata2-icfparguid
                                icf_name = ls_icfdata2-icf_name.

                      IF sy-subrc EQ 0.

                        IF ls_icfdata2-icf_redir IS INITIAL.
                          ls_icfdata2-icf_redir = lc_null.
                        ENDIF.

                        CONDENSE ls_icfdocu-icf_docu.

                        CONCATENATE ls_icfdata2-icf_name
                                    ls_icfdocu-icf_docu
                                    ls_icfdata2-icf_redir
                                    INTO ls_output SEPARATED BY lc_sep.
                        APPEND ls_output TO lt_output.
                        CLEAR: ls_output.

                      ENDIF.

                    ENDIF.

**********************************************************************
                    " To get node service

                    FREE: lt_icfdata3[].
                    lt_icfdata3[] = lt_icfmain[].

                    DELETE lt_icfdata3 WHERE
                    icfparguid NE ls_icfdata2-icfnodguid.

                    IF lt_icfdata3 IS NOT INITIAL.

             " Sorting services by service name in Ascending order
                      SORT lt_icfdata3 BY icf_name ASCENDING.

                      LOOP AT lt_icfdata3 INTO ls_icfdata3.

                        " To read active services
                        READ TABLE lt_icfservloc INTO ls_icfservloc
                        WITH KEY icfparguid = ls_icfdata3-icfparguid
                                 icf_name = ls_icfdata3-icf_name.

                        IF sy-subrc EQ 0.

                          " To read documentation
                          READ TABLE lt_icfdocu INTO ls_icfdocu
                          WITH KEY icfparguid = ls_icfdata3-icfparguid
                                   icf_name = ls_icfdata3-icf_name.

                          IF sy-subrc EQ 0.

                            IF ls_icfdata3-icf_redir IS INITIAL.
                              ls_icfdata3-icf_redir = lc_null.
                            ENDIF.

                            CONDENSE ls_icfdocu-icf_docu.

                            CONCATENATE ls_icfdata3-icf_name
                                        ls_icfdocu-icf_docu
                                        ls_icfdata3-icf_redir
                                        INTO ls_output
                                        SEPARATED BY lc_sep.
                            APPEND ls_output TO lt_output.
                            CLEAR: ls_output.

                          ENDIF.

                        ENDIF.

**********************************************************************
                        " To get node service

                        FREE: lt_icfdata4[].
                        lt_icfdata4[] = lt_icfmain[].

                        DELETE lt_icfdata4 WHERE
                        icfparguid NE ls_icfdata3-icfnodguid.

                        IF lt_icfdata4 IS NOT INITIAL.

               " Sorting services by service name in Ascending order
                          SORT lt_icfdata4 BY icf_name ASCENDING.

                          LOOP AT lt_icfdata4 INTO ls_icfdata4.

                            " To read active services
                            READ TABLE lt_icfservloc INTO ls_icfservloc
                            WITH KEY icfparguid = ls_icfdata4-icfparguid
                                     icf_name = ls_icfdata4-icf_name.

                            IF sy-subrc EQ 0.

                              " To read documentation
                              READ TABLE lt_icfdocu INTO ls_icfdocu
                              WITH KEY
                              icfparguid = ls_icfdata4-icfparguid
                              icf_name = ls_icfdata4-icf_name.

                              IF sy-subrc EQ 0.

                                IF ls_icfdata4-icf_redir IS INITIAL.
                                  ls_icfdata4-icf_redir = lc_null.
                                ENDIF.

                                CONDENSE ls_icfdocu-icf_docu.

                                CONCATENATE ls_icfdata4-icf_name
                                            ls_icfdocu-icf_docu
                                            ls_icfdata4-icf_redir
                                            INTO ls_output
                                            SEPARATED BY lc_sep.
                                APPEND ls_output TO lt_output.
                                CLEAR: ls_output.

                              ENDIF.

                            ENDIF.

                          ENDLOOP.

                        ENDIF.

                      ENDLOOP.

                    ENDIF.

                  ENDLOOP.

                ENDIF.

              ENDLOOP.

            ENDIF.

          ENDLOOP.

        ENDIF.

      ENDLOOP.

    WHEN OTHERS.
      " Incorrect input
      ls_output = lc_inc_input.
      APPEND ls_output TO lt_output.
      CLEAR ls_output.

  ENDCASE.

  FREE: lt_icfvirhost, lt_icfservice, lt_icfdocu, lt_icfdata,
        lt_icfdata1, lt_icfdata2, lt_icfdata3, lt_icfdata4,
        lt_icfservloc.

ENDFORM.