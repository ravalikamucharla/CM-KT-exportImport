*---------------------------------------------------------------------*
* Program Name        :   ZCM_SCOT_EXP_SMTP_NODES_HVER                *
* Title               :   Capture SMTP Nodes in SCOT                  *
* Purpose             :   This report is for capturing SMTP nodes in  *
*                         SCOT data during Cloud Migration            *
*---------------------------------------------------------------------*
* Related Transaction OR Standard Program References                  *
* SCOT                                                                *
*---------------------------------------------------------------------*
*	Tables              :   SELECT    UPDATE      INSERT      DELETE    *
* SXNODES                   X                                         *
* SXSERV                    X                                         *
* SXROUTE                   X                                         *
*---------------------------------------------------------------------*
* Program Change History                                              *
*---------------------------------------------------------------------*
*Date        Version   Author       TR#/Local     Description         *
*---------------------------------------------------------------------*
*09-11-2020  Initial  Ruchir Kamble  Local    To capture SMTP nodes   *
*07-05-2021   V001    Ruchir Kamble  Local    To capture settings &   *
*                                             HTTP Nodes              *
*07-25-2022   V002     Soumya Ray     Local   To pass message "No data*
*                                             found" in case of no    *
*                                             data found in sytem     *
*---------------------------------------------------------------------*

REPORT zcm_scot_exp_smtp_nodes_hver.

LOAD-OF-PROGRAM.

FORM get_config
              TABLES lt_input  STRUCTURE tab512
                     lt_output STRUCTURE tab512.

*   Begin of changes in V001

  TYPES: BEGIN OF lty_nodes,
           node      TYPE char6,
           descrip   TYPE char50,
           active    TYPE char1,
           retry_min TYPE char3,
           rfcdest   TYPE char32,
           node_type TYPE char1,
           mail_host TYPE char100,
           mail_port TYPE char32,
         END OF lty_nodes,

         BEGIN OF lty_smtp,
           node      TYPE char6,
           descrip   TYPE char50,
           active    TYPE char1,
           retry_min TYPE char3,
           node_type TYPE char1,
           mail_host TYPE char100,
           mail_port TYPE char32,
         END OF lty_smtp,

         BEGIN OF lty_http,
           node      TYPE char6,
           descrip   TYPE char50,
           rfcdest   TYPE char32,
           node_type TYPE char1,
         END OF lty_http,

         BEGIN OF lty_sxserv,
           node      TYPE char6,
           addr_type TYPE char3,
           convert_s TYPE char3,
           convert_l TYPE char3,
           convert_o TYPE char3,
           convert_t TYPE char3,
         END OF lty_sxserv,

         BEGIN OF lty_sxroute,
           mandt      TYPE char3,
           snd_system TYPE char8,
           snd_client TYPE char3,
           snd_group  TYPE char18,
           rec_type   TYPE char3,
           rec_addr   TYPE char80,
           generic    TYPE char1,
           length     TYPE int1,
           node       TYPE char6,
         END OF lty_sxroute.

*   End of changes in V001

  CONSTANTS:
    lc_sep        TYPE c VALUE '|'                           LENGTH 1,
    lc_x          TYPE c VALUE 'X'                           LENGTH 1,
    lc_e          TYPE c VALUE 'E'                           LENGTH 1,
    lc_smtp       TYPE c VALUE 'S'                           LENGTH 1,
    lc_http       TYPE c VALUE 'H'                           LENGTH 1,
    lc_null       TYPE c VALUE 'NULL'                        LENGTH 4,
    lc_export     TYPE c VALUE 'EXPORT'                      LENGTH 6,
    lc_node       TYPE c VALUE 'Node Name'                   LENGTH 9,
    lc_descrip    TYPE c VALUE 'Comment'                     LENGTH 8,
    lc_active     TYPE c VALUE 'Node Is Ready For Use'       LENGTH 25,
    lc_retry_min  TYPE c VALUE 'Maximum Repetition Time '    LENGTH 60,
    lc_mail_host  TYPE c VALUE 'Host Name of Mail MTA'       LENGTH 40,
    lc_mail_port  TYPE c VALUE 'Port Number of Mail MTA'     LENGTH 40,
    lc_addr_type  TYPE c VALUE 'Address Type'                LENGTH 12,
    lc_convert_s  TYPE c VALUE 'Format S'                    LENGTH 10,
    lc_convert_l  TYPE c VALUE 'Format L'                    LENGTH 10,
    lc_convert_o  TYPE c VALUE 'Format O'                    LENGTH 10,
    lc_convert_t  TYPE c VALUE 'Format T'                    LENGTH 10,
    lc_mandt      TYPE c VALUE 'MANDT'                       LENGTH 5,
    lc_snd_system TYPE c VALUE 'Name Of SAP System'          LENGTH 20,
    lc_snd_client TYPE c VALUE 'Client Part Of SAP System'   LENGTH 32,
    lc_snd_group  TYPE c VALUE 'Sender Group'                LENGTH 12,
    lc_rec_type   TYPE c VALUE 'Address Type'                LENGTH 12,
    lc_rec_addr   TYPE c VALUE 'Address Area Routing'        LENGTH 20,
    lc_generic    TYPE c VALUE 'Generic'                     LENGTH 10,
    lc_length     TYPE c VALUE
    'Address Length In Routing Table'                        LENGTH 60,
    lc_sxnodes    TYPE c VALUE 'Communication Nodes'         LENGTH 30,
    lc_sxserv     TYPE c VALUE 'Node Capabilities'           LENGTH 20,
    lc_sxroute    TYPE c VALUE 'Routing Details'             LENGTH 15,
    lc_title      TYPE c VALUE 'SMTP Nodes'                  LENGTH 10,
*   Begin of changes in V001
    lc_inc_input  TYPE c VALUE 'Incorrect input'             LENGTH 20,
    lc_noinput    TYPE c VALUE 'No input given'              LENGTH 20,
    lc_inb_msg    TYPE c VALUE 'Inbound Message'             LENGTH 15,
    lc_force_ver  TYPE c VALUE
    'Prefer Following Version of an Inbound E-Mail'          LENGTH 60,
    lc_force_dsn  TYPE c VALUE 'Send Notificaition'          LENGTH 18,
    lc_no_mdn     TYPE c VALUE
    'Do not send read confirmations generally'               LENGTH 50,
    lc_sendstatus TYPE c VALUE
    'Send Status Notifications Immediately'                  LENGTH 50,
    lc_inb_status TYPE c VALUE 'Inbound Status'              LENGTH 15,
    lc_notify     TYPE c VALUE 'Notify Sender by E-Mail'     LENGTH 23,
    lc_statuscode TYPE c VALUE
    'Include status code of mail server in notification'     LENGTH 70,
    lc_entirestat TYPE c VALUE
    'Include entire status notification in notification attachment'
                                                             LENGTH 70,
    lc_sendall    TYPE c VALUE
    'Send all notifications to the following user'           LENGTH 50,
    lc_anlys      TYPE c VALUE 'Anlys'                       LENGTH 5,
    lc_inbound    TYPE c VALUE 'Inbound'                     LENGTH 7,
    lc_deactivate TYPE c VALUE 'Deactivated'                 LENGTH 12,
    lc_alwayssave TYPE c VALUE 'Always Save'                 LENGTH 11,
    lc_header     TYPE c VALUE 'MIME Message Header'         LENGTH 19,
    lc_neversave  TYPE c VALUE 'Never Save'                  LENGTH 10,
    lc_desc       TYPE c VALUE 'Description'                 LENGTH 11,
    lc_dest       TYPE c VALUE 'Destination'                 LENGTH 11,
    lc_httpnodes  TYPE c VALUE 'HTTP Nodes'                  LENGTH 10,
    lc_add_area   TYPE c VALUE 'Address Area'                LENGTH 13,
    lc_inf_sender TYPE c VALUE 'Inform Sender'               LENGTH 13,
    lc_inter_para TYPE c VALUE 'Interpret Query Parameters'  LENGTH 26,
    lc_comm_id    TYPE c VALUE 'Comm ID'                     LENGTH 7,
    lc_externalid TYPE c VALUE 'External ID'                 LENGTH 11,
    lc_recipient  TYPE c VALUE 'Recipient Address'           LENGTH 17,
    lc_stat_txt   TYPE c VALUE 'Status Text'                 LENGTH 11,
    lc_inter_stat TYPE c VALUE 'Interpret Status'            LENGTH 16,
    lc_txtpattern TYPE c VALUE 'Text Pattern in Status'      LENGTH 25,
    lc_int_as_err TYPE c VALUE 'Interpret as Error'          LENGTH 18,
    lc_int_as_suc TYPE c VALUE 'Interpret as Success'        LENGTH 24,
    lc_httpreturn TYPE c VALUE
    'Return Following HTTP Response'                         LENGTH 30,
    lc_http_suc   TYPE c VALUE 'HTTP Response if Success'    LENGTH 25,
    lc_http_err   TYPE c VALUE 'HTTP Response if Error'      LENGTH 22,
    lc_settings   TYPE c VALUE
 'The following settings override the default and application settings'
                                                             LENGTH 80,
    lc_bcsforce   TYPE dd07l-domname VALUE 'BCS_FORCEVERSION',
    lc_forcedsn   TYPE dd07l-domname VALUE 'BCS_FORCE_DSN',
    lc_bcsstml    TYPE dd07l-domname VALUE 'BCS_STML',
    lc_state      TYPE dd07l-domname VALUE 'SXTRCSTATE',
    lc_text       TYPE ddrefstruc-bool VALUE 'X',
    lc_lang       TYPE dd07t-ddlanguage VALUE 'E',
*   End of changes in V001
*   Begin of changes in V002
    lc_no_data    TYPE c VALUE 'No data found'                LENGTH 20.
*   End of changes in V002

  DATA : ls_input         TYPE tab512,
         ls_output        TYPE tab512,
         lv_action        TYPE char20,
         lv_length        TYPE char3,
*   Begin of changes in V001
         lt_nodes         TYPE STANDARD TABLE OF lty_nodes,
         lt_smtp          TYPE STANDARD TABLE OF lty_smtp,
         ls_smtp          TYPE lty_smtp,
         lt_sxserv        TYPE TABLE OF lty_sxserv,
         ls_sxserv        TYPE lty_sxserv,
         lt_sxroute       TYPE TABLE OF lty_sxroute,
         ls_sxroute       TYPE lty_sxroute,
         ls_para_in       TYPE bcss_para_in,
         ls_status        TYPE bcss_para_status,
         lt_stml          TYPE TABLE OF bcsd_stml,
         ls_stml          TYPE bcsd_stml,
         lt_http          TYPE TABLE OF lty_http,
         ls_http          TYPE lty_http,
         lv_force_version TYPE string,
         lv_force_dsn     TYPE string,
         lv_sender        TYPE string,
         lv_trace_in      TYPE string,
         lv_cnt_stml      TYPE i,
         lt_values        TYPE TABLE OF dd07v,
         ls_values        TYPE dd07v,
         lv_stat_result   TYPE c,
         ls_template      TYPE cl_bcs_http_in_config=>gs_query_template,
         lv_stat_pattern  TYPE bcs_http_status_pattern,
         lv_stat_err      TYPE bcs_http_status_error,
         lv_stat_succ     TYPE bcs_http_status_success,
         lv_response_ok   TYPE bcs_http_response_success,
         lv_response_nok  TYPE bcs_http_response_error.

  " Clear variables before use
  CLEAR: ls_output, ls_input, lv_action, lv_length, lv_force_dsn,
         lv_force_version, ls_sxroute, ls_sxserv, ls_stml,
         ls_para_in, ls_status, ls_http, lv_sender, lv_trace_in,
         lv_cnt_stml, ls_smtp, ls_values, lv_stat_result, ls_template,
         lv_stat_pattern, lv_stat_err, lv_stat_succ, lv_response_ok,
         lv_response_nok.

  FREE: lt_output, lt_nodes, ls_sxserv, lt_sxroute, lt_stml, lt_http,
        lt_smtp, lt_values.

  " Adding title to the output
  ls_output = lc_title.
  APPEND ls_output TO lt_output.
  CLEAR ls_output.

  READ TABLE lt_input INTO ls_input INDEX 1.
  IF sy-subrc EQ 0.
    lv_action = ls_input.              " Action
  ELSE.
    " No input given
    ls_output = lc_noinput.
    APPEND ls_output TO lt_output.
    CLEAR ls_output.
    RETURN.
  ENDIF.
*   End of changes in V001

  CASE lv_action.

    WHEN lc_export.               " When action is EXPORT

*   Begin of changes in V001

      " To get smtp and http nodes
      SELECT node descrip active retry_min rfcdest node_type
             mail_host mail_port
             FROM sxnodes
             INTO TABLE lt_nodes.

      MOVE-CORRESPONDING lt_nodes TO lt_smtp.

      IF lt_smtp IS NOT INITIAL.
        " Adding table name
        ls_output = lc_sxnodes.
        APPEND ls_output TO lt_output.
        CLEAR ls_output.

        " Adding headings to the output for sxnodes
        CONCATENATE lc_node         lc_sep
                    lc_descrip      lc_sep
                    lc_active       lc_sep
                    lc_retry_min    lc_sep
                    lc_mail_host    lc_sep
                    lc_mail_port
                    INTO ls_output.
        APPEND ls_output TO lt_output.
        CLEAR ls_output.

        LOOP AT lt_smtp INTO ls_smtp WHERE node_type = lc_smtp.

          IF ls_smtp-mail_port IS INITIAL.
            ls_smtp-mail_port = lc_null.
          ENDIF.

          CONCATENATE ls_smtp-node       lc_sep
                      ls_smtp-descrip    lc_sep
                      ls_smtp-active     lc_sep
                      ls_smtp-retry_min  lc_sep
                      ls_smtp-mail_host  lc_sep
                      ls_smtp-mail_port
                      INTO ls_output.
          APPEND ls_output TO lt_output.
          CLEAR: ls_smtp, ls_output.

        ENDLOOP.

      ELSE.
        " No data found
        ls_output =  lc_no_data. "+V002
        APPEND ls_output TO lt_output.
        CLEAR ls_output.

      ENDIF.

      " Adding empty line
      ls_output = space.
      APPEND ls_output TO lt_output.

*   Begin of changes in V002
      " Adding sub title
      ls_output = lc_httpnodes.
      APPEND ls_output TO lt_output.
      CLEAR ls_output.
*   End of changes in V002
*   Begin of changes in V001

      MOVE-CORRESPONDING lt_nodes TO lt_http.

      IF lt_http IS NOT INITIAL.

        " Adding headings to the output for http nodes
        CONCATENATE lc_node
                    lc_desc
                    lc_dest
                    INTO ls_output
                    SEPARATED BY lc_sep.
        APPEND ls_output TO lt_output.
        CLEAR ls_output.

        LOOP AT lt_http INTO ls_http WHERE node_type = lc_http.

          IF ls_http-rfcdest IS INITIAL.
            ls_http-rfcdest = lc_null.
          ENDIF.

          CONCATENATE ls_http-node
                      ls_http-descrip
                      ls_http-rfcdest
                      INTO ls_output
                      SEPARATED BY lc_sep.
          APPEND ls_output TO lt_output.
          CLEAR: ls_http, ls_output.

        ENDLOOP.

      ELSE.
        " No data found
        ls_output =  lc_no_data. "+V002
        APPEND ls_output TO lt_output.
        CLEAR ls_output.

      ENDIF.

*   End of changes in V001

      " Adding empty line
      ls_output = space.
      APPEND ls_output TO lt_output.

      " To get smtp and http node data
      SELECT node addr_type convert_s convert_l convert_o convert_t
             FROM sxserv
             INTO TABLE lt_sxserv.

      " Adding table name
      ls_output = lc_sxserv.
      APPEND ls_output TO lt_output.
      CLEAR ls_output.

      IF lt_sxserv IS NOT INITIAL.

        " Adding headings to the output for sxserv
        CONCATENATE lc_node         lc_sep
                    lc_addr_type    lc_sep
                    lc_convert_s    lc_sep
                    lc_convert_l    lc_sep
                    lc_convert_o    lc_sep
                    lc_convert_t
                    INTO ls_output.
        APPEND ls_output TO lt_output.
        CLEAR ls_output.

        LOOP AT lt_sxserv INTO ls_sxserv.

          IF ls_sxserv-convert_t IS INITIAL.
            ls_sxserv-convert_t = lc_null.
          ENDIF.

          CONCATENATE ls_sxserv-node        lc_sep
                      ls_sxserv-addr_type   lc_sep
                      ls_sxserv-convert_s   lc_sep
                      ls_sxserv-convert_l   lc_sep
                      ls_sxserv-convert_o   lc_sep
                      ls_sxserv-convert_t
                      INTO ls_output.
          APPEND ls_output TO lt_output.
          CLEAR: ls_sxserv, ls_output.

        ENDLOOP.
      ELSE.
        " No data found
        ls_output =  lc_no_data. "+V002
        APPEND ls_output TO lt_output.
        CLEAR ls_output.

      ENDIF.

      " Adding empty line
      ls_output = space.
      APPEND ls_output TO lt_output.

      " To get smtp node data
      SELECT mandt snd_system snd_client snd_group
             rec_type rec_addr generic length node
             FROM sxroute
             INTO TABLE lt_sxroute.

      " Adding table name
      ls_output = lc_sxroute.
      APPEND ls_output TO lt_output.
      CLEAR ls_output.

      IF lt_sxroute IS NOT INITIAL.

        " Adding headings to the output for sxroute
        CONCATENATE lc_mandt        lc_sep
                    lc_snd_system   lc_sep
                    lc_snd_client   lc_sep
                    lc_snd_group    lc_sep
                    lc_rec_type     lc_sep
                    lc_rec_addr     lc_sep
                    lc_generic      lc_sep
                    lc_length
                    INTO ls_output.
        APPEND ls_output TO lt_output.
        CLEAR ls_output.

        LOOP AT lt_sxroute INTO ls_sxroute.

          " FM to reverse address area
          CALL FUNCTION 'STRING_REVERSE'
            EXPORTING
              string  = ls_sxroute-rec_addr
              lang    = 'E'
            IMPORTING
              rstring = ls_sxroute-rec_addr.

          lv_length = ls_sxroute-length.

          IF ls_sxroute-node IS INITIAL.
            ls_sxroute-node = lc_null.
          ENDIF.

          CONCATENATE ls_sxroute-mandt        lc_sep
                      ls_sxroute-snd_system   lc_sep
                      ls_sxroute-snd_client   lc_sep
                      ls_sxroute-snd_group    lc_sep
                      ls_sxroute-rec_type     lc_sep
                      ls_sxroute-rec_addr     lc_sep
                      ls_sxroute-generic      lc_sep
                      lv_length               lc_sep
                      ls_sxroute-node
                      INTO ls_output.
          APPEND ls_output TO lt_output.
          CLEAR: ls_sxroute, ls_output.

        ENDLOOP.

      ELSE.
        " No data found
        ls_output =  lc_no_data.
        APPEND ls_output TO lt_output.
        CLEAR ls_output.

      ENDIF.

      " Adding empty line
      ls_output = space.
      APPEND ls_output TO lt_output.

**************************SCOT Settings***************************
*   Begin of changes in V001

      "  To get SCOT settings
      CALL METHOD cl_bcs_adm_settings=>get_data
        IMPORTING
          es_para_in     = ls_para_in
          es_para_status = ls_status
          et_stml        = lt_stml.

**************************Inbound Message***************************

      " Adding sub title to the output
      ls_output = lc_inb_msg.
      APPEND ls_output TO lt_output.
      CLEAR ls_output.

      " Adding headings to the output
      CONCATENATE lc_force_ver
                  lc_force_dsn
                  lc_no_mdn
                  lc_sendstatus
                  INTO ls_output
                  SEPARATED BY lc_sep.
      APPEND ls_output TO lt_output.
      CLEAR ls_output.

      IF ls_para_in-force_version IS INITIAL.

        lv_force_version = lc_null.

      ELSE.

        " To read domain values for BCS_FORCEVERSION
        CALL FUNCTION 'DD_DOMVALUES_GET'
          EXPORTING
            domname        = lc_bcsforce
            text           = lc_text
            langu          = lc_lang
          TABLES
            dd07v_tab      = lt_values
          EXCEPTIONS
            wrong_textflag = 1
            OTHERS         = 2.

        IF sy-subrc EQ 0.

          SORT lt_values BY domvalue_l ASCENDING.

          READ TABLE lt_values INTO ls_values
                     WITH KEY domvalue_l = ls_para_in-force_version
                     BINARY SEARCH.

          IF sy-subrc EQ 0.
            lv_force_version = ls_values-ddtext.
          ELSE.
            lv_force_version = ls_para_in-force_version.
          ENDIF.

        ENDIF.

      ENDIF.

      IF ls_status-force_dsn IS INITIAL.

        lv_force_dsn = lc_null.

      ELSE.

        FREE: lt_values.

        " To read domain values for BCS_FORCE_DSN
        CALL FUNCTION 'DD_DOMVALUES_GET'
          EXPORTING
            domname        = lc_forcedsn
            text           = lc_text
            langu          = lc_lang
          TABLES
            dd07v_tab      = lt_values
          EXCEPTIONS
            wrong_textflag = 1
            OTHERS         = 2.

        IF sy-subrc EQ 0.

          SORT lt_values BY domvalue_l ASCENDING.

          READ TABLE lt_values INTO ls_values
                     WITH KEY domvalue_l = ls_status-force_dsn
                     BINARY SEARCH.

          IF sy-subrc EQ 0.
            lv_force_dsn = ls_values-ddtext.
          ELSE.
            lv_force_dsn = ls_status-force_dsn.
          ENDIF.

        ENDIF.

      ENDIF.

      IF ls_status-status_send_immediately IS INITIAL.
        ls_status-status_send_immediately = lc_null.
      ENDIF.

      CONCATENATE lv_force_version
                  lv_force_dsn
                  ls_status-no_mdn
                  ls_status-status_send_immediately
                  INTO ls_output
                  SEPARATED BY lc_sep.
      APPEND ls_output TO lt_output.
      CLEAR ls_output.

**************************Inbound Status***************************

      " Adding empty line
      ls_output = space.
      APPEND ls_output TO lt_output.

      " Adding sub title to the output
      ls_output = lc_inb_status.
      APPEND ls_output TO lt_output.
      CLEAR ls_output.

      " Adding headings to the output
      CONCATENATE lc_notify
                  lc_statuscode
                  lc_entirestat
                  lc_sendall
                  INTO ls_output
                  SEPARATED BY lc_sep.
      APPEND ls_output TO lt_output.
      CLEAR ls_output.

      READ TABLE lt_stml INTO ls_stml WITH KEY is_default = lc_x.
      IF sy-subrc EQ 0.

        FREE: lt_values.

        " To read domain values for BCS_STML
        CALL FUNCTION 'DD_DOMVALUES_GET'
          EXPORTING
            domname        = lc_bcsstml
            text           = lc_text
            langu          = lc_lang
          TABLES
            dd07v_tab      = lt_values
          EXCEPTIONS
            wrong_textflag = 1
            OTHERS         = 2.

        IF sy-subrc EQ 0.

          SORT lt_values BY domvalue_l ASCENDING.

          READ TABLE lt_values INTO ls_values
                     WITH KEY domvalue_l = ls_stml-setting
                     BINARY SEARCH.

          IF sy-subrc EQ 0.
            lv_sender = ls_values-ddtext.
          ENDIF.

        ENDIF.

      ENDIF.

      IF ls_status-mail_route_to IS INITIAL.
        ls_status-mail_route_to = lc_null.
      ENDIF.

      CONCATENATE lv_sender
                  ls_status-mail_with_node
                  ls_status-mail_with_original
                  ls_status-mail_route_to
                  INTO ls_output
                  SEPARATED BY lc_sep.
      APPEND ls_output TO lt_output.
      CLEAR:lv_sender, ls_output.

      " Adding empty line
      ls_output = space.
      APPEND ls_output TO lt_output.

      " Adding sub title to the output
      ls_output = lc_settings.
      APPEND ls_output TO lt_output.
      CLEAR ls_output.

      DESCRIBE TABLE lt_stml LINES lv_cnt_stml.

      IF lv_cnt_stml > 1.

        " Adding headings to the output
        CONCATENATE lc_add_area
                    lc_inf_sender
                    INTO ls_output
                    SEPARATED BY lc_sep.
        APPEND ls_output TO lt_output.
        CLEAR ls_output.

        SORT lt_values BY domvalue_l ASCENDING.

        LOOP AT lt_stml INTO ls_stml WHERE is_default NE lc_x.

          READ TABLE lt_values INTO ls_values
                     WITH KEY domvalue_l = ls_stml-setting
                     BINARY SEARCH.

          IF sy-subrc EQ 0.
            lv_sender = ls_values-ddtext.
          ELSE.
            lv_sender = lc_null.
          ENDIF.

          CONCATENATE ls_stml-address
                      lv_sender
                      INTO ls_output
                      SEPARATED BY lc_sep.
          APPEND ls_output TO lt_output.
          CLEAR:lv_sender, ls_output.

        ENDLOOP.

      ELSE.
        " No data
        ls_output = lc_no_data.
        APPEND ls_output TO lt_output.
        CLEAR ls_output.

      ENDIF.

      " Adding empty line
      ls_output = space.
      APPEND ls_output TO lt_output.

**************************Anlys***************************

      " Adding sub title to the output
      ls_output = lc_anlys.
      APPEND ls_output TO lt_output.
      CLEAR ls_output.

      " Adding headings to the output
      CONCATENATE lc_inbound
                  lc_alwayssave
                  lc_header
                  lc_neversave
                  INTO ls_output
                  SEPARATED BY lc_sep.
      APPEND ls_output TO lt_output.
      CLEAR ls_output.

      IF ls_para_in-trace_in IS INITIAL.

        ls_para_in-trace_in = lc_deactivate.

      ELSE.

        FREE: lt_values.

        " To read domain values for SXTRCSTATE
        CALL FUNCTION 'DD_DOMVALUES_GET'
          EXPORTING
            domname        = lc_state
            text           = lc_text
            langu          = lc_lang
          TABLES
            dd07v_tab      = lt_values
          EXCEPTIONS
            wrong_textflag = 1
            OTHERS         = 2.

        IF sy-subrc EQ 0.

          SORT lt_values BY domvalue_l ASCENDING.

          READ TABLE lt_values INTO ls_values
                     WITH KEY domvalue_l = ls_para_in-trace_in
                     BINARY SEARCH.

          IF sy-subrc EQ 0.
            lv_trace_in = ls_values-ddtext.
          ENDIF.

        ENDIF.

      ENDIF.

      IF ls_para_in-mime_nosave IS INITIAL.
        ls_para_in-mime_nosave = lc_null.
      ENDIF.
* Begin of changes in V001
      IF lv_trace_in IS INITIAL.
        lv_trace_in = lc_null.
      ENDIF.
* End of changes in V001

      CONCATENATE lv_trace_in
                  ls_para_in-mime_always
                  ls_para_in-mime_header
                  ls_para_in-mime_nosave
                  INTO ls_output
                  SEPARATED BY lc_sep.
      APPEND ls_output TO lt_output.
      CLEAR ls_output.

      " Adding empty line
      ls_output = space.
      APPEND ls_output TO lt_output.

********************Inbound Messages Settings*********************

      " Adding subtitle to the output
      ls_output = lc_inter_para.
      APPEND ls_output TO lt_output.
      CLEAR ls_output.

      " To read Interpret Query Parameters data
      ls_template = cl_bcs_http_in_config=>read_query_template( ).

      " Adding headings to the output
      CONCATENATE lc_comm_id
                  lc_externalid
                  lc_recipient
                  lc_stat_txt
                  INTO ls_output
                  SEPARATED BY lc_sep.
      APPEND ls_output TO lt_output.
      CLEAR ls_output.

* Begin of changes in V001
      IF ls_template-comm_id IS INITIAL.
        ls_template-comm_id = lc_null.
      ENDIF.
* End of changes in V001

      IF ls_template-status IS INITIAL.
        ls_template-status = lc_null.
      ENDIF.

      CONCATENATE ls_template-comm_id
                  ls_template-ext_id
                  ls_template-reci_addr
                  ls_template-status
                  INTO ls_output
                  SEPARATED BY lc_sep.
      APPEND ls_output TO lt_output.
      CLEAR ls_output.

      " Adding empty line
      ls_output = space.
      APPEND ls_output TO lt_output.

      " Adding sub title to the output
      ls_output = lc_inter_stat.
      APPEND ls_output TO lt_output.
      CLEAR ls_output.

      " To read Interpret Status data
      lv_stat_pattern = cl_bcs_http_in_config=>read_stat_pattern( ).
      lv_stat_result = cl_bcs_http_in_config=>read_stat_result( ).

      IF lv_stat_result = lc_e.
        lv_stat_err = lc_x.
        lv_stat_succ = ' '.
      ELSE.
        lv_stat_err = ' '.
        lv_stat_succ = lc_x.
      ENDIF.

      " Adding headings to the output
      CONCATENATE lc_txtpattern
                  lc_int_as_err
                  lc_int_as_suc
                  INTO ls_output
                  SEPARATED BY lc_sep.
      APPEND ls_output TO lt_output.
      CLEAR ls_output.

* Begin of changes in V001
      IF lv_stat_pattern IS INITIAL.
        lv_stat_pattern = lc_null.
      ENDIF.
* End of chnages in V001

      IF lv_stat_succ IS INITIAL.
        lv_stat_succ = lc_null.
      ENDIF.

      CONCATENATE lv_stat_pattern
                  lv_stat_err
                  lv_stat_succ
                  INTO ls_output
                  SEPARATED BY lc_sep.
      APPEND ls_output TO lt_output.
      CLEAR ls_output.

      " Adding empty line
      ls_output = space.
      APPEND ls_output TO lt_output.

      " Adding sub title to the output
      ls_output = lc_httpreturn.
      APPEND ls_output TO lt_output.
      CLEAR ls_output.

      " To read Return Following HTTP Response
      lv_response_ok = cl_bcs_http_in_config=>read_response_ok( ).
      lv_response_nok = cl_bcs_http_in_config=>read_response_nok( ).

      " Adding headings to the output
      CONCATENATE lc_http_suc
                  lc_http_err
                  INTO ls_output
                  SEPARATED BY lc_sep.
      APPEND ls_output TO lt_output.
      CLEAR ls_output.

* Begin of changes in V001
      IF lv_response_ok IS INITIAL.
        lv_response_ok = lc_null.
      ENDIF.
* End of chnages in V001

      IF lv_response_nok IS INITIAL.
        lv_response_nok = lc_null.
      ENDIF.

      CONCATENATE lv_response_ok
                  lv_response_nok
                  INTO ls_output
                  SEPARATED BY lc_sep.
      APPEND ls_output TO lt_output.
      CLEAR ls_output.

    WHEN OTHERS.
      " Incorrect input
      ls_output = lc_inc_input.
      APPEND ls_output TO lt_output.
      CLEAR ls_output.

*   End of changes in V001

  ENDCASE.

  "Adding NULL values in between
  DO.
    REPLACE ALL OCCURRENCES OF SUBSTRING '||'
    IN TABLE lt_output WITH '|NULL|'.
    FIND '||' IN TABLE lt_output.
    IF sy-subrc <> 0.
      EXIT .
    ENDIF.
  ENDDO.

  FREE: lt_nodes, lt_smtp, lt_sxroute, lt_sxserv, lt_stml.

ENDFORM.