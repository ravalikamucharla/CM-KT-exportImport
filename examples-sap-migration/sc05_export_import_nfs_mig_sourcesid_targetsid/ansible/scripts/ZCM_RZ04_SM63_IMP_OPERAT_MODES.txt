*---------------------------------------------------------------------*
* Program Name        :  ZCM_RZ04_SM63_IMP_OPERAT_MODES               *
* Title               :  Restore Operation Modes in RZ04  and         *
*                     :  Operation mode set in SM63                   *
* Purpose             :  This report is for restoring operational     *
*                        modes in RZ04 and operation mode set in SM63 *
*                        during Cloud Migration                       *
*---------------------------------------------------------------------*
* Related Transaction OR Standard Program References                  *
* RZ04, SM63                                                          *
*---------------------------------------------------------------------*
*Tables              :   SELECT    UPDATE      INSERT      DELETE    *
* BTCOMSET                            X                               *
* TPFID                                                       X       *
*---------------------------------------------------------------------*
* Program Change History                                              *
*---------------------------------------------------------------------*
*Date        Version     Author         TR#/Local     Description     *
*---------------------------------------------------------------------*
*12-11-2020  Initial   Ashwini B        Local        To suspend and   *
*                                                    resume background*
*                                                    jobs             *
*09-12-2022  V001      Soumya Ray       Local        To pass no data  *
*                                                    found in case no *
*                                                    data in system   *
*---------------------------------------------------------------------*
REPORT zcm_rz04_sm63_imp_operat_modes.

LOAD-OF-PROGRAM.

FORM get_config
              TABLES lt_input  STRUCTURE tab512
                     lt_output STRUCTURE tab512.

  CONSTANTS: lc_sep        TYPE c VALUE '|'                  LENGTH 1,
             lc_insert     TYPE c VALUE 'I'                  LENGTH 1,
             lc_update     TYPE c VALUE 'U'                  LENGTH 1,
             lc_delete     TYPE c VALUE 'D'                  LENGTH 1,
             lc_tpfba      TYPE c VALUE 'TPFBA: '            LENGTH 7,
             lc_tpfid      TYPE c VALUE 'TPFID: '            LENGTH 7,
             lc_btcomset   TYPE c VALUE 'BTCOMSET: '         LENGTH 10,
             lc_insert_msg TYPE c VALUE
             'Number of entries created or updated in table' LENGTH 80,
             lc_del_msg    TYPE c VALUE
             'Operation mode'                                LENGTH 15,
             lc_del_msg1   TYPE c VALUE 'deleted'            LENGTH 7,
             lc_del_msg2   TYPE c VALUE
             'Number of entries deleted in table: '          LENGTH 50,
             lc_fail_ins   TYPE c VALUE
             'Could not insert or update Operation mode'     LENGTH 50,
             lc_fail_ins2  TYPE c VALUE
             'in table TPFID'                                LENGTH 50,
             lc_fail_del   TYPE c VALUE
             'Could not delete operation mode'               LENGTH 50,
             lc_fail_del1  TYPE c VALUE
             'Failed to delete entries from table: BTCOMSET' LENGTH 80,
             lc_fail_ins1  TYPE c VALUE
   'Failed to insert or update entries into table: BTCOMSET' LENGTH 100,
             lc_type_prod  TYPE spfba-type  VALUE 'P'.

  DATA:ls_input          TYPE tab512,
       ls_output         TYPE tab512,
       lv_tabix          TYPE sy-tabix,
       lv_count          TYPE c LENGTH 5,
       lv_action         TYPE c LENGTH 1,
       lt_tpfba_input    TYPE STANDARD TABLE OF tab512,
       ls_tpfba_input    TYPE tab512,
       lt_tpfid_input    TYPE STANDARD TABLE OF tab512,
       ls_tpfid_input    TYPE tab512,
       lt_btcomset_input TYPE STANDARD TABLE OF tab512,
       ls_btcomset_input TYPE tab512,
       lt_tpfba_ins      TYPE STANDARD TABLE OF spfba,
       ls_tpfba_ins      TYPE spfba,
       lt_tpfba_del      TYPE STANDARD TABLE OF spfba,
       ls_tpfba_del      TYPE spfba,
       ls_tpfba          TYPE spfba,
       lt_tpfid_ins      TYPE STANDARD TABLE OF spfid,
       ls_tpfid_ins      TYPE spfid,
       lt_tpfid_del      TYPE STANDARD TABLE OF spfid,
       ls_tpfid          TYPE spfid,
       lt_btcomset_ins   TYPE STANDARD TABLE OF btcomset,
       lt_btcomset_del   TYPE STANDARD TABLE OF btcomset,
       ls_btcomset       TYPE btcomset,
       lv_apserver       TYPE spfid-apserver,
       ls_spfis          TYPE spfis,
       ls_spfis_in       TYPE spfis,
       lt_msxxlist       TYPE STANDARD TABLE OF msxxlist,
       ls_msxxlist       TYPE msxxlist,
       lt_tpfid          TYPE STANDARD TABLE OF spfid,
       ls_tpfid1         TYPE spfid,
       lv_baname         TYPE spfis-baname,
       ls_spfid          TYPE spfid,
       ls_spfid_out      TYPE spfid.                           "+V001


  " Read entries to be updated in table TPFBA
  FREE: lt_tpfba_input[].
  CLEAR: ls_input,lv_tabix.
  LOOP AT lt_input INTO ls_input.

    IF ls_input IS NOT INITIAL.
      ls_tpfba_input = ls_input.
      APPEND ls_tpfba_input TO lt_tpfba_input.
    ELSE.
      lv_tabix = sy-tabix.
      EXIT.
    ENDIF.

  ENDLOOP.

  " Read entries to be updated in table TPFID
  FREE: lt_tpfid_input[].
  CLEAR: ls_input.
  LOOP AT lt_input INTO ls_input FROM lv_tabix + 1.

    IF ls_input IS NOT INITIAL.
      ls_tpfid_input = ls_input.
      APPEND ls_tpfid_input TO lt_tpfid_input.
    ELSE.
      lv_tabix = sy-tabix.
      EXIT.
    ENDIF.

  ENDLOOP.

  " Read entries to be updated in table BTCOMSET
  FREE: lt_btcomset_input[].
  CLEAR: ls_input.
  LOOP AT lt_input INTO ls_input FROM lv_tabix + 1.

    IF ls_input IS NOT INITIAL.
      ls_btcomset_input = ls_input.
      APPEND ls_btcomset_input TO lt_btcomset_input.
    ELSE.
      lv_tabix = sy-tabix.
      EXIT.
    ENDIF.

  ENDLOOP.

  " To delete heading
  DELETE lt_tpfba_input[] INDEX 1.

  FREE: lt_tpfba_ins,
        lt_tpfba_del.

  " Read entries to be inserted/updated or deleted into
  " seperate tables
  CLEAR: ls_tpfba_input.
  LOOP AT lt_tpfba_input INTO ls_tpfba_input.
    CLEAR: ls_tpfba.
    SPLIT ls_tpfba_input AT lc_sep INTO
     ls_tpfba-baname
     ls_tpfba-sysname
     ls_tpfba-type
     ls_tpfba-instances
     ls_tpfba-txt
     lv_action.

    IF ( lv_action EQ lc_insert )
    OR ( lv_action EQ lc_update ).
      APPEND ls_tpfba TO lt_tpfba_ins.
      CLEAR ls_tpfba.
    ELSEIF lv_action EQ lc_delete.
      APPEND ls_tpfba TO lt_tpfba_del.
      CLEAR ls_tpfba.
    ENDIF.
  ENDLOOP.

  " To delete heading
  DELETE lt_tpfid_input[] INDEX 1.

  FREE: lt_tpfid_ins,
        lt_tpfid_del.

  " Read entries to be deleted into
  " seperate table
  CLEAR: ls_tpfid_input,lv_action.
  LOOP AT lt_tpfid_input INTO ls_tpfid_input.

    CLEAR: ls_tpfid.

    SPLIT ls_tpfid_input AT lc_sep INTO
     ls_tpfid-instname
     ls_tpfid-host
     ls_tpfid-type
     ls_tpfid-baname
     ls_tpfid-sysname
     ls_tpfid-sysnr
     ls_tpfid-apserver
     ls_tpfid-status
     ls_tpfid-wpnodia
     ls_tpfid-wpnovb
     ls_tpfid-wpnobtc
     ls_tpfid-wpnoenq
     ls_tpfid-wpnospo
     ls_tpfid-wpno
     ls_tpfid-wpnobtca
     ls_tpfid-srvdia
     ls_tpfid-srvvb
     ls_tpfid-srvbtc
     ls_tpfid-srvenq
     ls_tpfid-srvspo
     ls_tpfid-srvmsg
     ls_tpfid-srvgw
     ls_tpfid-opsys
     ls_tpfid-wpnov2
     ls_tpfid-wpnores1
     ls_tpfid-wpnores2
     ls_tpfid-srvv2
     ls_tpfid-srvres1
     ls_tpfid-srvres2
     ls_tpfid-pflinsname
     ls_tpfid-pflstrname
     ls_tpfid-wpnores
     ls_tpfid-wpmaxno
     ls_tpfid-srvdynwp
     lv_action.

    IF lv_action EQ lc_delete.
      APPEND ls_tpfid TO lt_tpfid_del.
      CLEAR ls_tpfid.
    ENDIF.
  ENDLOOP.

  "Title
  CLEAR: ls_output.
  ls_output = 'RZ04 and SM63 update'.
  APPEND ls_output TO lt_output.

  " Delete entries from table TPFBA
  IF lt_tpfba_del[] IS NOT INITIAL.

    CLEAR: ls_tpfba_del,lv_count.
    LOOP AT lt_tpfba_del INTO ls_tpfba_del.

      CALL FUNCTION 'RZL_DELETE_BA_DESCR'
        EXPORTING
          betriebsart_name = ls_tpfba_del-baname
        EXCEPTIONS
          argument_error   = 1
          OTHERS           = 2.
      IF sy-subrc EQ 0.
        " Data
        CLEAR: ls_output.
        CONCATENATE lc_del_msg ls_tpfba_del-baname lc_del_msg1
        INTO ls_output SEPARATED BY space.
        APPEND ls_output TO lt_output.
      ELSE.
        "Data
        CLEAR: ls_output.
        CONCATENATE lc_fail_del ls_tpfba_del-baname INTO ls_output-wa
        SEPARATED BY space.                               "+V001
        APPEND ls_output TO lt_output.
      ENDIF.
    ENDLOOP.

  ENDIF.

  " Delete entries from table TPFID
  IF lt_tpfid_del[] IS NOT INITIAL.
    " Lock the table
    CALL FUNCTION 'ENQUEUE_E_TABLE'
      EXPORTING
        mode_rstable   = 'E'
        tabname        = 'TPFID'
      EXCEPTIONS
        foreign_lock   = 1
        system_failure = 2
        OTHERS         = 3.
    IF sy-subrc NE 0.
      "Data
      CLEAR: ls_output.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
         WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
         INTO ls_output.
      APPEND ls_output TO lt_output.

    ELSE.

      DELETE tpfid FROM TABLE lt_tpfid_del.

      IF sy-subrc EQ 0.

        CLEAR: lv_count.
        DESCRIBE TABLE lt_tpfid_del LINES lv_count.

        " Number of entries deleted in the table
        CONDENSE lv_count.
        CONCATENATE lc_del_msg2 lc_tpfid lv_count
        INTO ls_output SEPARATED BY space.
        APPEND ls_output TO lt_output.
        CLEAR ls_output.

      ELSE.

        "Data
        CLEAR: ls_output.
        CONCATENATE lc_fail_del lc_fail_ins2 INTO ls_output-wa
        SEPARATED BY space.                                     "+V001
        APPEND ls_output TO lt_output.

      ENDIF.

      CALL FUNCTION 'DEQUEUE_E_TABLE'
        EXPORTING
          mode_rstable = 'E'
          tabname      = 'TPFID'.

    ENDIF.
  ENDIF.

  " Insert/Update the entries into table TPFBA
  IF lt_tpfba_ins[] IS NOT INITIAL.

    CLEAR: ls_tpfba_ins,lv_count.
    LOOP AT lt_tpfba_ins INTO ls_tpfba_ins.

      CALL FUNCTION 'RZL_SAVE_BA_DESCR'
        EXPORTING
          betriebsart_description    = ls_tpfba_ins
          betriebsart_name           = ls_tpfba_ins-baname
        TABLES
          instance_description_table = lt_tpfid_ins
        EXCEPTIONS
          argument_error             = 1
          OTHERS                     = 2.
      IF sy-subrc EQ 0.
        lv_count = lv_count + 1.
      ELSE.
        CLEAR: ls_output.
        CONCATENATE lc_fail_ins ls_tpfba_ins-baname INTO ls_output-wa
        SEPARATED BY space.                                 "+V001
        APPEND ls_output TO lt_output.
      ENDIF.
    ENDLOOP.

    " Generate new instances and assign those to operation modes
    " in target system
    FREE: lt_msxxlist.
    CALL FUNCTION 'TH_SERVER_LIST'
      TABLES
        list = lt_msxxlist.

    CLEAR: ls_msxxlist,ls_tpfid1.
    LOOP AT lt_msxxlist INTO ls_msxxlist.
      ls_tpfid1-apserver = ls_msxxlist-name.
      CLEAR: ls_spfid, lv_baname.
      READ TABLE lt_tpfid INDEX 1 TRANSPORTING NO FIELDS.
      IF sy-subrc NE 0.
        ls_spfid-type     = 'SAP'.
        ls_spfid-apserver = ls_msxxlist-name.
        CALL FUNCTION 'RZL_ACTUAL_ID_DESCR'
          EXPORTING
            spfid_in    = ls_spfid
          IMPORTING
            spfid_out   = ls_spfid
            curr_baname = lv_baname.

        CLEAR: ls_tpfba_ins.
        LOOP AT lt_tpfba_ins INTO ls_tpfba_ins
                             WHERE type = lc_type_prod.
          ls_spfid-baname = ls_tpfba_ins-baname.
          ls_tpfid1 = ls_spfid.
          APPEND ls_tpfid1 TO lt_tpfid.
        ENDLOOP.
      ENDIF.
    ENDLOOP.

    " Number of entries created or updated in the table
    CONDENSE lv_count.
    CONCATENATE lc_insert_msg lc_tpfba lv_count
    INTO ls_output SEPARATED BY space.
    APPEND ls_output TO lt_output.
    CLEAR ls_output.

  ENDIF.

  " Read entries to be inserted/updated into
  " seperate tables
  CLEAR: ls_tpfid_input,lv_action.
  LOOP AT lt_tpfid_input INTO ls_tpfid_input.

    CLEAR: ls_tpfid.

    SPLIT ls_tpfid_input AT lc_sep INTO
     ls_tpfid-instname
     ls_tpfid-host
     ls_tpfid-type
     ls_tpfid-baname
     ls_tpfid-sysname
     ls_tpfid-sysnr
     ls_tpfid-apserver
     ls_tpfid-status
     ls_tpfid-wpnodia
     ls_tpfid-wpnovb
     ls_tpfid-wpnobtc
     ls_tpfid-wpnoenq
     ls_tpfid-wpnospo
     ls_tpfid-wpno
     ls_tpfid-wpnobtca
     ls_tpfid-srvdia
     ls_tpfid-srvvb
     ls_tpfid-srvbtc
     ls_tpfid-srvenq
     ls_tpfid-srvspo
     ls_tpfid-srvmsg
     ls_tpfid-srvgw
     ls_tpfid-opsys
     ls_tpfid-wpnov2
     ls_tpfid-wpnores1
     ls_tpfid-wpnores2
     ls_tpfid-srvv2
     ls_tpfid-srvres1
     ls_tpfid-srvres2
     ls_tpfid-pflinsname
     ls_tpfid-pflstrname
     ls_tpfid-wpnores
     ls_tpfid-wpmaxno
     ls_tpfid-srvdynwp
     lv_action.

    IF ( lv_action EQ lc_insert )
    OR ( lv_action EQ lc_update ).
      APPEND ls_tpfid TO lt_tpfid_ins.
      CLEAR ls_tpfid.
    ENDIF.
  ENDLOOP.

  IF lt_tpfid_ins[] IS NOT INITIAL.

    SORT: lt_tpfid_ins[] BY baname host.

    DELETE ADJACENT DUPLICATES FROM lt_tpfid_ins.

    " Read the instance profile details
    CLEAR: ls_tpfid_ins.
    LOOP AT lt_tpfid_ins INTO ls_tpfid_ins.
      CALL FUNCTION 'RZL_STANDARD_ID_DESCR'
        EXPORTING
          spfid_in  = ls_tpfid_ins
        IMPORTING
          spfid_out = ls_tpfid_ins.

      CALL 'C_SAPGPARAM' ID 'NAME'   FIELD 'rdisp/myname'
                         ID 'VALUE'  FIELD lv_apserver.

      CLEAR ls_spfis_in.
      CLEAR ls_spfis.

      ls_spfid_out = ls_tpfid_ins.                       "+V001

      ls_spfis_in-apserver = ls_tpfid_ins-apserver.

      CALL FUNCTION 'RZL_RCV_SINGLE_INST_DESCR_T'
        EXPORTING
          is_tbl_in             = ls_spfis_in
        IMPORTING
          is_tbl                = ls_spfis
          spfid                 = ls_spfid_out
        EXCEPTIONS
          communication_failure = 8
          system_failure        = 4.
      IF sy-subrc EQ 0.
        IF ls_spfid_out-instname IS NOT INITIAL.
          ls_tpfid_ins-instname = ls_spfid_out-instname.
        ENDIF.
        IF ls_spfis-cmponaps IS NOT INITIAL.
          ls_tpfid_ins-cmpon = ls_spfis-cmponaps.
        ENDIF.
        ls_tpfid_ins-pfinst = ls_spfid_out-pfinst.
        ls_tpfid_ins-pfstart = ls_spfid_out-pfstart.
        MODIFY lt_tpfid_ins FROM ls_tpfid_ins.
        CONDENSE ls_tpfid_ins.
        CLEAR: ls_tpfid_ins,ls_spfid_out.
      ENDIF.
    ENDLOOP.
  ENDIF.

  " Insert/Update the entries into table TPFID
  IF ( lt_tpfid_ins[] IS NOT INITIAL ) OR
     ( lt_tpfid[] IS NOT INITIAL ).

    " Lock the table
    CALL FUNCTION 'ENQUEUE_E_TABLE'
      EXPORTING
        mode_rstable   = 'E'
        tabname        = 'TPFID'
      EXCEPTIONS
        foreign_lock   = 1
        system_failure = 2
        OTHERS         = 3.
    IF sy-subrc NE 0.
      CLEAR: ls_output.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
         WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
         INTO ls_output.
      APPEND ls_output TO lt_output.
      RETURN.

    ELSE.

      IF lt_tpfid_ins[] IS NOT INITIAL.

        MODIFY tpfid FROM TABLE lt_tpfid_ins.

        IF sy-subrc EQ 0.

          CLEAR: lv_count.
          DESCRIBE TABLE lt_tpfid_ins LINES lv_count.

          " Number of entries created or updated in the table
          CONDENSE lv_count.
          CONCATENATE lc_insert_msg lc_tpfid lv_count
          INTO ls_output SEPARATED BY space.
          APPEND ls_output TO lt_output.
          CLEAR ls_output.

        ELSE.
          " Failed to insert entries
          ls_output = lc_fail_ins.
          APPEND ls_output TO lt_output.
          CLEAR ls_output.

        ENDIF.

      ELSEIF lt_tpfid[] IS NOT INITIAL.

        MODIFY tpfid FROM TABLE lt_tpfid.

        IF sy-subrc EQ 0.

          CLEAR: lv_count.
          DESCRIBE TABLE lt_tpfid LINES lv_count.

          " Number of entries created or updated in the table
          CONDENSE lv_count.
          CONCATENATE lc_insert_msg lc_tpfid lv_count
          INTO ls_output SEPARATED BY space.
          APPEND ls_output TO lt_output.
          CLEAR ls_output.

        ELSE.
          " Failed to insert entries
          ls_output = lc_fail_ins.
          APPEND ls_output TO lt_output.
          CLEAR ls_output.

        ENDIF.

      ENDIF.

      CALL FUNCTION 'DEQUEUE_E_TABLE'
        EXPORTING
          mode_rstable = 'E'
          tabname      = 'TPFID'.
    ENDIF.

  ENDIF.

  " To delete heading
  DELETE lt_btcomset_input[] INDEX 1.

  FREE: lt_btcomset_ins,
        lt_btcomset_del.

  " Read entries to be inserted/updated or deleted into
  " seperate tables
  CLEAR: ls_btcomset_input.
  LOOP AT lt_btcomset_input INTO ls_btcomset_input.

    CLEAR: ls_btcomset.

    SPLIT ls_btcomset_input AT lc_sep INTO
     ls_btcomset-setname
     ls_btcomset-startdate
     ls_btcomset-starttime
     ls_btcomset-enddate
     ls_btcomset-endtime
     ls_btcomset-modename
     ls_btcomset-target
     ls_btcomset-settype
     lv_action.

    IF ( lv_action EQ lc_insert )
    OR ( lv_action EQ lc_update ).
      APPEND ls_btcomset TO lt_btcomset_ins.
      CLEAR ls_btcomset.

    ELSEIF lv_action EQ lc_delete.
      APPEND ls_btcomset TO lt_btcomset_del.
      CLEAR ls_btcomset.

    ENDIF.

  ENDLOOP.

* Entries are directly inserted/updated or deleted from table
* BTCOMSET as there are no standard FM's to be used to perform
* these actions

  " Delete entries from table BTCOMSET
  IF lt_btcomset_del[] IS NOT INITIAL.

    " Lock the table
    CALL FUNCTION 'ENQUEUE_E_TABLE'
      EXPORTING
        mode_rstable   = 'E'
        tabname        = 'BTCOMSET'
      EXCEPTIONS
        foreign_lock   = 1
        system_failure = 2
        OTHERS         = 3.
    IF sy-subrc NE 0.
      CLEAR: ls_output.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
         WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
         INTO ls_output.
      APPEND ls_output TO lt_output.
      RETURN.

    ELSE.


      DELETE btcomset FROM TABLE lt_btcomset_del.

      IF sy-subrc EQ 0.

        CLEAR: lv_count.
        DESCRIBE TABLE lt_btcomset_del LINES lv_count.

        " Number of entries deleted in the table
        CONDENSE lv_count.
        CONCATENATE lc_del_msg2 lc_btcomset lv_count
        INTO ls_output-wa SEPARATED BY space.             "+V001
        APPEND ls_output TO lt_output.
        CLEAR ls_output.

      ELSE.
        " Failed to delete entries
        ls_output = lc_fail_del1.
        APPEND ls_output TO lt_output.
        CLEAR ls_output.

      ENDIF.
      CALL FUNCTION 'DEQUEUE_E_TABLE'
        EXPORTING
          mode_rstable = 'E'
          tabname      = 'BTCOMSET'.
    ENDIF.

  ENDIF.

  " Insert/Update entries in table BTCOMSET
  IF lt_btcomset_ins[] IS NOT INITIAL.
    " Lock the table
    CALL FUNCTION 'ENQUEUE_E_TABLE'
      EXPORTING
        mode_rstable   = 'E'
        tabname        = 'BTCOMSET'
      EXCEPTIONS
        foreign_lock   = 1
        system_failure = 2
        OTHERS         = 3.
    IF sy-subrc NE 0.
      CLEAR: ls_output.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
         WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
         INTO ls_output.
      APPEND ls_output TO lt_output.
      RETURN.

    ELSE.

      MODIFY btcomset FROM TABLE lt_btcomset_ins.

      IF sy-subrc EQ 0.

        CLEAR: lv_count.
        DESCRIBE TABLE lt_btcomset_ins LINES lv_count.

        " Number of entries created in the table
        CONDENSE lv_count.

        CONCATENATE lc_insert_msg lc_btcomset lv_count
        INTO ls_output-wa SEPARATED BY space.                   "+V001
        APPEND ls_output TO lt_output.
        CLEAR ls_output.

      ELSE.
        " Failed to insert or update entries
        ls_output = lc_fail_ins1.
        APPEND ls_output TO lt_output.
        CLEAR ls_output.

      ENDIF.
      " Unlock table
      CALL FUNCTION 'DEQUEUE_E_TABLE'
        EXPORTING
          mode_rstable = 'E'
          tabname      = 'BTCOMSET'.
    ENDIF.

  ENDIF.


ENDFORM.