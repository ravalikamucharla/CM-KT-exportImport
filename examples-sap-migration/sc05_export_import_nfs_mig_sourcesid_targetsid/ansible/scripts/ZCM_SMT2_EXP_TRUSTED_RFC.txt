*---------------------------------------------------------------------*
* Program Name        :   ZCM_SMT2_EXP_TRUSTED_RFC                    *
* Title               :   Export Trusted RFC in SMT2                  *
* Purpose             :   This report is to capture Trusted RFCs in   *
*                         SMT2 during Cloud Migration                 *
*---------------------------------------------------------------------*
* Related Transaction OR Standard Program References                  *
* SMT2                                                                *
*---------------------------------------------------------------------*
* Tables              :   SELECT    UPDATE      INSERT      DELETE    *
* RFCTRUST                  X                                         *
*---------------------------------------------------------------------*
* Program Change History                                              *
*---------------------------------------------------------------------*
*Date        Version   Author       TR#/Local     Description         *
*---------------------------------------------------------------------*
*09-18-2020  Initial Ruchir Kamble  FIOK900653   To Capture Trusted   *
*                                                RFCs in SMT2         *
*05-27-2021   V001  Ruchir Kamble  FIOK900653    To Change Column     *
*                                                headings             *
*10-20-2021   V002  Ruchir Kamble FIOK900653     To fix dump object   *
*                                               reference not assigned*
*08-01-2022   V003 Soumya/Yasaswini Local     To pass message "No data*
*                                             found" in case of no    *
*                                             data found in sytem     *
*---------------------------------------------------------------------*

" Please refer Package SRCX for more details

REPORT zcm_smt2_exp_trusted_rfc.

LOAD-OF-PROGRAM.

FORM get_config
              TABLES lt_input  STRUCTURE tab512
                     lt_output STRUCTURE tab512.

  TYPES: BEGIN OF id_server_struc,
           rfcsysid     TYPE rfcssysid,
           tlicense_nr  TYPE slic_inst,
           rfcslopt     TYPE rfcslopt,
           name         TYPE msname2,
           host         TYPE mshost2,
           serv         TYPE msserv,
           msgtypes     TYPE mstypes,
           hostadr      TYPE mshostadr,
           servno       TYPE msservno,
           state        TYPE msstate,
           no_authority TYPE abap_bool,
         END OF id_server_struc,

*   Begin of changes in V002
         BEGIN OF rfc_sys_license_struc,
           rfcsysid    TYPE rfcssysid,
           tlicense_nr TYPE slic_inst,
         END OF rfc_sys_license_struc.
*   End of changes in V002

  CONSTANTS:
    lc_sep            TYPE c VALUE '|'                      LENGTH 1,
    lc_export         TYPE c VALUE 'EXPORT'                 LENGTH 6,
    lc_status         TYPE c VALUE 'Status'                 LENGTH 6,
    lc_description    TYPE c VALUE 'Description'            LENGTH 15,
    lc_status_check   TYPE c VALUE 'Status Check'           LENGTH 15,
*   Begin of changes in V001
    lc_calling_sys    TYPE c VALUE 'Calling System'         LENGTH 14,
    lc_installation   TYPE c VALUE 'Installation Number'    LENGTH 20,
    lc_called_sys     TYPE c VALUE 'Called System'          LENGTH 13,
    lc_rfcdest        TYPE c VALUE 'RFC Destination'        LENGTH 15,
    lc_appserver      TYPE c VALUE 'Application Server'     LENGTH 18,
    lc_msgserver      TYPE c VALUE 'Message Server'         LENGTH 14,
    lc_installno_call TYPE c VALUE
    'Installation Number (Calling System)'                  LENGTH 38,
    lc_appserver_call TYPE c VALUE
    'Application Server (Calling System)'                   LENGTH 38,
*   End of changes in V001
    lc_title          TYPE c VALUE
    'Trusted Trusting Connections'                          LENGTH 35,
*   Begin of changes in V002
    lc_no_input       TYPE c VALUE 'No input passed'        LENGTH 20,
*   End of changes in V002
*   Begin of changes in V003
    lc_inc_input      TYPE c VALUE
    'Incorrect input'                                       LENGTH 20,
    lc_err_msg        TYPE c VALUE
    'No data found'                                         LENGTH 20,
*   End of changes in V003
    lc_null           TYPE c VALUE 'NULL'                   LENGTH 4.

  DATA:
    ls_input      TYPE tab512,
    ls_output     TYPE tab512,
    lv_action     TYPE char20,
    lv_state      TYPE char2,
    lt_rfctrust   TYPE STANDARD TABLE OF rfctrust,
    ls_rfctrust   TYPE rfctrust,
    lt_server     TYPE STANDARD TABLE OF id_server_struc,
    ls_server     TYPE id_server_struc,
*   Begin of changes in V002
*   Type declaration rfc_sys_license_struc is replaced instead of
*   class type cl_rfc_tt_factory=>rfc_sys_license_tab,
    lt_trusting   TYPE STANDARD TABLE OF rfc_sys_license_struc,
    ls_trusting   TYPE rfc_sys_license_struc,
*   End of changes in V002
*   Begin of changes in V001
    lv_status_msg TYPE string,
    lv_fetch_msg  TYPE string,
    lr_sql_excp   TYPE REF TO cx_rfc_trusted_trusting.

  " Clear variables before use
  CLEAR: ls_output, ls_input, lv_action, ls_server, ls_trusting,
         ls_rfctrust, lv_state.

  FREE: lt_output, lt_rfctrust, lt_server, lt_trusting.

*   End of changes in V001

*   Begin of changes in V002
  " Adding title to the output
  ls_output = lc_title.
  APPEND ls_output TO lt_output.
  CLEAR ls_output.

  READ TABLE lt_input INTO ls_input INDEX 1.
  IF sy-subrc EQ 0.
    lv_action = ls_input.              " Action
  ELSE.
    " No input passed
    ls_output = lc_no_input.
    APPEND ls_output TO lt_output.
    CLEAR ls_output.
    RETURN.
  ENDIF.

*   End of changes in V002

  CASE lv_action.

    WHEN lc_export.               " When action is EXPORT

      SELECT *
        FROM rfctrust
        INTO TABLE lt_rfctrust.
* Begin of changes V003
      IF sy-subrc NE 0.
        " No data found
        ls_output = lc_err_msg.
        APPEND ls_output TO lt_output.
        CLEAR ls_output.
      ENDIF.
* End of changes V003

      IF lt_rfctrust IS NOT INITIAL.

        " Sorting table by RFCSYSSID
        SORT lt_rfctrust BY rfctrustid.

*   Begin of changes in V001

        " Adding heading to the output
        CONCATENATE lc_called_sys     lc_sep
                    lc_installation   lc_sep
                    lc_calling_sys    lc_sep
                    lc_installno_call lc_sep
                    lc_rfcdest        lc_sep
                    lc_appserver      lc_sep
                    lc_msgserver      lc_sep
                    lc_appserver_call
                    INTO ls_output.
        APPEND ls_output TO lt_output.
        CLEAR ls_output.

*   End of changes in V001

        LOOP AT lt_rfctrust INTO ls_rfctrust.
*  Begin of changes in V003
          IF ls_rfctrust-rfctrustid IS INITIAL.
             ls_rfctrust-rfctrustid = lc_null.
          ENDIF.

          IF ls_rfctrust-rfcregdest IS INITIAL.
             ls_rfctrust-rfcregdest = lc_null.
          ENDIF.
*  End of changes in V003
          CONCATENATE ls_rfctrust-rfctrustid   lc_sep
                      ls_rfctrust-tlicense_nr  lc_sep
                      ls_rfctrust-rfctrustsy   lc_sep
                      ls_rfctrust-llicense_nr  lc_sep
                      ls_rfctrust-rfcdest      lc_sep
                      ls_rfctrust-rfccredest   lc_sep
                      ls_rfctrust-rfcmsgsrv    lc_sep
                      ls_rfctrust-rfcregdest
                      INTO ls_output.
          APPEND ls_output TO lt_output.
          CLEAR: ls_rfctrust, ls_output.

        ENDLOOP.

      ELSE.

        " No data found
        ls_output = lc_err_msg.
        APPEND ls_output TO lt_output.
        CLEAR ls_output.

      ENDIF.

      TRY.
          " Method to fetch Trusting Rfc list
          CALL METHOD cl_rfc_tt_factory=>get_trusting_list
            CHANGING
              trusting_list = lt_trusting.

        CATCH cx_rfc_trusted_trusting INTO lr_sql_excp.
*   Begin of changes in V001
          " Adding empty line
          ls_output = space.
          APPEND ls_output TO lt_output.

          " Constructing title and heading to the output
          ls_output = lc_status_check.
          APPEND ls_output TO lt_output.
          CLEAR ls_output.

          lv_fetch_msg = lr_sql_excp->get_text( ).
          ls_output =  lv_fetch_msg.
          APPEND ls_output TO lt_output.
          CLEAR ls_output.
          RETURN.
*   End of changes in V001
      ENDTRY.

      LOOP AT lt_trusting INTO ls_trusting.
        ls_server-rfcsysid  = ls_trusting-rfcsysid.
        ls_server-tlicense_nr = ls_trusting-tlicense_nr.
        APPEND ls_server TO lt_server.
        CLEAR ls_server.
      ENDLOOP.

      TRY.
          " Method to perform Status Check
          CALL METHOD cl_rfc_tt_factory=>check_trusting_on_trusted
            CHANGING
              id_server_list = lt_server.

        CATCH cx_rfc_trusted_trusting INTO lr_sql_excp.
*   Begin of changes in V001
          " Adding empty line
          ls_output = space.
          APPEND ls_output TO lt_output.

          " Constructing title and heading to the output
          ls_output = lc_status_check.
          APPEND ls_output TO lt_output.
          CLEAR ls_output.

          lv_status_msg = lr_sql_excp->get_text( ).
          ls_output =  lv_status_msg.
          APPEND ls_output TO lt_output.
          CLEAR ls_output.
          RETURN.
*   End of changes in V001
      ENDTRY.

      IF lt_server IS NOT INITIAL.

        " Adding empty line
        ls_output = space.
        APPEND ls_output TO lt_output.

        " Constructing title and heading to the output
        ls_output = lc_status_check.
        APPEND ls_output TO lt_output.
        CLEAR ls_output.

        CONCATENATE lc_called_sys   lc_sep
                    lc_installation lc_sep
                    lc_status       lc_sep
                    lc_description
                    INTO ls_output.
        APPEND ls_output TO lt_output.
        CLEAR ls_output.

        LOOP AT lt_server INTO ls_server.

          lv_state = ls_server-state.
*  Begin of changes in V003
          IF ls_server-rfcsysid IS INITIAL.
             ls_server-rfcsysid = lc_null.
          ENDIF.

          IF ls_server-rfcslopt IS INITIAL.
             ls_server-rfcslopt = lc_null.
          ENDIF.
*  End of changes in V003
          CONCATENATE ls_server-rfcsysid      lc_sep
                      ls_server-tlicense_nr   lc_sep
                      lv_state                lc_sep
                      ls_server-rfcslopt
                      INTO ls_output.
          APPEND ls_output TO lt_output.
          CLEAR: ls_server, ls_output, lv_state.
        ENDLOOP.
      ENDIF.

*  Begin of changes in V003
 "Null check in middle fields
  DO .
    REPLACE ALL OCCURRENCES OF SUBSTRING '||'
    IN TABLE lt_output WITH '|NULL|'.
    FIND '||' IN TABLE lt_output.
    IF sy-subrc <> 0.
      EXIT .
    ENDIF.
  ENDDO.

    WHEN OTHERS.

      ls_output = lc_inc_input. "Incorrect input
      APPEND ls_output TO lt_output.
      CLEAR ls_output.
*  End of changes in V003

  ENDCASE.
ENDFORM.