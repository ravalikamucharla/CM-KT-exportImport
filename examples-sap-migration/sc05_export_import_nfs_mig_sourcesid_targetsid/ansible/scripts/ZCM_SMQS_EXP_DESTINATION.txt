*---------------------------------------------------------------------*
* Program Name        :   ZCM_SMQS_EXP_DESTINATION                    *
* Title               :   Outbound Queue Status in SMQS               *
* Purpose             :   To Export, Register & Deregister outbound   *
*                         Queue status in SMQS for Cloud Migration    *
*---------------------------------------------------------------------*
* Related Transaction OR Standard Program References                  *
* SMQS                                                                *
*---------------------------------------------------------------------*
* Tables              :   SELECT    UPDATE      INSERT      DELETE    *
* XXXXX                     X                                         *
*---------------------------------------------------------------------*
* Program Change History                                              *
*---------------------------------------------------------------------*
*Date        Version   Author       TR#/Local     Description         *
*---------------------------------------------------------------------*
*09-09-2020 Initial  Ruchir Kamble FIOK900653  To Export, Register    *
*                                              Deregister destination *
*10-14-2021  V001   Ruchir Kamble FIOK900653   Bug fixes              *
*10-27-2022  V002  Soumya/Yasaswini Local      To pass "No data found *
*                                             in case no data present *
*---------------------------------------------------------------------*
REPORT zcm_smqs_exp_destination.

LOAD-OF-PROGRAM.

FORM get_config
              TABLES lt_input  STRUCTURE tab512
                     lt_output STRUCTURE tab512.

  TABLES: qsenddest.

  CONSTANTS: lc_sep         TYPE c VALUE '|'               LENGTH 1,
             lc_limited     TYPE c VALUE 'E'               LENGTH 1,
             lc_inactive    LIKE qsenddest-wkstate VALUE 'INACTIVE',
             lc_active      LIKE qsenddest-wkstate VALUE 'ACTIVE',
             lc_waiting     LIKE qsenddest-wkstate VALUE 'WAITING',
             lc_starting    LIKE qsenddest-wkstate VALUE 'STARTING',
             lc_off         TYPE c VALUE 'Off'             LENGTH 3,
             lc_null        TYPE c VALUE 'NULL'            LENGTH 4,
             lc_smqs        TYPE c VALUE 'SMQS'            LENGTH 4,
             lc_client      TYPE c VALUE 'Client'          LENGTH 6,
             lc_destination TYPE c VALUE 'Destination'     LENGTH 16,
             lc_type        TYPE c VALUE 'Type'            LENGTH 4,
             lc_wotrfc      TYPE c VALUE 'WithouttRFC'     LENGTH 18,
             lc_maxconn     TYPE c VALUE 'MaxConn'         LENGTH 15,
             lc_runtime     TYPE c VALUE 'MaxRuntime'      LENGTH 15,
             lc_status      TYPE c VALUE 'Status'          LENGTH 6,
             lc_default     TYPE c VALUE 'DEFAULT'         LENGTH 7,
             lc_act_conn    TYPE c VALUE 'ActConn'         LENGTH 10,
             lc_host_id     TYPE c VALUE 'HostID'          LENGTH 8,
             lc_export      TYPE c VALUE 'EXPORT'          LENGTH 6,
             lc_register    TYPE c VALUE 'REGISTER'        LENGTH 8,
             lc_deregister  TYPE c VALUE 'DEREGISTER'      LENGTH 10,
             lc_seconds     TYPE c VALUE 'seconds'         LENGTH 8,
             lc_sch_status  TYPE c VALUE 'SchedulerStatus' LENGTH 25,
             lc_last_update TYPE c VALUE
             'LastUpdateEvery2min'                         LENGTH 40,
             lc_group_name  TYPE c VALUE
             'NameofASGroupDEFAULTAll'                     LENGTH 40,
             lc_entries     TYPE c VALUE
             'NumberofEntriesDisplayed'                    LENGTH 40,
             lc_sch_monitor TYPE c VALUE
             'SchedulerMonitoring'                         LENGTH 30,
             lc_title       TYPE c VALUE 'QOUTScheduler'   LENGTH 25,
*  Begin of changes in V002
             lc_ninput      TYPE c VALUE
             'No input passed'                             LENGTH 20,
             lc_sch_info    TYPE c VALUE
             'SchedulerInformation'                        LENGTH 40,
             lc_err_msg     TYPE c VALUE
             'No data found'                               LENGTH 40,
             lc_inc_input   TYPE c VALUE
             'Incorrect input'                             LENGTH 20.
*  End of changes in V002

  DATA: ls_input             TYPE tab512,
        ls_output            TYPE tab512,
        lv_action            TYPE char20,
        lv_status(8)         TYPE c,
        lv_date              TYPE sy-datum,
        lv_time              TYPE sy-uzeit,
        lv_count             TYPE char10,
        lv_hostid            LIKE qsenddest-hostid,
        lv_seconds           TYPE i,
        lv_secs              TYPE char10,
        ls_schedwatch        TYPE qsenddest,
        lv_sched_watch       TYPE char10,
        lv_maxconn           TYPE char4,
        lv_maxtime           TYPE char4,
        lv_groupname         LIKE qsenddest-groupdest,
        lv_qn_nowatch        LIKE qsenddest-dest
        VALUE '%QSEND_NOWATCH',
        lv_qn_mainscheduler  LIKE qsenddest-dest
        VALUE '%QSEND_SCHEDULER',
        lv_qtime_sched_watch LIKE sy-uzeit VALUE '003000',
        lt_qdestlist         LIKE qsenddest OCCURS 0 WITH HEADER LINE,
        ls_qdestlist         TYPE qsenddest.

* Begin of changes in V002
  " Adding title to the output
  ls_output = lc_title.
  APPEND ls_output TO lt_output.
  CLEAR ls_output.
* End of changes in V002

  READ TABLE lt_input INTO ls_input INDEX 1.
* Begin of changes in V002
  IF sy-subrc NE 0.
    ls_output = lc_ninput.
    APPEND ls_output TO lt_output.
    CLEAR ls_output.
    RETURN.
  ENDIF.
* End of changes in V002
  lv_action = ls_input.      " Action

  CASE lv_action.

    WHEN lc_export.               " When action is EXPORT

      " FM to fetch Destination in the system
      CALL FUNCTION 'QDEST_GET_ALL'
        EXPORTING
          client    = sy-mandt
        IMPORTING
          status    = lv_status
          last_date = lv_date
          last_time = lv_time
          groupname = lv_groupname
          hostid    = lv_hostid
        TABLES
          qdestlist = lt_qdestlist.

*   Begin of changes in V001
      IF lt_qdestlist[] IS NOT INITIAL.
*   End of changes in V001

        " Constructing header information to the output
        ls_output = lc_sch_info.
        APPEND ls_output TO lt_output.

*********************Scheduler Status*************************
        CASE lv_status.
          WHEN lc_inactive.
            CONCATENATE lc_sch_status ':' lv_status
                        INTO ls_output SEPARATED BY space.
            APPEND ls_output TO lt_output.

          WHEN lc_active.
            CONCATENATE lc_sch_status ':' lv_status
                        INTO ls_output SEPARATED BY space.
            APPEND ls_output TO lt_output.

          WHEN lc_waiting.
            CONCATENATE lc_sch_status ':' lv_status
                        INTO ls_output SEPARATED BY space.
            APPEND ls_output TO lt_output.

          WHEN lc_starting.
            CONCATENATE lc_sch_status ':' lv_status
                        INTO ls_output SEPARATED BY space.
            APPEND ls_output TO lt_output.

          WHEN OTHERS.
            CONCATENATE lc_sch_status ':' lv_status
                        INTO ls_output SEPARATED BY space.
            APPEND ls_output TO lt_output.

        ENDCASE.

*********************Last Update*************************

        CONCATENATE lc_last_update ':' lv_date lv_time
                    INTO ls_output SEPARATED BY space.
        APPEND ls_output TO lt_output.

*********************Name of AS Group************************

        IF lv_groupname = space.
          lv_groupname = lc_default.
        ENDIF.

        CONCATENATE lc_group_name ':' lv_groupname
                            INTO ls_output SEPARATED BY space.
        APPEND ls_output TO lt_output.

*********************Number of Entries Displayed**************

        DESCRIBE TABLE lt_qdestlist LINES lv_count.

        CONDENSE lv_count.

        CONCATENATE lc_entries ':' lv_count
                    INTO ls_output SEPARATED BY space.
        APPEND ls_output TO lt_output.

************************Host ID*******************************

        CONCATENATE lc_host_id ':' lv_hostid
                    INTO ls_output SEPARATED BY space.
        APPEND ls_output TO lt_output.

*********************Scheduler Monitoring*************************

        lv_seconds = lv_qtime_sched_watch.
        lv_secs = lv_seconds.
        SELECT SINGLE * INTO ls_schedwatch FROM qsenddest
          WHERE dest = lv_qn_mainscheduler.
        IF sy-subrc = 0.
          SELECT SINGLE * FROM qsenddest WHERE dest = lv_qn_nowatch.

          IF sy-subrc = 0.
            CONCATENATE lc_sch_monitor ':' lc_off
                    INTO ls_output SEPARATED BY space.
            APPEND ls_output TO lt_output.

          ELSEIF ls_schedwatch-sched_watch <= lv_qtime_sched_watch.
            ls_schedwatch-sched_watch = 0.

            CONDENSE lv_secs.

            CONCATENATE lc_sch_monitor ':' lc_default lv_secs
                        lc_seconds
                        INTO ls_output SEPARATED BY space.
            APPEND ls_output TO lt_output.
          ELSE.

            lv_sched_watch =  ls_schedwatch-sched_watch.
            CONCATENATE lc_sch_monitor ':'  lv_sched_watch
                        lc_seconds
                        INTO ls_output SEPARATED BY space.
            APPEND ls_output TO lt_output.
          ENDIF.
        ENDIF.

        ls_output = space.
        APPEND ls_output TO lt_output.

        " Constructing title and heading to the output
        ls_output = lc_smqs.
        APPEND ls_output TO lt_output.

        CONCATENATE lc_client       lc_sep
                    lc_destination  lc_sep
                    lc_type         lc_sep
                    lc_wotrfc       lc_sep
                    lc_maxconn      lc_sep
                    lc_runtime      lc_sep
                    lc_status       lc_sep
                    lc_act_conn     lc_sep
                    lc_host_id
                    INTO ls_output.
        APPEND ls_output TO lt_output.

        LOOP AT lt_qdestlist INTO ls_qdestlist.

          lv_maxtime =  ls_qdestlist-maxtime.
          lv_maxconn =  ls_qdestlist-maxconn.

          CONDENSE: lv_maxtime, lv_maxconn.

          IF ls_qdestlist-qrfconly IS INITIAL.
            ls_qdestlist-qrfconly = lc_null.
          ENDIF.

          IF ls_qdestlist-hostid IS INITIAL.
            ls_qdestlist-hostid = lc_null.
          ENDIF.

          CONCATENATE ls_qdestlist-mandt      lc_sep
                      ls_qdestlist-dest       lc_sep
                      ls_qdestlist-type       lc_sep
                      ls_qdestlist-qrfconly   lc_sep
                      lv_maxconn              lc_sep
                      lv_maxtime              lc_sep
                      ls_qdestlist-wkstate    lc_sep
                      ls_qdestlist-nactive    lc_sep
                      ls_qdestlist-hostid
                      INTO ls_output.
          APPEND ls_output TO lt_output.


        ENDLOOP.

      ELSE.
        " No data found
        ls_output = lc_err_msg.
        APPEND ls_output TO lt_output.


      ENDIF.

    WHEN lc_register.                       " When action is REGISTER

      " FM to fetch Destination in the system
      CALL FUNCTION 'QDEST_GET_ALL'
        EXPORTING
          client    = sy-mandt
        TABLES
          qdestlist = lt_qdestlist.

      IF lt_qdestlist IS NOT INITIAL.

        LOOP AT lt_qdestlist INTO ls_qdestlist.

          " FM to Register destination
          CALL FUNCTION 'QDEST_REGISTER'
            EXPORTING
              dest                    = ls_qdestlist-dest
            EXCEPTIONS
              invalid_destination     = 1
              invalid_max_connections = 2
              not_available           = 3
              OTHERS                  = 4.

        ENDLOOP.

        " FM to fetch Destination in the system
        CALL FUNCTION 'QDEST_GET_ALL'
          EXPORTING
            client    = sy-mandt
          TABLES
            qdestlist = lt_qdestlist.

*  Begin of changes in V002
        IF lt_qdestlist IS INITIAL.
          FREE lt_output.
*   End of changes in V002

          " Constructing title and heading to the output
          ls_output = lc_smqs.
          APPEND ls_output TO lt_output.

          CONCATENATE lc_client       lc_sep
                      lc_destination  lc_sep
                      lc_type         lc_sep
                      lc_wotrfc       lc_sep
                      lc_maxconn      lc_sep
                      lc_runtime      lc_sep
                      lc_status       lc_sep
                      lc_act_conn     lc_sep
                      lc_host_id
                      INTO ls_output.
          APPEND ls_output TO lt_output.

          LOOP AT lt_qdestlist INTO ls_qdestlist.

            lv_maxtime =  ls_qdestlist-maxtime.
            lv_maxconn =  ls_qdestlist-maxconn.

            CONDENSE: lv_maxtime, lv_maxconn.

            IF ls_qdestlist-qrfconly IS INITIAL.
              ls_qdestlist-qrfconly = lc_null.
            ENDIF.

            IF ls_qdestlist-hostid IS INITIAL.
              ls_qdestlist-hostid = lc_null.
            ENDIF.

            CONCATENATE ls_qdestlist-mandt      lc_sep
                        ls_qdestlist-dest       lc_sep
                        ls_qdestlist-type       lc_sep
                        ls_qdestlist-qrfconly   lc_sep
                        lv_maxconn              lc_sep
                        lv_maxtime              lc_sep
                        ls_qdestlist-wkstate    lc_sep
                        ls_qdestlist-nactive    lc_sep
                        ls_qdestlist-hostid
                        INTO ls_output.
            APPEND ls_output TO lt_output.

          ENDLOOP.

* Begin of changes in V002
        ELSE.
          " No data found
          ls_output = lc_err_msg.
          APPEND ls_output TO lt_output.
        ENDIF.
* End of changes in V002
      ELSE.
        " No data found
        ls_output = lc_err_msg.
        APPEND ls_output TO lt_output.

      ENDIF.

    WHEN lc_deregister.                   " When action is DEREGISTER


      " FM to fetch Destination in the system
      CALL FUNCTION 'QDEST_GET_ALL'
        EXPORTING
          client    = sy-mandt
        TABLES
          qdestlist = lt_qdestlist.

      IF lt_qdestlist IS NOT INITIAL.

        LOOP AT lt_qdestlist INTO ls_qdestlist.

          " FM to De-register destination
          CALL FUNCTION 'QDEST_UNREGISTER'
            EXPORTING
              dest                = ls_qdestlist-dest
              limited             = lc_limited
            EXCEPTIONS
              invalid_destination = 1
              not_available       = 2
              OTHERS              = 3.

        ENDLOOP.

        " FM to fetch Destination in the system
        CALL FUNCTION 'QDEST_GET_ALL'
          EXPORTING
            client    = sy-mandt
          TABLES
            qdestlist = lt_qdestlist.

*  Begin of changes in V002
        IF lt_qdestlist IS INITIAL.
          FREE lt_output.
*   End of changes in V002
          " Constructing title and heading to the output
          ls_output = lc_smqs.
          APPEND ls_output TO lt_output.

          CONCATENATE lc_client       lc_sep
                      lc_destination  lc_sep
                      lc_type         lc_sep
                      lc_wotrfc       lc_sep
                      lc_maxconn      lc_sep
                      lc_runtime      lc_sep
                      lc_status       lc_sep
                      lc_act_conn     lc_sep
                      lc_host_id
                      INTO ls_output.
          APPEND ls_output TO lt_output.

          LOOP AT lt_qdestlist INTO ls_qdestlist.

            lv_maxtime =  ls_qdestlist-maxtime.
            lv_maxconn =  ls_qdestlist-maxconn.

            CONDENSE: lv_maxtime, lv_maxconn.

            IF ls_qdestlist-qrfconly IS INITIAL.
              ls_qdestlist-qrfconly = lc_null.
            ENDIF.

            IF ls_qdestlist-hostid IS INITIAL.
              ls_qdestlist-hostid = lc_null.
            ENDIF.

            CONCATENATE ls_qdestlist-mandt      lc_sep
                        ls_qdestlist-dest       lc_sep
                        ls_qdestlist-type       lc_sep
                        ls_qdestlist-qrfconly   lc_sep
                        lv_maxconn              lc_sep
                        lv_maxtime              lc_sep
                        ls_qdestlist-wkstate    lc_sep
                        ls_qdestlist-nactive    lc_sep
                        ls_qdestlist-hostid
                        INTO ls_output.
            APPEND ls_output TO lt_output.

          ENDLOOP.

* Begin of changes in V002
        ELSE.
          " No data found
          ls_output = lc_err_msg.
          APPEND ls_output TO lt_output.
        ENDIF.
* End of changes in V002
      ELSE.
        " No data found
        ls_output = lc_err_msg.
        APPEND ls_output TO lt_output.

      ENDIF.

* Begin of changes in V002
  WHEN OTHERS.
    ls_output = lc_inc_input. "Incorrect input
    APPEND ls_output TO lt_output.
    CLEAR ls_output.
* End of changes in V002
  ENDCASE.

ENDFORM.