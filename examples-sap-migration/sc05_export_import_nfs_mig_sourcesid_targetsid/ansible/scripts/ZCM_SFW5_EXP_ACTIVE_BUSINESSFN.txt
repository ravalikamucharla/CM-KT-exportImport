*---------------------------------------------------------------------*
* Program Name        :   ZCM_SFW5_EXP_ACTIVE_BUSINESSFN              *
* Title               :   Logical Systems                             *
* Purpose             :   This report is used to export Business      *
*---------------------------------------------------------------------*
* Related Transaction OR Standard Program References                  *
* SFW5                                                                *
*---------------------------------------------------------------------*
* Tables              :   SELECT    UPDATE      INSERT      DELETE    *
* SFW_ACTIVE_B2             X                                         *
* SFW_BFT                   X                                         *
* SFW_BF                    X                                         *
*---------------------------------------------------------------------*
* Program Change History                                              *
*---------------------------------------------------------------------*
*Date        Version   Author       TR#/Local     Description         *
*---------------------------------------------------------------------*
*09-28-2020 Initial   Soumya Ray    Local      To export business func*
*                                              tion and status        *
*09-20-2022 V001      Soumya Ray    Local      To remove inline declar*
*                                              ation and pass no data *
*                                             found in case of no data*
*---------------------------------------------------------------------*

REPORT zcm_sfw5_exp_active_businessfn.

LOAD-OF-PROGRAM.

FORM get_config
               TABLES ft_input  STRUCTURE tab512
                      ft_output STRUCTURE tab512.

  CONSTANTS: lc_sep         TYPE c       VALUE '|',
             lc_export      TYPE char20  VALUE 'EXPORT',
             lc_busfunc     TYPE char20  VALUE 'Bfunction',
             lc_type        TYPE char4   VALUE 'Type',
             lc_reverse     TYPE char20  VALUE 'Reversible',
             lc_obselete    TYPE char20  VALUE 'Obselete',
             lc_component   TYPE char20  VALUE 'Component',
             lc_description TYPE char20  VALUE 'Description',
             lc_active      TYPE char20  VALUE 'Active',
             lc_head        TYPE char20  VALUE 'Businessfunctions',
* Begin of changes in V001
             lc_nodata      TYPE c VALUE 'No data found'      LENGTH 20,
             lc_inc_input   TYPE c VALUE 'Incorrect input'    LENGTH 20,
             lc_noinput     TYPE c VALUE 'No input given'     LENGTH 20.
*   End of changes in V001



  DATA:ls_output   TYPE tab512,
       lv_action   TYPE char8,
       ls_prefinal TYPE string,
* Begin of changes in V001
       ls_input    TYPE tab512,
       lv_langu    TYPE sy-langu,
       lv_active   TYPE c LENGTH 1,
       ls_activeb2 TYPE sfw_active_b2,
       ls_swfbft   TYPE sfw_bft,
       ls_bf       TYPE sfw_bf,
       lt_activeb2 TYPE STANDARD TABLE OF sfw_active_b2,
       lt_sfwbft   TYPE STANDARD TABLE OF sfw_bft,
       lt_bf       TYPE STANDARD TABLE OF sfw_bf.

  CLEAR: ls_output, ls_input, ls_prefinal, lv_active, lv_action,
  lv_langu, ls_activeb2, ls_swfbft, ls_bf.
  FREE: lt_activeb2, lt_sfwbft, lt_bf.
* End of changes in V001

  ls_output = lc_head.
  APPEND ls_output TO ft_output.
  CLEAR: ls_output.

  READ TABLE ft_input INTO ls_input INDEX 1.
* Begin of changes in V001
  IF sy-subrc NE 0.
    " No input given
    ls_output = lc_noinput.
    APPEND ls_output TO ft_output.
    CLEAR ls_output.
    RETURN.
  ENDIF.
* End of changes in V001
  lv_action = ls_input.

  lv_langu = sy-langu.

  CASE lv_action.

    WHEN lc_export.

      SELECT * FROM sfw_active_b2
      INTO TABLE lt_activeb2.

      SELECT * FROM sfw_bft
      INTO TABLE lt_sfwbft
      WHERE spras = lv_langu.

      SELECT * FROM sfw_bf
      INTO TABLE lt_bf.
* Begin of changes in V001
      IF sy-subrc NE 0.
        ls_output = lc_nodata.
        APPEND ls_output TO ft_output.
        CLEAR ls_output.
        RETURN.
      ENDIF.
* End of changes in V001
      CONCATENATE lc_busfunc     lc_sep
      lc_description lc_sep
      lc_component   lc_sep
      lc_type        lc_sep
      lc_reverse     lc_sep
      lc_obselete    lc_sep
      lc_active INTO ls_output.
      APPEND ls_output TO ft_output.
      CLEAR: ls_output.

      LOOP AT lt_bf INTO ls_bf.
        READ TABLE lt_activeb2 INTO ls_activeb2 WITH KEY
              version = 'A'
              bfunction = ls_bf-bfunction.
        IF sy-subrc EQ 0.
          lv_active = 'X'.
        ENDIF.
        READ TABLE lt_sfwbft INTO ls_swfbft WITH KEY
              bfunction = ls_bf-bfunction.

        CONCATENATE ls_bf-bfunction     lc_sep
        ls_swfbft-name80    lc_sep
        ls_bf-component     lc_sep
        ls_bf-type          lc_sep
        ls_bf-reversible    lc_sep
        ls_bf-obsolete      lc_sep
        lv_active INTO ls_prefinal.
        CONDENSE ls_prefinal.
        PERFORM end_null_check CHANGING ls_prefinal.
        ls_output = ls_prefinal.
        APPEND ls_output TO ft_output.
        CLEAR: ls_output, ls_bf, ls_activeb2, lv_active,ls_prefinal.
      ENDLOOP.

* Begin of changes in V001
    WHEN OTHERS.
      " Incorrect input
      ls_output = lc_inc_input.
      APPEND ls_output TO ft_output.
      CLEAR ls_output.
* End of changes in V001

  ENDCASE.
  PERFORM null_check TABLES  ft_output.
ENDFORM.

FORM end_null_check  CHANGING ls_string TYPE string.

  DATA lv_last_char TYPE char1.

  lv_last_char = substring( val = ls_string
  off = strlen( ls_string ) - 1
  len = 1 ).
  IF lv_last_char = '|'.
    CONCATENATE ls_string 'NULL'
    INTO ls_string.
  ENDIF.

ENDFORM.

FORM null_check  TABLES   lt_table TYPE table.

  DO .
    REPLACE ALL OCCURRENCES OF SUBSTRING '||'
    IN TABLE lt_table WITH '|NULL|'.
    FIND '||' IN TABLE lt_table.
    IF sy-subrc <> 0.
      EXIT .
    ENDIF.
  ENDDO.

ENDFORM.