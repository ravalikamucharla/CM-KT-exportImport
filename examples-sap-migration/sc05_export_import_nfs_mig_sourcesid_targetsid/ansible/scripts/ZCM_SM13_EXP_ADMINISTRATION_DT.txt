*---------------------------------------------------------------------*
* Program Name        :    ZCM_SM13_EXP_ADMINISTRATION_DT             *
* Title               :    Capture Administration details of SM13     *
* Purpose             :    This report is for capturing administration*
*                          details of SM13.                           *
*---------------------------------------------------------------------*
* Related Transaction OR Standard Program References                  *
* SM13                                                                *
*---------------------------------------------------------------------*
* Tables              :   SELECT    UPDATE      INSERT      DELETE    *
* XXXXX                     X                                         *
*---------------------------------------------------------------------*
* Program Change History                                              *
*---------------------------------------------------------------------*
*Date        Version   Author       TR#/Local     Description         *
*---------------------------------------------------------------------*
*09-22-2020  Initial   Ruchir Kamble   Local  Capture administration  *
*                                             details of SM13.        *
*07-05-2021  V001      Soumya Ray      Local  Capture Server, Server  *
*                                             group & parameter detail*
*---------------------------------------------------------------------*

" This code is referred from Standard Report SAPMSM14
" Module show_general

REPORT zcm_sm13_exp_administration_dt.

LOAD-OF-PROGRAM.

FORM get_config
TABLES lt_input  STRUCTURE tab512
  lt_output STRUCTURE tab512.

* Begin of changes in V001
  TYPES: BEGIN OF lty_infoline,
    vb_active    TYPE vbstat1,
    autostop     TYPE vbstat1,
    server       TYPE msname,
    vb_user      TYPE ubname,
    TIME         TYPE udtime,
    vbdelete     TYPE vbstat1,
    vbv2start    TYPE vbstat1,
    vb_info      TYPE thraw1,
    infotext(50) TYPE C,
  END OF lty_infoline,
  BEGIN OF lty_parameters,
    name    TYPE pfeparname,
    old     TYPE pfepvalue,
    NEW     TYPE pfepvalue,
    DEFAULT TYPE pfepvalue,
  END OF lty_parameters,

  BEGIN OF lty_groups,
    GROUP  TYPE pfeinstgrp,
    sid    TYPE pfedbinst,
    vbhdr  TYPE tabname,
    vbmod  TYPE tabname,
    vbdata TYPE tabname,
  END OF lty_groups,

  BEGIN OF lty_allserver,
    servername TYPE  vbinfo-server,
    typ(20)    TYPE C,
    status(20) TYPE C,
  END OF lty_allserver.
* End of changes in V001

  CONSTANTS: lc_getinfo(1)     TYPE X VALUE 17,
  lc_sep            TYPE C VALUE '|'            LENGTH 1,
  lc_export         TYPE C VALUE 'EXPORT'       LENGTH 6,
  lc_txt30          TYPE C VALUE 'Deactivate'   LENGTH 12,
  lc_txt31          TYPE C VALUE 'Activate'     LENGTH 10,
  lc_txt01          TYPE C VALUE
  'Update is active'                            LENGTH 20,
  lc_txt02          TYPE C VALUE
  'Update deactivated by system'                LENGTH 40,
  lc_txt03          TYPE C VALUE
  'Updating by user deactivated'                LENGTH 40,
  lc_title          TYPE C VALUE
  'Update Program Administration'               LENGTH 45,
  lc_err_msg        TYPE C VALUE
  'UnabletoreadUpdateStatus'                    LENGTH 45,
  lc_status         TYPE C VALUE  'Status'      LENGTH 10,
  lc_msg            TYPE C VALUE  'Message'     LENGTH 10,
  lc_ninput         TYPE C VALUE
  'No input passed'                             LENGTH 20,
  lc_naction        TYPE C VALUE
  'Incorrect input'                             LENGTH 20,  "+V002
*   Begin of changes in V001
  lc_getdis_info(1) TYPE X VALUE 18,
  lc_null           TYPE C VALUE 'NULL'         LENGTH 4,
  lc_x              TYPE C VALUE 'X'            LENGTH 1,
  lc_1              TYPE C VALUE '1'            LENGTH 1,
  lc_2              TYPE C VALUE '2'            LENGTH 1,
  lc_3              TYPE C VALUE '3'            LENGTH 1,
  lc_8              TYPE C VALUE '8'            LENGTH 1,
  lc_6              TYPE C VALUE '6'            LENGTH 1,
  lc_18             TYPE C VALUE '18'           LENGTH 2,
  lc_99             TYPE C VALUE '99'           LENGTH 2,
  lc_010            TYPE C VALUE 'Active'       LENGTH 6,
  lc_013            TYPE C VALUE
  'High Workload'                               LENGTH 13,
  lc_012            TYPE C VALUE 'Deactivated'  LENGTH 11,
  lc_011            TYPE C VALUE 'Not running'  LENGTH 11,
  lc_020            TYPE C VALUE 'UPD1'         LENGTH 4,
  lc_021            TYPE C VALUE 'UPD2'         LENGTH 4,
  lc_022            TYPE C VALUE 'UPD1,UPD2'    LENGTH 9,
  lc_nserver        TYPE C VALUE
  'List of servers not received'                LENGTH 30,
  lc_server         TYPE C VALUE 'Server'       LENGTH 6,
  lc_languages      TYPE C VALUE 'Languages'    LENGTH 9,
  lc_servername     TYPE C VALUE 'Servername'   LENGTH 10,
  lc_type           TYPE C VALUE 'Type'         LENGTH 4,
  lc_v1             TYPE C VALUE 'V1'           LENGTH 2,
  lc_v2             TYPE C VALUE 'V2'           LENGTH 2,
  lc_rdisp          TYPE C VALUE 'rdisp/'       LENGTH 6,
  lc_rdispvb        TYPE C VALUE 'rdisp/vb'     LENGTH 8,
  lc_rdispup        TYPE C VALUE 'rdisp/up'     LENGTH 8,
  lc_rdispauto      TYPE C VALUE
  'rdisp/auto_vb_stop'                          LENGTH 18,
  lc_parameter      TYPE C VALUE 'Parameter'    LENGTH 9,
  lc_paramname      TYPE C VALUE 'Param.name'   LENGTH 10,
  lc_currval        TYPE C VALUE 'Currentvalue' LENGTH 12,
  lc_newval         TYPE C VALUE 'Newvalue'     LENGTH 8,
  lc_default        TYPE C VALUE 'Default'      LENGTH 7,
  lc_nparameter     TYPE C VALUE
  'Parameter not maintained'                    LENGTH 30,
  lc_servgrp        TYPE C VALUE
  'Server groups'                               LENGTH 13,
  lc_vbhdr          TYPE C VALUE 'VBHDR'        LENGTH 5,
  lc_vbmod          TYPE C VALUE 'VBMOD'        LENGTH 5,
  lc_vbdata         TYPE C VALUE 'VBDATA'       LENGTH 6,
  lc_sid            TYPE C VALUE 'SID'          LENGTH 3,
  lc_group          TYPE C VALUE 'Group'        LENGTH 5,
  lc_nservgrp       TYPE C VALUE
  'No server group present'                     LENGTH 30,
  lc_dia            TYPE C VALUE 'DIA'          LENGTH 3,
  lc_upd            TYPE C VALUE 'UPD'          LENGTH 3,
  lc_enq            TYPE C VALUE 'ENQ'          LENGTH 3,
  lc_btc            TYPE C VALUE 'BTC'          LENGTH 3,
  lc_spo            TYPE C VALUE 'SPO'          LENGTH 3,
  lc_up2            TYPE C VALUE 'UP2'          LENGTH 3,
  lc_vb             TYPE X VALUE 2,
  lc_enq1           TYPE X VALUE 4,
  lc_btc1           TYPE X VALUE 8,
  lc_spo1           TYPE X VALUE 16,
  lc_vb2            TYPE X VALUE 32,
  lc_nserverasg     TYPE C VALUE
  'Server not assigned'                         LENGTH 20,
  lc_ty             TYPE C VALUE 'Ty.'          LENGTH 3,
  lc_servingrp      TYPE C VALUE
  'Server in group'                             LENGTH 20,
  lc_ngrpserver     TYPE C VALUE
  'Server not assigned to group'                LENGTH 30,
  lc_nservassg      TYPE C VALUE
  'No unassigned server'                        LENGTH 20.
*   End of changes in V001
  DATA:ls_input         TYPE tab512,
        ls_output        TYPE tab512,
        lv_action        TYPE char20,
        lv_activate(20)  TYPE C,
*  Begin of changes in V001
        ls_infoline      TYPE lty_infoline,
        ls_info          TYPE vbinfo,
        lt_servers       TYPE STANDARD TABLE OF vbdisp,
        ls_servers       TYPE vbdisp,
        lv_v1idx         TYPE sy-INDEX,
        lv_v2idx         TYPE sy-INDEX,
        lt_msglist       TYPE STANDARD TABLE OF msxxlist,
        ls_msglist       TYPE msxxlist,
        lv_statustext    TYPE string,
        lv_typetext      TYPE string,
        lv_langutext(80) TYPE C,
        lv_separator(1)  TYPE C,
        lv_language(80)  TYPE C,
        lv_dbgroup(80)   TYPE C,
        lv_rqv1cnt(5)    TYPE C,
        lv_rqv2cnt(5)    TYPE C,
        lt_subparam      TYPE spfl_parameter_list_t,
        ls_subparam      TYPE spfl_parameter_list,
        lv_parlength     TYPE I,
        lv_rc            TYPE I,
        lv_meta          TYPE spfl_parameter_metadata,
        lv_metarc        TYPE I,
        lv_oldvalue      TYPE string,
        ls_parameters    TYPE lty_parameters,
        ls_tnmap         TYPE tnmap,
        ls_asgrp         TYPE asgrp,
        ls_groups        TYPE lty_groups,
        ls_instance      TYPE spfid,
        ls_allserver     TYPE lty_allserver,
        ls_groupserver   TYPE apsrv,
        lt_allserver     TYPE STANDARD TABLE OF lty_allserver,
        lt_newserver     TYPE STANDARD TABLE OF lty_allserver,
        lt_tnmap         TYPE STANDARD TABLE OF tnmap,
        lt_asgrp         TYPE STANDARD TABLE OF asgrp,
        lt_batbl         TYPE STANDARD TABLE OF spfba,
        lt_instances     TYPE STANDARD TABLE OF spfid,
        lt_groupserver   TYPE STANDARD TABLE OF apsrv,
        lv_servername    TYPE pfeinstnam,
        lv_index         TYPE sy-tabix.
*  End of changes in V001

  " Adding title to the output
  ls_output = lc_title.
  APPEND ls_output TO lt_output.
  CLEAR ls_output.

  READ TABLE lt_input INTO ls_input INDEX 1.
  IF sy-subrc NE 0.
    ls_output = lc_ninput.
    APPEND ls_output TO lt_output.
    CLEAR ls_output.
    RETURN.
  ENDIF.
  lv_action = ls_input.       " Action

  CASE lv_action.

  WHEN lc_export.      " If action is Export
*//-----------------------Update-------------------------//*
    CLEAR: ls_info, ls_infoline.

    CALL 'ThVBCall'
    ID 'OPCODE' FIELD lc_getinfo
    ID 'VBINFO' FIELD ls_info.

    IF sy-subrc = 0.
      MOVE-CORRESPONDING ls_info TO ls_infoline.

      IF ls_infoline-vb_active = 1.
        ls_infoline-infotext = lc_txt01.
        lv_activate = lc_txt31.
      ELSE.
        IF ls_infoline-autostop = 1.
          ls_infoline-infotext = lc_txt02.
        ELSE.
          ls_infoline-infotext = lc_txt03.
        ENDIF.
        lv_activate = lc_txt30.
      ENDIF.
    ENDIF.


    IF ls_infoline-infotext IS NOT INITIAL.
      " Adding table heading to the output
      CONCATENATE lc_status lc_sep
      lc_msg INTO ls_output.
      APPEND ls_output TO lt_output.
      CLEAR ls_output.
      " Adding table data to the output
      CONCATENATE lv_activate lc_sep
      ls_infoline-infotext  INTO ls_output.
      APPEND ls_output TO lt_output.

    ELSE.
      " Unable to read Update Status
      ls_output = lc_err_msg.
      APPEND ls_output TO lt_output.

    ENDIF.
    CLEAR : ls_output, lv_activate, ls_info, ls_infoline.
*//----------------------------------------------------------//*
*  Begin of changes in V001
*//---------------------Server------------------------------//*
    "Standard Program SAPMSM14 & subroutine 'load_servers'
    APPEND ls_output TO lt_output. " Blank line
    "Heading of server
    ls_output = lc_server.
    APPEND ls_output TO lt_output.

    CLEAR: ls_output, lv_v1idx, lv_v2idx, ls_servers, lv_typetext,
    lv_langutext, lv_separator, lv_rqv1cnt, lv_rqv2cnt.
    FREE: lt_servers, lt_msglist.

    " To get the server and its details
    CALL 'ThVBCall' ID 'OPCODE' FIELD lc_getdis_info
    ID 'VBDISP' FIELD lt_servers
    ID 'V1_IDX' FIELD lv_v1idx
    ID 'V2_IDX' FIELD lv_v2idx.

    IF lt_servers IS NOT INITIAL.
      "FM to get the server list
      CALL FUNCTION 'TH_SERVER_LIST'
      TABLES
        list   = lt_msglist
      EXCEPTIONS
        OTHERS = 1.

      IF sy-subrc EQ 0.
        " Coloumn headings
        CONCATENATE lc_servername lc_status lc_languages lc_type
        lc_v1 lc_v2 INTO ls_output SEPARATED BY lc_sep.
        APPEND ls_output TO lt_output.
        CLEAR ls_output.

        LOOP AT lt_servers INTO ls_servers.
          "To get status text
          IF ls_servers-state = lc_2.
            lv_statustext = lc_010. "Active
        ELSEIF ls_servers-state = lc_99.
            lv_statustext = lc_013. "High Workload
          ELSE.
            READ TABLE lt_msglist INTO ls_msglist
            WITH KEY name = ls_servers-server.
            IF sy-subrc = 0.
              lv_statustext = lc_012. "Deactivated
            ELSE.
              lv_statustext = lc_011. "Not running
            ENDIF.
          ENDIF.
          " To get type text
          CASE ls_servers-TYPE.
          WHEN lc_1.
            lv_typetext = lc_020. "UPD1
          WHEN lc_2.
            lv_typetext = lc_021. "UPD2
          WHEN lc_3.
            lv_typetext = lc_022. "UPD1,UPD2
          ENDCASE.
          "Languages detail
          lv_langutext = ls_servers-context.
          lv_separator = lv_langutext(1).
          SHIFT lv_langutext LEFT.
          SPLIT lv_langutext AT lv_separator INTO lv_language
          lv_dbgroup IN CHARACTER MODE.

          IF lv_dbgroup IS INITIAL.
            lv_langutext  = lv_language.
          ELSE.
            lv_langutext = |{ lv_language } ({ lv_dbgroup })|.
          ENDIF.
          lv_rqv1cnt = ls_servers-rq_v1_cnt.
          lv_rqv2cnt = ls_servers-rq_v2_cnt.
          CONDENSE lv_rqv1cnt.
          CONDENSE lv_rqv2cnt.
          CONCATENATE ls_servers-server lv_statustext lv_langutext
          lv_typetext lv_rqv1cnt lv_rqv2cnt
          INTO ls_output SEPARATED BY lc_sep.
          APPEND ls_output TO lt_output.

          CLEAR: ls_output, ls_servers, lv_statustext, lv_typetext,
          lv_langutext, lv_separator, lv_dbgroup, lv_rqv1cnt,
          lv_rqv2cnt.
        ENDLOOP.
      ELSE.
        "List of servers not received
        ls_output = lc_nserver.
        APPEND ls_output TO lt_output.
        CLEAR ls_output.
        FREE lt_servers.
      ENDIF.
    ELSE.
      "List of servers not received
      ls_output = lc_nserver.
      APPEND ls_output TO lt_output.
      CLEAR ls_output.
      FREE lt_servers.
    ENDIF.
*//--------------------------------------------------------//*
*//-------------Server Group-------------------------------//*
    "Standard Program SAPMSM14 & subroutine 'load_groups'
    APPEND ls_output TO lt_output.
    "Heading Server group
    ls_output = lc_servgrp.
    APPEND ls_output TO lt_output.

    CLEAR: ls_output, ls_asgrp, ls_tnmap, ls_groups, ls_allserver,
    ls_instance, ls_groupserver, lv_index.
    FREE: lt_asgrp, lt_tnmap, lt_groupserver, lt_batbl,
    lt_instances, lt_allserver, lt_newserver.

    "Fetch the server group and db instance
    SELECT * FROM asgrp INTO TABLE lt_asgrp.
    SORT lt_asgrp BY servergrp ASCENDING.
    IF lt_asgrp IS NOT INITIAL.
      "Fetch Group of SAP Instances with table name
      SELECT * FROM tnmap INTO TABLE lt_tnmap
      FOR ALL ENTRIES IN lt_asgrp
      WHERE  servergrp = lt_asgrp-servergrp.
      SORT lt_tnmap BY servergrp ASCENDING.
      IF sy-subrc EQ 0.
        "Coloumn heading
        CONCATENATE lc_group lc_sid lc_vbhdr lc_vbmod lc_vbdata
        INTO ls_output SEPARATED BY lc_sep.
        APPEND ls_output TO lt_output.
        CLEAR ls_output.
        "Sort both tables
        SORT lt_asgrp BY servergrp ASCENDING.
        SORT lt_tnmap BY servergrp ASCENDING.

        LOOP AT lt_asgrp INTO ls_asgrp.
          ls_groups-GROUP = ls_asgrp-servergrp.
          ls_groups-sid   = ls_asgrp-dbinstance.
          READ TABLE lt_tnmap  INTO ls_tnmap WITH KEY
          servergrp = ls_asgrp-servergrp.
          IF sy-subrc EQ 0.
            lv_index = sy-tabix.
            CLEAR ls_tnmap.
            LOOP AT lt_tnmap INTO ls_tnmap FROM lv_index.
              IF ls_tnmap-servergrp <> ls_asgrp-servergrp.
                EXIT.
              ENDIF.
              CASE ls_tnmap-tabname.
              WHEN lc_vbhdr."VBHDR
                ls_groups-vbhdr = ls_tnmap-tabname.
              WHEN lc_vbmod. "VBMOD
                ls_groups-vbmod = ls_tnmap-tabname.
              WHEN lc_vbdata. "VBDATA
                ls_groups-vbdata = ls_tnmap-tabname.
              ENDCASE.
              CLEAR ls_tnmap.
            ENDLOOP.
            CLEAR lv_index.
          ENDIF.
          IF ls_groups-vbdata EQ ''.
            ls_groups-vbdata = lc_null.
          ENDIF.
          CONCATENATE ls_groups-GROUP ls_groups-sid ls_groups-vbhdr
          ls_groups-vbmod ls_groups-vbdata INTO ls_output
          SEPARATED BY lc_sep. "Data
          APPEND ls_output TO lt_output.
          CLEAR: ls_output, ls_groups, ls_asgrp.
        ENDLOOP.
      ENDIF.
    ELSE.
      ls_output = lc_nservgrp."No server group present
      APPEND ls_output TO lt_output.
      CLEAR ls_output.
    ENDIF.
    " To fill the unassigned servers first then the assigned
    SELECT * FROM apsrv INTO TABLE lt_groupserver.

    " To get the servers known to the CCMS
    CALL FUNCTION 'RZL_GET_BA_LIST'
    EXPORTING
      with_inactive_instances = lc_x
    TABLES
      ba_tbl                  = lt_batbl
      id_tbl                  = lt_instances.

    " Now build ALLSERVER and NEWSERVER from all three lists
    "first from the list of active servers
    LOOP AT lt_msglist INTO ls_msglist.
      ls_allserver-servername = ls_msglist-name.
      "To get the server Type text
      ls_allserver-typ = lc_dia.
      IF ls_msglist-msgtypes O lc_vb.
        CONCATENATE ls_allserver-typ lc_upd INTO ls_allserver-typ
        SEPARATED BY space.
      ENDIF.
      IF ls_msglist-msgtypes O lc_enq1.
        CONCATENATE ls_allserver-typ lc_enq INTO ls_allserver-typ
        SEPARATED BY space.
      ENDIF.
      IF ls_msglist-msgtypes O lc_btc1.
        CONCATENATE ls_allserver-typ lc_btc INTO ls_allserver-typ
        SEPARATED BY space.
      ENDIF.
      IF ls_msglist-msgtypes O lc_spo1.
        CONCATENATE ls_allserver-typ lc_spo INTO ls_allserver-typ
        SEPARATED BY space.
      ENDIF.
      IF ls_msglist-msgtypes O lc_vb2.
        CONCATENATE ls_allserver-typ lc_up2 INTO ls_allserver-typ
        SEPARATED BY space.
      ENDIF.
      ls_allserver-status = lc_010."Active
      APPEND ls_allserver TO lt_allserver.
      "if the server is not yet in any group, transfer to NEWSERVER
      lv_servername = ls_msglist-name.
      READ TABLE lt_groupserver INTO ls_groupserver
      WITH KEY servername = lv_servername.
      IF sy-subrc <> 0.
        APPEND ls_allserver TO lt_newserver.
      ENDIF.
      CLEAR: ls_allserver, ls_msglist, ls_groupserver, lv_servername.
    ENDLOOP.

    "To transfer the servers in allservers that are in a group,
    "but are not active
    LOOP AT lt_groupserver INTO ls_groupserver.
      lv_servername = ls_groupserver-servername.
      READ TABLE lt_allserver INTO ls_allserver
      WITH KEY servername = lv_servername.
      "ls_groupserver-servername.
      IF sy-subrc <> 0.
        ls_allserver-servername = ls_groupserver-servername.
        ls_allserver-typ = ''.
        ls_allserver-status = lc_011. "Not running
        APPEND ls_allserver TO lt_allserver.
      ENDIF.
      CLEAR: ls_allserver, ls_groupserver, lv_servername.
    ENDLOOP.

    "To get the servers from the CCMS that are neither active
    "nor one assigned to a group
    LOOP AT lt_instances INTO ls_instance.
      READ TABLE lt_allserver INTO ls_allserver
      WITH KEY servername = ls_instance-apserver.
      IF sy-subrc <> 0.
        ls_allserver-servername = ls_instance-apserver.
        ls_allserver-typ = ''.
        ls_allserver-status = lc_011."Not running
        APPEND ls_allserver TO lt_allserver.
        APPEND ls_allserver TO lt_newserver.
      ENDIF.
      CLEAR: ls_allserver, ls_instance.
    ENDLOOP.

    "List of Servers in Groups
    CLEAR ls_output.
    APPEND ls_output TO lt_output.
    ls_output = lc_servingrp. "Heading
    APPEND ls_output TO lt_output.
    CLEAR ls_output.
    IF lt_groupserver IS NOT INITIAL.
      "Coloumn heading
      CONCATENATE lc_group lc_server lc_type lc_status
      INTO ls_output SEPARATED BY lc_sep.
      APPEND ls_output TO lt_output.
      CLEAR: ls_output, ls_groupserver, ls_allserver.

      LOOP AT lt_groupserver INTO ls_groupserver.

        READ TABLE lt_allserver INTO ls_allserver WITH KEY
        servername = ls_groupserver-servername.
        IF sy-subrc <> 0.
          ls_allserver-typ = ''.
          ls_allserver-status = lc_011."Not Running
        ENDIF.
        IF ls_allserver-status EQ ''.
          ls_allserver-status = lc_null.
        ENDIF.
        CONCATENATE ls_groupserver-servergrp
        ls_groupserver-servername ls_allserver-typ
        ls_allserver-status INTO ls_output SEPARATED BY lc_sep.
        APPEND ls_output TO lt_output.

        CLEAR: ls_groupserver, ls_allserver, ls_output.
      ENDLOOP.

    ELSE.
      "Server not assigned to group
      ls_output = lc_ngrpserver.
      APPEND ls_output TO lt_output.
      CLEAR ls_output.
    ENDIF.

    "List of Servers not assigned
    APPEND ls_output TO lt_output.
    ls_output = lc_nserverasg . "Heading
    APPEND ls_output TO lt_output.
    CLEAR ls_output.
    IF lt_newserver IS NOT INITIAL.
      CONCATENATE lc_server lc_ty lc_status INTO ls_output
      SEPARATED BY lc_sep. "Coloumn heading
      APPEND ls_output TO lt_output.
      CLEAR: ls_output, ls_allserver.

      LOOP AT lt_newserver INTO ls_allserver.
        IF ls_allserver-status EQ ''.
          ls_allserver-status = lc_null.
        ENDIF.
        CONCATENATE ls_allserver-servername ls_allserver-typ
        ls_allserver-status INTO ls_output
        SEPARATED BY lc_sep.
        APPEND ls_output TO lt_output.
        CLEAR: ls_output, ls_allserver.
      ENDLOOP.
    ELSE.
      "No unassigned server
      ls_output = lc_nservassg.
      APPEND ls_output TO lt_output.
      CLEAR ls_output.
    ENDIF.

*//--------------------------------------------------------//*
*//-------------Parameter----------------------------------//*
    "Standard Program SAPMSM14 & subroutine 'load_parameters'
    APPEND ls_output TO lt_output. " Blank line
    "Heading of Parameter
    ls_output = lc_parameter.
    APPEND ls_output TO lt_output.

    CLEAR: ls_output, lv_rc, lv_parlength, ls_subparam,
    ls_parameters, lv_metarc, lv_oldvalue.
    FREE: lt_subparam.

    lv_rc = cl_spfl_profile_parameter=>get_all_parameter(
    IMPORTING
      parameter_sub = lt_subparam ).
    IF lv_rc EQ 0.

      CONCATENATE lc_paramname lc_currval lc_newval lc_default
      INTO ls_output SEPARATED BY lc_sep.
      APPEND ls_output TO lt_output.
      CLEAR ls_output. " coloumn heading for parameter

      LOOP AT lt_subparam INTO ls_subparam.
        lv_parlength = STRLEN( ls_subparam-name ).
        IF ( lv_parlength >= lc_6 AND
        ls_subparam-name(6) = lc_rdisp ).
          IF ( lv_parlength >= lc_8 AND
          ls_subparam-name(8) = lc_rdispvb OR
          lv_parlength >= lc_8 AND
          ls_subparam-name(8) = lc_rdispup OR
          lv_parlength >= lc_18 AND
          ls_subparam-name(18) = lc_rdispauto ).

            ls_parameters-name = ls_subparam-name.
            ls_parameters-old = ls_subparam-user_value.
            ls_parameters-NEW = ls_subparam-user_value.
            ls_parameters-DEFAULT = ls_subparam-default_value.

            lv_metarc = cl_spfl_profile_parameter=>get_metadata(
            EXPORTING
              name = ls_subparam-name
            IMPORTING
              metadata = lv_meta ).
            IF lv_metarc = 0
            AND lv_meta-is_dynamic = lc_1.
              lv_rc = cl_spfl_profile_parameter=>get_value(
              EXPORTING
                name = ls_subparam-name
              IMPORTING
                VALUE = lv_oldvalue ).
              ls_parameters-old = lv_oldvalue.
              ls_parameters-NEW = ls_parameters-old.
            ENDIF.

            IF ls_parameters-DEFAULT EQ ''.
              ls_parameters-DEFAULT = lc_null.
            ENDIF.

            CONCATENATE ls_parameters-name ls_parameters-old
            ls_parameters-NEW ls_parameters-DEFAULT INTO ls_output
            SEPARATED BY lc_sep. "Data
            APPEND ls_output TO lt_output.
            CLEAR ls_output.
          ENDIF.
        ENDIF.

        CLEAR: ls_parameters, ls_subparam, lv_rc, lv_meta,
        lv_metarc, lv_oldvalue, ls_output.
      ENDLOOP.
    ELSE.
      "Parameter not maintained
      ls_output = lc_nparameter.
      APPEND ls_output TO lt_output.
      CLEAR ls_output.
    ENDIF.
*//-------------------------------------------------------//*
    "To replace middle blank values with null
    DO .
      REPLACE ALL OCCURRENCES OF SUBSTRING '||'
      IN TABLE lt_output WITH '|NULL|'.
      FIND '||' IN TABLE lt_output.
      IF sy-subrc <> 0.
        EXIT .
      ENDIF.
    ENDDO.

    FREE: lt_subparam, lt_groupserver, lt_allserver, lt_msglist,
    lt_newserver, lt_servers, lt_asgrp, lt_tnmap, lt_batbl,
    lt_instances.

  WHEN OTHERS.
    "Action not supported
    ls_output = lc_naction.
    APPEND ls_output TO lt_output.
    CLEAR ls_output.
  ENDCASE.
* End of changes in V001
ENDFORM.