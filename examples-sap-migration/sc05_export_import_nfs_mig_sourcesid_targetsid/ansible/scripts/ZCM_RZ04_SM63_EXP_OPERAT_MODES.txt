*---------------------------------------------------------------------*
* Program Name        :   ZCM_RZ04_SM63_EXP_OPERAT_MODES              *
* Title               :   System operating modes and instances Export *
*                     :   & Ope type sets & exception op.modes export *
* Purpose             :   This report is used to export system        *
*                     :   operating modes and instances from tcode    *
*                     :   RZ04 and operation type sets and exception  *
*                     :   operation modes from tcode SM63             *
*---------------------------------------------------------------------*
* Related Transaction OR Standard Program References                  *
* RZ04 and SM63                                                       *
*---------------------------------------------------------------------*
* Tables              :   SELECT    UPDATE      INSERT      DELETE    *
*                     :     X                                         *
*---------------------------------------------------------------------*
* Program Change History                                              *
*---------------------------------------------------------------------*
*Date        Version   Author       TR#/Local     Description         *
*---------------------------------------------------------------------*
*08-19-2020  Initial  Ashwini K P   Local      To export operating mo-*
*                                             -des & exception operat-*
*                                             -ion modes              *
*08-29-2022   V001    Ashwini K P   Local     To add column Max Confi-*
*                                             -gurable                *
*09-13-2022   V002    Soumya Ray    Local     To pass 'No data found' *
*                                             in case no data found in*
*                                             system                  *
*---------------------------------------------------------------------*
REPORT zcm_rz04_sm63_exp_operat_modes.

*&---------------------------------------------------------------------*
*&      Form  get_config
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->FT_INPUT   text
*      -->FT_OUTPUT  text
*----------------------------------------------------------------------*
FORM get_config
               TABLES ft_input  STRUCTURE tab512
                      ft_output STRUCTURE tab512.

  CONSTANTS: lc_sep       TYPE c      VALUE '|',
             lc_act_exp   TYPE char6  VALUE 'EXPORT',
             lc_mode      TYPE char20 VALUE 'Operation mode',
             lc_sys       TYPE char20 VALUE 'SAP system',
             lc_typ       TYPE char20 VALUE 'Opera mode type',
             lc_alloc     TYPE char50 VALUE 'Allocation of instances',
             lc_desc      TYPE char20 VALUE 'Description',
             lc_ins       TYPE char20 VALUE 'Instance name',
             lc_host      TYPE char20 VALUE 'Host name',
             lc_ins_typ   TYPE char20 VALUE 'Instance type',
             lc_sys_no    TYPE char20 VALUE 'SAP system no',
             lc_server    TYPE char20 VALUE 'Appl server',
             lc_status    TYPE char20 VALUE 'Status',
             lc_dia       TYPE char50 VALUE 'Dialog work pro',
             lc_upd       TYPE char50 VALUE 'Update work pro',
             lc_back      TYPE char50 VALUE 'Background work pro',
             lc_enq       TYPE char50 VALUE 'Enqueue work pro',
             lc_spool     TYPE char50 VALUE 'Spool work pro',
             lc_total     TYPE char80 VALUE 'Total work pro',
             lc_free      TYPE char20 VALUE 'Free work pro',
             lc_online    TYPE char20 VALUE 'Ins online',
             lc_update    TYPE char20 VALUE 'Ins update',
             lc_bckgrd    TYPE char20 VALUE 'Ins background',
             lc_lock      TYPE char20 VALUE 'Ins Lock',
             lc_spooler   TYPE char20 VALUE 'Ins spooler',
             lc_msg_srv   TYPE char20 VALUE 'Ins msg server',
             lc_gateway   TYPE char20 VALUE 'Ins gateway',
             lc_ope_sys   TYPE char20 VALUE 'Operating System',
             lc_v2_upd    TYPE char50 VALUE 'V2 update work pro',
             lc_dialog    TYPE char20 VALUE 'Ins dialog',
             lc_dialog1   TYPE char20 VALUE 'Ins dialog1',
             lc_v2_upd1   TYPE char20 VALUE 'Ins v2 update',
             lc_online1   TYPE char20 VALUE 'Ins serv online',
             lc_online2   TYPE char20 VALUE 'Ins serv online1',
             lc_profile   TYPE char20 VALUE 'Profile name',
             lc_profile1  TYPE char20 VALUE 'Profile name1',
             lc_reserved  TYPE char50 VALUE 'Reserved work pro',
             lc_tot_spoo  TYPE char50 VALUE 'Total(except spool)',
             lc_dynamic   TYPE char20 VALUE 'Dynamic WP',
             lc_set_name  TYPE char50 VALUE 'Opera mode set',
             lc_srt_date  TYPE char50 VALUE 'Start date',
             lc_srt_time  TYPE char50 VALUE 'Start time',
             lc_end_date  TYPE char50 VALUE 'End date',
             lc_end_time  TYPE char50 VALUE 'End time',
             lc_targ      TYPE char50 VALUE
             'Target for ope mode switch',
             lc_id        TYPE char50 VALUE 'Exception mode ID',
             lc_msg1      TYPE char100 VALUE
             'List of operation type sets and exception op. modes',
             lc_config    TYPE char50 VALUE 'Max work pro', " +V001
* Begin of changes in V002
             lc_msgtitle  TYPE c VALUE 'Messagetitle'        LENGTH 20,
             lc_inc_input TYPE c VALUE 'Incorrect input'     LENGTH 20,
             lc_noinput   TYPE c VALUE 'No input given'      LENGTH 20,
             lc_msg       TYPE c VALUE 'No data found'       LENGTH 20.
*  End of changes in V001

  TYPES: BEGIN OF lty_btcomset,
    setname   TYPE char16,
    startdate TYPE char8,
    starttime TYPE char6,
    enddate   TYPE char8,
    endtime   TYPE char6,
    modename  TYPE char20,
    target    TYPE char32,
    settype   TYPE char4,
  END OF lty_btcomset.

  DATA: ls_input        TYPE tab512,
        ls_output       TYPE tab512,
        lv_action       TYPE char8,
        lt_spfba        TYPE TABLE OF spfba,
        lt_spfid        TYPE TABLE OF spfid,
        lt_btcomset_chr TYPE STANDARD TABLE OF lty_btcomset,
        ls_btcomset_chr TYPE lty_btcomset,
* Begin of changes in V002
        lt_btcomset     TYPE STANDARD TABLE OF btcomset.

  FIELD-SYMBOLS: <fs_btcomset>     TYPE btcomset,
  <fs_spfid>        TYPE spfid,
  <fs_spfba>        TYPE spfba,
  <fs_btcomset_chr> TYPE lty_btcomset,
  <field>           TYPE any.

  FREE: lt_btcomset, lt_btcomset_chr, lt_spfba, lt_spfid.
* End of changes in V002

  CLEAR: ls_input,
  lv_action.

* Begin of changes in V002
  ls_output = lc_msgtitle.
  APPEND ls_output TO ft_output.
  CLEAR ls_output.
* End of changes in V002

  " Read input values from Python/Ansibel
  READ TABLE ft_input INTO ls_input INDEX 1.
* Begin of changes in V002
  IF sy-subrc NE 0.
    " No input given
    ls_output = lc_noinput.
    APPEND ls_output TO ft_output.
    CLEAR ls_output.
    RETURN.
  ENDIF.
* End of changes in V002
  lv_action = ls_input.

  CASE lv_action.

    WHEN lc_act_exp. "EXPORT
      FREE: ft_output. "+V002

* Under the pre-migration activities, the CCMS operation
* modes and instances are fetched and exported to Python.

* CCMS: Operation modes and instances info

      REFRESH: lt_spfba[], lt_spfid[].

      CALL FUNCTION 'RZL_GET_BA_LIST'
        EXPORTING
          with_inactive_instances = 'X'
        TABLES
          ba_tbl                  = lt_spfba
          id_tbl                  = lt_spfid.

      IF  lt_spfba IS INITIAL
      AND lt_spfid IS INITIAL.
        " Title
        CLEAR: ls_output.
        ls_output = 'System operation modes table: TPFBA'.
        APPEND ls_output TO ft_output.

        CLEAR: ls_output.
        ls_output = lc_msg.
        APPEND ls_output TO ft_output.
        RETURN.
      ENDIF.

***First table TPFBA data is getting passed

      " Title
      CLEAR: ls_output.
      ls_output = 'System operation modes table: TPFBA'.
      APPEND ls_output TO ft_output.

      " Heading columns
      CLEAR: ls_output.
      CONCATENATE lc_mode     lc_sep
      lc_sys      lc_sep
      lc_typ      lc_sep
      lc_alloc    lc_sep
      lc_desc INTO ls_output.
      APPEND ls_output TO ft_output.

      " Data
      LOOP AT lt_spfba ASSIGNING <fs_spfba>.
        CONCATENATE <fs_spfba>-baname    lc_sep
        <fs_spfba>-sysname   lc_sep
        <fs_spfba>-type      lc_sep
        <fs_spfba>-instances lc_sep
        <fs_spfba>-txt INTO ls_output.
        CONDENSE ls_output.
        APPEND ls_output TO ft_output.
        CLEAR: ls_output.
      ENDLOOP.

      PERFORM null_check TABLES ft_output.

***Second table TPFID data is getting passed

      CLEAR: ls_output.
      ls_output = ' '.
      APPEND ls_output TO ft_output.

      " Title
      CLEAR: ls_output.
      ls_output = 'Description of SAP instances table: TPFID'.
      APPEND ls_output TO ft_output.

      " Heading columns
      CLEAR: ls_output.
      CONCATENATE lc_ins      lc_sep
      lc_host     lc_sep
      lc_ins_typ  lc_sep
      lc_mode     lc_sep
      lc_sys      lc_sep
      lc_sys_no   lc_sep
      lc_server   lc_sep
      lc_status   lc_sep
      lc_dia      lc_sep
      lc_upd      lc_sep
      lc_back     lc_sep
      lc_enq      lc_sep
      lc_spool    lc_sep
      lc_total    lc_sep
      lc_free     lc_sep
      lc_online   lc_sep
      lc_update   lc_sep
      lc_bckgrd   lc_sep
      lc_lock     lc_sep
      lc_spooler  lc_sep
      lc_msg_srv  lc_sep
      lc_gateway  lc_sep
      lc_ope_sys  lc_sep
      lc_v2_upd   lc_sep
      lc_dialog   lc_sep
      lc_dialog1  lc_sep
      lc_v2_upd1  lc_sep
      lc_online1  lc_sep
      lc_online2  lc_sep
      lc_profile  lc_sep
      lc_profile1 lc_sep
      lc_reserved lc_sep
      lc_tot_spoo lc_sep
      lc_config lc_sep " +V001
      lc_dynamic  INTO ls_output.
      APPEND ls_output TO ft_output.

      " Data
      LOOP AT lt_spfid ASSIGNING <fs_spfid>.
        CONCATENATE <fs_spfid>-instname   lc_sep
        <fs_spfid>-host       lc_sep
        <fs_spfid>-type       lc_sep
        <fs_spfid>-baname     lc_sep
        <fs_spfid>-sysname    lc_sep
        <fs_spfid>-sysnr      lc_sep
        <fs_spfid>-apserver   lc_sep
        <fs_spfid>-status     lc_sep
        <fs_spfid>-wpnodia    lc_sep
        <fs_spfid>-wpnovb     lc_sep
        <fs_spfid>-wpnobtc    lc_sep
        <fs_spfid>-wpnoenq    lc_sep
        <fs_spfid>-wpnospo    lc_sep
        <fs_spfid>-wpno       lc_sep
        <fs_spfid>-wpnobtca   lc_sep
        <fs_spfid>-srvdia     lc_sep
        <fs_spfid>-srvvb      lc_sep
        <fs_spfid>-srvbtc     lc_sep
        <fs_spfid>-srvenq     lc_sep
        <fs_spfid>-srvspo     lc_sep
        <fs_spfid>-srvmsg     lc_sep
        <fs_spfid>-srvgw      lc_sep
        <fs_spfid>-opsys      lc_sep
        <fs_spfid>-wpnov2     lc_sep
        <fs_spfid>-wpnores1   lc_sep
        <fs_spfid>-wpnores2   lc_sep
        <fs_spfid>-srvv2      lc_sep
        <fs_spfid>-srvres1    lc_sep
        <fs_spfid>-srvres2    lc_sep
        <fs_spfid>-pflinsname lc_sep
        <fs_spfid>-pflstrname lc_sep
        <fs_spfid>-wpnores    lc_sep
        <fs_spfid>-wpmaxno    lc_sep
        <fs_spfid>-wpmaxconfig lc_sep " +V001
        <fs_spfid>-srvdynwp  INTO ls_output.
        CONDENSE ls_output.
        APPEND ls_output TO ft_output.
        CLEAR: ls_output.
      ENDLOOP.

      PERFORM null_check TABLES ft_output.

      SELECT *
      FROM btcomset
      INTO TABLE lt_btcomset.
      IF sy-subrc NE 0.
        " Space
        ls_output = ' '.
        APPEND ls_output TO ft_output.

        " Title
        CLEAR: ls_output.
        ls_output = lc_msg1.
        APPEND ls_output TO ft_output.

        CLEAR: ls_output.
        ls_output = lc_msg. "+V002
        APPEND ls_output TO ft_output.
        RETURN.
      ENDIF.

*** Third table BTCOMSET data is getting passed

      ls_output = ' '.
      APPEND ls_output TO ft_output.

      CLEAR: ls_output.
      ls_output = lc_msg1.
      APPEND ls_output TO ft_output.

      " Heading columns
      CLEAR: ls_output.
      CONCATENATE lc_set_name  lc_sep
      lc_srt_date  lc_sep
      lc_srt_time  lc_sep
      lc_end_date  lc_sep
      lc_end_time  lc_sep
      lc_mode      lc_sep
      lc_targ      lc_sep
      lc_id  INTO ls_output.
      APPEND ls_output TO ft_output.

      " Convert the data to character format for display
      CLEAR: ls_btcomset_chr.
      LOOP AT lt_btcomset ASSIGNING <fs_btcomset>.
        MOVE-CORRESPONDING <fs_btcomset> TO ls_btcomset_chr.
        APPEND ls_btcomset_chr TO lt_btcomset_chr.
        CLEAR: ls_btcomset_chr.
      ENDLOOP.

      " Data
      SORT: lt_btcomset_chr BY setname.
      LOOP AT lt_btcomset_chr
      ASSIGNING <fs_btcomset_chr>.

        DO.

          ASSIGN COMPONENT sy-index
          OF STRUCTURE <fs_btcomset_chr>
          TO <field>.
          CONDENSE <field>.

          IF sy-subrc <> 0.
            EXIT.
          ENDIF.

          IF <field> IS INITIAL AND <field> NE '0'.
            <field> = 'NULL'.
          ENDIF.

          IF sy-index EQ 1.
            ls_output = <field>.
          ELSE.
            CONCATENATE ls_output <field> INTO ls_output
            SEPARATED BY lc_sep.
          ENDIF.

        ENDDO.

        CONDENSE ls_output.
        APPEND ls_output TO ft_output.
        CLEAR: ls_output.
      ENDLOOP.

    WHEN OTHERS.
* Begin of changes in V002
      " Incorrect input
      ls_output = lc_inc_input.
      APPEND ls_output TO ft_output.
      CLEAR ls_output.
* End of changes in V002
  ENDCASE.

ENDFORM.                    "get_config

FORM null_check TABLES lt_table TYPE table.

  DO .
    REPLACE ALL OCCURRENCES OF SUBSTRING '||'
    IN TABLE lt_table WITH '|NULL|'.
    FIND '||' IN TABLE lt_table.
    IF sy-subrc <> 0.
      EXIT .
    ENDIF.
  ENDDO.

ENDFORM.                    "null_check