*---------------------------------------------------------------------*
* Program Name        :   ZCM_ORACLE_TOP_TABLES_EXP                   *
* Title               :   Top Tables for HANA Database                *
* Purpose             :   This report is used to fetch top 100 tables *
*                     :   in the system                               *
*---------------------------------------------------------------------*
* Related Transaction OR Standard Program References                  *
* DBACOCKPIT                                                          *
*---------------------------------------------------------------------*
* Program Change History                                              *
*---------------------------------------------------------------------*
* Date        Version   Author       TR#/Local     Description        *
*---------------------------------------------------------------------*
* 07-10-2020 Initial Ruchir Kamble FIOK900653 To fetch top 100 tables *
* 02-02-2022 V001    Yasaswini K   Local      To add schema in input  *
*---------------------------------------------------------------------*

REPORT zcm_oracle_top_tables_exp.

CONSTANTS: lc_sep        TYPE c VALUE '|'                LENGTH 1,
           lc_top        TYPE c VALUE 'Top'              LENGTH 3,
           lc_db_object  TYPE extents_ti-db_object       VALUE '*',
           lc_typ        TYPE extents_ti-s_type          VALUE 'TABLE',
           lc_tabspace   TYPE extents_ti-table_spc       VALUE '*',
           lc_extent     TYPE dbflags-nr_extents         VALUE '10',
           lc_fetch      TYPE c VALUE 'FETCH'            LENGTH 5,
           lc_table_name TYPE c VALUE 'Table name'       LENGTH 10,
           lc_size       TYPE c VALUE 'Size in KB'       LENGTH 15,
           lc_no_rows    TYPE c VALUE 'Number of rows'   LENGTH 15,
           lc_title      TYPE c VALUE 'Large Tables'     LENGTH 15,
           lc_err_msg    TYPE c VALUE 'No data found'    LENGTH 20,
*  Begin of changes in V001
           lc_noinput    TYPE c VALUE 'No input given'   LENGTH 20,
           lc_title1     TYPE c VALUE 'Fetch Top Tables' LENGTH 20,
           lc_inc_input  TYPE c VALUE 'Incorrect input'  LENGTH 20,
           lc_schema     TYPE c VALUE 'Owner'            LENGTH 5.
*  End of changes in V001

LOAD-OF-PROGRAM.

FORM get_config
TABLES lt_input  STRUCTURE tab512
  lt_output STRUCTURE tab512.

  DATA: ls_input        TYPE tab512,
        ls_output       TYPE tab512,
        lv_action       TYPE char10,
        lv_num_tab      TYPE char10,
        lv_count        TYPE char3,
        lv_kbytes       TYPE char15,
        lv_no_rows      TYPE char10,
        lt_tablrows     TYPE TABLE OF exp_tablrows WITH HEADER LINE,
        lt_largetabs    TYPE TABLE OF extents_ti,
        ls_largetabs    TYPE extents_ti,
*  Begin of changes in V001
        lv_schema       TYPE string,
        lt_largetabstmp TYPE TABLE OF extents_ti,
        lv_dbschema     TYPE char16,
        lt_schema       TYPE STANDARD TABLE OF tbl_owner,
        ls_schema       TYPE tbl_owner.
*  End of changes in V001

* Adding title to the output
  ls_output = lc_title1.
  APPEND ls_output TO lt_output.
  CLEAR: ls_output.

  " Read input file from Python
  READ TABLE lt_input INTO ls_input INDEX 1.
  IF sy-subrc EQ 0.
    SPLIT ls_input AT lc_sep INTO
    lv_action       " Action
    lv_num_tab      " Number of tables to be fetched
    lv_schema.      "Schema (owner) as input           "+V001

*  Begin of changes in V001
  ELSE.
    " No input given
    ls_output = lc_noinput.
    APPEND ls_output TO lt_output.
    CLEAR ls_output.
    RETURN.
  ENDIF.
*  End of changes in V001

  CASE lv_action.

    WHEN lc_fetch.

*  Begin of changes in V001
      IF lv_schema IS INITIAL.

        CALL FUNCTION 'DB_DBSCHEMA_CURRENT'
          IMPORTING
            dbschema = lv_dbschema.

        IF sy-subrc = 0.
          lv_schema = lv_dbschema.
        ENDIF.

      ENDIF.
*  End of changes in V001

      SPLIT lv_schema AT ',' INTO TABLE lt_schema.   "+V001

      FREE: lt_largetabs.

      LOOP AT lt_schema INTO ls_schema.             "+V001

        " FM to fetch tables
        CALL FUNCTION 'DB_ORA_EXTENTS'
          EXPORTING
            owner            = ls_schema
            db_object        = lc_db_object
            type             = lc_typ
            tabspace         = lc_tabspace
            extents          = lc_extent
          TABLES
            table_of_extents = lt_largetabstmp.
*  Begin of changes in V001
        IF sy-subrc = 0.
          APPEND LINES OF lt_largetabstmp TO lt_largetabs.

          FREE: lt_largetabstmp[].
          CLEAR: ls_schema.
        ENDIF.
      ENDLOOP.

*  To delete title
      FREE: lt_output[].
*  End of changes in V001

      " Adding title to the output
      CONCATENATE lc_top lv_num_tab lc_title
      INTO ls_output
      SEPARATED BY space.
      APPEND ls_output TO lt_output.
      CLEAR ls_output.

      IF lt_largetabs IS NOT INITIAL.

        " Sorting the tables to get large tables
        SORT lt_largetabs DESCENDING BY k_bytes .

        " Adding headings to the output
        CONCATENATE lc_schema         lc_sep           "+V001
        lc_table_name     lc_sep
        lc_size           lc_sep
        lc_no_rows
        INTO ls_output.
        APPEND ls_output TO lt_output.
        CLEAR ls_output.

        CLEAR lv_count.

        LOOP AT lt_largetabs INTO ls_largetabs.

          lv_count = lv_count + 1.

          FREE lt_tablrows.
          lt_tablrows-tabname = ls_largetabs-db_object.
          APPEND lt_tablrows.

          " FM to get the number of rows in the table
          CALL FUNCTION 'EM_GET_NUMBER_OF_ENTRIES'
            TABLES
              it_tables = lt_tablrows.

          IF lt_tablrows-tabrows > 0.
            lv_no_rows    = lt_tablrows-tabrows.
          ELSE.
            lv_no_rows    = 0.
          ENDIF.

          lv_kbytes     = ls_largetabs-k_bytes.

          CONDENSE: lv_kbytes, lv_no_rows.

          CONCATENATE ls_largetabs-owner      lc_sep          "+V001
          ls_largetabs-db_object  lc_sep
          lv_kbytes               lc_sep
          lv_no_rows
          INTO ls_output.
          APPEND ls_output TO lt_output.
          CLEAR: ls_output, lv_kbytes.

          " Using lv_count to get top n tables
          IF lv_count EQ lv_num_tab.
            EXIT.
          ENDIF.

        ENDLOOP.

      ELSE.
        " No records found
        ls_output = lc_err_msg.
        APPEND ls_output TO lt_output.
        CLEAR ls_output.

      ENDIF.

*  Begin of changes in V001
    WHEN OTHERS.
      " Incorrect input
      ls_output = lc_inc_input.
      APPEND ls_output TO lt_output.
      CLEAR ls_output.
*  End of changes in V001
  ENDCASE.
ENDFORM.