*---------------------------------------------------------------------*
* Program Name        :  ZCM_SMQS_UPD_DESTINATION                     *
* Title               :  Restore Destination in SMQS                  *
* Purpose             :  This report is to restore Destination in SMQS*
*                         during Cloud Migration                      *
*---------------------------------------------------------------------*
* Related Transaction OR Standard Program References                  *
* SMQS                                                                *
*---------------------------------------------------------------------*
* Tables              :   SELECT    UPDATE      INSERT      DELETE    *
* XXXXX                     X                                         *
*---------------------------------------------------------------------*
* Program Change History                                              *
*---------------------------------------------------------------------*
*Date        Version   Author       TR#/Local     Description         *
*---------------------------------------------------------------------*
*11-27-2020  Initial   Ruchir Kamble   Local   To restore Destination *
*                                              in SMQS                *
*09-30-2022  V001      Yasaswini K   Local     To remove dead code and*
*                                              inline declarations    *
*---------------------------------------------------------------------*
REPORT zcm_smqs_upd_destination.

LOAD-OF-PROGRAM.

FORM get_config
TABLES lt_input  STRUCTURE tab512
  lt_output STRUCTURE tab512.

  CONSTANTS: lc_sep        TYPE C VALUE '|'         LENGTH 1,
  lc_insert     TYPE C VALUE 'I'         LENGTH 1,
  lc_update     TYPE C VALUE 'U'         LENGTH 1,
  lc_delete     TYPE C VALUE 'D'         LENGTH 1,
  lc_register   TYPE C VALUE 'R'         LENGTH 1,
  lc_deregister TYPE C VALUE 'U'         LENGTH 1,
  lc_limited    TYPE C VALUE 'E'         LENGTH 1,
  lc_title      TYPE C VALUE
  'Restore SMQS'                         LENGTH 20,
  lc_insert_msg TYPE C VALUE
  'Number of entries created in SMQS : ' LENGTH 40,
  lc_update_msg TYPE C VALUE
  'Number of entries updated in SMQS : ' LENGTH 40,
  lc_delete_msg TYPE C VALUE
  'Number of entries deleted in SMQS : ' LENGTH 40,
  lc_err_msg    TYPE C VALUE
  'No entries to restore'                LENGTH 35.

  DATA:ls_input        TYPE tab512,
        ls_output      TYPE tab512,
        lv_lines       TYPE I,
        lv_cnt_ins     TYPE I,
        lv_cnt_upd     TYPE I,
        lv_cnt_del     TYPE I,
        lv_action      TYPE char1,
        lv_mandt       TYPE mandt,
        lv_destination TYPE rfcdest,
        lv_type        TYPE char1,
        lv_qrfconly    TYPE char1,
        lv_maxconn     TYPE int4,
        lv_maxtime     TYPE int4,
        lv_wkstate     TYPE arfcstate,
        lv_nactive     TYPE char4,
        lv_hostid      TYPE rfcdest,
        lv_conn        TYPE char4,
        lv_runtime     TYPE char4,
* Begin of Changes V001
        lv_ins         TYPE string,
        lv_upd         TYPE string,
        lv_del         TYPE string.
* End of Changes V001

  PERFORM null_check TABLES lt_input.

  CLEAR lv_lines.
  DESCRIBE TABLE lt_input LINES lv_lines.

  " To delete header info from the input
  DELETE lt_input FROM 1 TO 3.

  " Adding title to the output
  ls_output = lc_title.
  APPEND ls_output TO lt_output.
  CLEAR ls_output.

  IF lv_lines < 2.

    " No entries to restore
    ls_output = lc_err_msg.
    APPEND ls_output TO lt_output.
    CLEAR ls_output.
    RETURN.
  ENDIF.

  CLEAR: lv_action, lv_mandt, lv_destination, lv_type, lv_qrfconly,
  lv_maxconn, lv_maxtime, lv_wkstate, lv_nactive, lv_hostid,
  lv_conn, lv_runtime.

  " To delete duplicate values
  DELETE ADJACENT DUPLICATES FROM lt_input.

  LOOP AT lt_input INTO ls_input.

    SPLIT ls_input AT lc_sep INTO
    lv_mandt
    lv_destination
    lv_type
    lv_qrfconly
    lv_conn
    lv_runtime
    lv_wkstate
    lv_nactive
    lv_hostid
    lv_action.

    IF lv_action EQ lc_delete.              " If action is Delete

      " FM to delete Destination in SMQS
      CALL FUNCTION 'QDEST_UNREGISTER'
      EXPORTING
        dest                = lv_destination
      EXCEPTIONS
        invalid_destination = 1
        not_available       = 2
        OTHERS              = 3.

      IF sy-subrc EQ 0.
        lv_cnt_del = lv_cnt_del + 1.
      ENDIF.

  ELSEIF lv_action EQ lc_insert.          " If action is Insert

      " Converting INT4 into String
      lv_maxconn = lv_conn.
      lv_maxtime = lv_runtime.

      " Fm to register new Destination in SMQS
      CALL FUNCTION 'QDEST_REGISTER'
      EXPORTING
        dest                    = lv_destination
        maxconn                 = lv_maxconn
        maxtime                 = lv_maxtime
        qrfc_only               = lv_qrfconly
      EXCEPTIONS
        invalid_destination     = 1
        invalid_max_connections = 2
        not_available           = 3
        OTHERS                  = 4.

      IF sy-subrc = 0.
        lv_cnt_ins = lv_cnt_ins + 1.
      ENDIF.

  ELSEIF lv_action EQ lc_update.          " IF action is Update

      IF lv_type EQ lc_register.

        " Fm to register new Destination in SMQS
        CALL FUNCTION 'QDEST_REGISTER'
        EXPORTING
          dest                    = lv_destination
        EXCEPTIONS
          invalid_destination     = 1
          invalid_max_connections = 2
          not_available           = 3
          OTHERS                  = 4.

        IF sy-subrc = 0.
          lv_cnt_upd = lv_cnt_upd + 1.
        ENDIF.

    ELSEIF lv_type EQ lc_deregister.

        " Fm to Deregister existing destination in SMQS
        CALL FUNCTION 'QDEST_UNREGISTER'
        EXPORTING
          dest                = lv_destination
          limited             = lc_limited
        EXCEPTIONS
          invalid_destination = 1
          not_available       = 2
          OTHERS              = 3.

        IF sy-subrc EQ 0.
          lv_cnt_upd = lv_cnt_upd + 1.
        ENDIF.

      ENDIF.

    ENDIF.

  ENDLOOP.

* Begin of Changes V001
  "Removing inline declarations

  lv_ins = lv_cnt_ins.
  lv_upd = lv_cnt_upd.
  lv_del = lv_cnt_del.


  CONCATENATE lc_insert_msg lv_ins INTO ls_output-wa
  SEPARATED BY space.
  APPEND ls_output TO lt_output.
  CLEAR ls_output.


  CONCATENATE lc_update_msg lv_upd INTO ls_output-wa
  SEPARATED BY space.
  APPEND ls_output TO lt_output.
  CLEAR ls_output.

  CONCATENATE lc_delete_msg lv_del INTO ls_output-wa
  SEPARATED BY space.
  APPEND ls_output TO lt_output.
  CLEAR ls_output.
* End of Changes V001

ENDFORM.

FORM null_check TABLES lt_table TYPE TABLE.

  DO.
    REPLACE ALL OCCURRENCES OF SUBSTRING '|N|'
    IN TABLE lt_table WITH '| |'.
    FIND '|N|' IN TABLE lt_table.
    IF sy-subrc <> 0.
      EXIT .
    ENDIF.
  ENDDO.

  DO.
    REPLACE ALL OCCURRENCES OF SUBSTRING '|NULL'
    IN TABLE lt_table WITH '| '.
    FIND '|NULL' IN TABLE lt_table.
    IF sy-subrc <> 0.
      EXIT .
    ENDIF.
  ENDDO.

ENDFORM.