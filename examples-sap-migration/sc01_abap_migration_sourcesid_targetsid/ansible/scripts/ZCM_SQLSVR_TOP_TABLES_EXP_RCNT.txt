*---------------------------------------------------------------------*
* Program Name        :   ZCM_SQLSVR_TOP_TABLES_EXP_RCNT              *
* Title               :   Top 100 Tables for SQL Server Database      *
* Purpose             :   This report is used to fetch top 100 tables *
*                     :   in the system                               *
*---------------------------------------------------------------------*
* Related Transaction OR Standard Program References                  *
* DBACOCKPIT                                                          *
*---------------------------------------------------------------------*
* Program Change History                                              *
*---------------------------------------------------------------------*
* Date        Version   Author       TR#/Local     Description        *
*---------------------------------------------------------------------*
* 24-10-2022 Initial Yasaswini K   Local      To fetch top 100 tables *
*                                             based on row count and  *
*                                             excluding pool and      *
*                                             cluster tables          *
*---------------------------------------------------------------------*

REPORT zcm_sqlsvr_top_tables_exp_rcnt.

LOAD-OF-PROGRAM.

FORM get_config
               TABLES lt_input  STRUCTURE tab512
                      lt_output STRUCTURE tab512.

  CONSTANTS: lc_sep            TYPE c VALUE '|'               LENGTH 1,
             lc_l              TYPE c VALUE 'L'               LENGTH 1,
             lc_x              TYPE c VALUE 'X'               LENGTH 1,
             lc_maptype        TYPE c VALUE '3'               LENGTH 1,
             lc_top            TYPE c VALUE 'Top'             LENGTH 3,
             lc_fetch          TYPE c VALUE 'FETCH'           LENGTH 5,
             lc_table_name     TYPE c VALUE 'Table name'      LENGTH 10,
             lc_size           TYPE c VALUE 'Size in KB'      LENGTH 15,
             lc_no_rows        TYPE c VALUE 'Number of rows'  LENGTH 16,
             lc_title          TYPE c VALUE 'Large Tables'    LENGTH 13,
             lc_pool           TYPE c VALUE 'POOL'            LENGTH 4,
             lc_cluster        TYPE c VALUE 'CLUSTER'         LENGTH 7,
             lc_null           TYPE c VALUE 'NULL'            LENGTH 4,
             lc_err_msg        TYPE c VALUE
             'No data found'                                  LENGTH 20,
             lc_obj_top_tables TYPE smssrattr-objname
                                 VALUE 'sap_get_top_tables',
             lc_comma          TYPE c VALUE ','               LENGTH 1,
             lc_schema         TYPE c VALUE 'SchemaName'      LENGTH 11,
             lc_noinput        TYPE c VALUE 'No input passed' LENGTH 30,
             lc_inc_input      TYPE c VALUE 'Incorrect Input' LENGTH 20.

  TYPES: BEGIN OF lty_dd02l,
           tabname  TYPE tabname,
           tabclass TYPE tabclass,
         END OF lty_dd02l.

  DATA: ls_input      TYPE tab512,
        ls_output     TYPE tab512,
        lv_action     TYPE char10,
        lv_num_tab    TYPE char10,
        lv_schema     TYPE mssschema,
        lv_used       TYPE char10,
        lv_rows       TYPE char15,
        lv_dbschema   TYPE char16,
        ls_conn       TYPE mssconndata,
        lt_inparams   TYPE TABLE OF mssseria,
        lt_largetabs  TYPE TABLE OF msstoplargest,
        ls_largetabs  TYPE msstoplargest,
        lr_rat_ref    TYPE REF TO cl_mss_rat,
        lv_count      TYPE char11,
        lt_dd02l      TYPE STANDARD TABLE OF lty_dd02l,
        ls_dd02l      TYPE lty_dd02l,
        lt_table_tmp  TYPE STANDARD TABLE OF msstoplargest,
        lt_table_tmp1 TYPE STANDARD TABLE OF msstoplargest,
        lt_schema     TYPE STANDARD TABLE OF hdb_schema_name,
        ls_schema     TYPE hdb_schema_name.

  ls_output = lc_title.
  APPEND ls_output TO lt_output.
  CLEAR ls_output.

  " Read input file from Python
  READ TABLE lt_input INTO ls_input INDEX 1.
  IF sy-subrc NE 0.
    ls_output = lc_noinput. "No input passed
    APPEND ls_output TO lt_output.
    CLEAR ls_output.
    RETURN.
  ENDIF.


  SPLIT ls_input AT lc_sep INTO
  lv_action       " Action
  lv_num_tab      " Number of tables to be fetched
  lv_schema.      " Schema

  CASE lv_action.

    WHEN lc_fetch.
      FREE: lt_output.

      IF lv_schema IS INITIAL.

        CALL FUNCTION 'DB_DBSCHEMA'
          IMPORTING
            dbschema = lv_dbschema.

        IF sy-subrc = 0.
          lv_schema = lv_dbschema.
        ENDIF.

      ENDIF.

*  Fetching all the entries from DB
      SPLIT lv_schema AT lc_comma INTO TABLE lt_schema.
      lv_count = lv_num_tab + 1.

      " FM to get connection details
      CALL FUNCTION 'SMSS_GET_CONNECTION'
        EXPORTING
          auto_conn = lc_x
        IMPORTING
          currcon   = ls_conn.

      CREATE OBJECT lr_rat_ref
        EXPORTING
          currcon = ls_conn
          objname = lc_obj_top_tables.

      APPEND lv_num_tab       TO lt_inparams.
      APPEND lc_l             TO lt_inparams.
      APPEND ls_conn-dbschema TO lt_inparams.
      APPEND ls_conn-dbname   TO lt_inparams.

      " FM to fetch large tables
      CALL FUNCTION 'SMSS_RAT_GENERIC'
        EXPORTING
          conn              = ls_conn
          maptype           = lc_maptype
          objname           = lc_obj_top_tables
        TABLES
          inparams          = lt_inparams
          t_result          = lt_largetabs
        EXCEPTIONS
          illegal_parameter = 1
          rfc_error         = 2
          data_access_error = 3
          no_authority      = 4
          OTHERS            = 5.

      " Adding title to the output
      CONCATENATE lc_top lv_num_tab lc_title
      INTO ls_output
      SEPARATED BY space.
      APPEND ls_output TO lt_output.

      IF sy-subrc EQ 0.

*   Deleting entries based on input schema
        IF lt_largetabs IS NOT INITIAL.

          SORT lt_largetabs BY schema_name.
          lt_table_tmp[] = lt_largetabs[].

          FREE: lt_largetabs[].

          LOOP AT lt_schema INTO ls_schema.
            lt_table_tmp1[] = lt_table_tmp[].
            DELETE lt_table_tmp1[] WHERE schema_name NE ls_schema.
            APPEND LINES OF lt_table_tmp1[] TO lt_largetabs[].
            CLEAR: ls_schema.
          ENDLOOP.

          SORT lt_largetabs BY rows DESCENDING.

        ENDIF.

        SELECT tabname tabclass INTO TABLE lt_dd02l
             FROM dd02l
             WHERE ( tabclass EQ lc_pool AND tabclass EQ lc_cluster ).

        IF sy-subrc = 0.
          SORT lt_dd02l BY tabname.
        ENDIF.

        IF lt_largetabs IS NOT INITIAL.

          " Adding headings to the output
          CONCATENATE lc_schema         lc_sep
          lc_table_name  lc_sep
          lc_size        lc_sep
          lc_no_rows
          INTO ls_output.
          APPEND ls_output TO lt_output.

          LOOP AT lt_largetabs INTO ls_largetabs.

            READ TABLE lt_dd02l INTO ls_dd02l WITH KEY
                      tabname = ls_largetabs-name.

            IF sy-subrc NE 0.

              lv_count = lv_count + 1.

              CONDENSE lv_count.

              lv_used      = ls_largetabs-used.
              lv_rows      = ls_largetabs-rows.

              CONDENSE: lv_used , lv_rows.

              IF lv_used IS INITIAL.
                lv_used = lc_null.
              ENDIF.

              IF lv_rows IS INITIAL.
                lv_rows = lc_null.
              ENDIF.

              CONCATENATE ls_largetabs-schema_name lc_sep
              ls_largetabs-name     lc_sep
              lv_used               lc_sep
              lv_rows
              INTO ls_output.
              APPEND ls_output TO lt_output.

              " Using lv_count to get top n tables
              IF lv_count EQ lv_num_tab.
                EXIT.
              ENDIF.

              CLEAR: ls_output, lv_used, lv_rows, ls_dd02l.

            ENDIF.

          ENDLOOP.

          "Adding NULL values in between
          DO.
            REPLACE ALL OCCURRENCES OF SUBSTRING '||'
            IN TABLE lt_output WITH '|NULL|'.
            FIND '||' IN TABLE lt_output.
            IF sy-subrc <> 0.
              EXIT .
            ENDIF.
          ENDDO.

        ELSE.
          " No records found
          ls_output = lc_err_msg.
          APPEND ls_output TO lt_output.
          CLEAR ls_output.
        ENDIF.


      ELSE.
        " No records found
        ls_output = lc_err_msg.
        APPEND ls_output TO lt_output.
        CLEAR ls_output.
      ENDIF.


    WHEN OTHERS.
      ls_output = lc_inc_input. "Incorrect input
      APPEND ls_output TO lt_output.
      CLEAR ls_output.


  ENDCASE.

ENDFORM.