*---------------------------------------------------------------------*
* Program Name        :   ZCM_RSA1_EXP_LOGICAL_STAT_HVER              *
* Title               :   Check logical systems in RSA1               *
* Purpose             :   This report is used to check the status of  *
*                     :   the logical systems in RSA1 and display the *
*                     :   status                                      *
*---------------------------------------------------------------------*
* Related Transaction OR Standard Program References                  *
* RSA1                                                                *
*---------------------------------------------------------------------*
*Tables              :   SELECT    UPDATE      INSERT      DELETE    *
* RSBASIDOC           :     X                                         *
*---------------------------------------------------------------------*
* Program Change History                                              *
*---------------------------------------------------------------------*
*Date        Version   Author       TR#/Local     Description         *
*---------------------------------------------------------------------*
*04-30-2021  Initial  Ashwini B G   Local       To check status of    *
*                                               logical systems       *
*09-13-2022  V001     Soumya Ray    Local       To pass 'No data found*
*                                            in case no data in system*
*---------------------------------------------------------------------*
REPORT zcm_rsa1_exp_logical_stat_hver.

LOAD-OF-PROGRAM.

FORM get_config
              TABLES lt_input  STRUCTURE tab512
                     lt_output STRUCTURE tab512.

  CONSTANTS: lc_sep        TYPE c VALUE '|'                  LENGTH 1,
             lc_conn_typ   TYPE c VALUE 'ConnectionTypes'    LENGTH 15,
             lc_source_sys TYPE c VALUE 'SourceSystems'      LENGTH 15,
             lc_tech_name  TYPE c VALUE 'TechnicalName'      LENGTH 15,
             lc_status     TYPE c VALUE 'Status'             LENGTH 6,
             lc_msg        TYPE c VALUE
             'List of logical systems and their status'      LENGTH 80,
             lc_msg2       TYPE c VALUE
             'Error during logical system check'             LENGTH 80,
             lc_no_input   TYPE c VALUE 'No input given'     LENGTH 20,
             lc_inc_input  TYPE c VALUE 'Incorrect input'    LENGTH 20,
             lc_act_exp    TYPE c VALUE 'EXPORT'             LENGTH 6,
             lc_receiver   TYPE roosource-stockupd VALUE 'X',
             lc_logsys     TYPE rs_tlogo VALUE 'LSYS',
* Begin of changes in V001
             lc_null       TYPE c VALUE 'NULL'               LENGTH 4,
             lc_msg1       TYPE c VALUE 'No data found'      LENGTH 80.
* End of changes in V001

  DATA: ls_input         TYPE tab512,
        ls_output        TYPE tab512,
        lv_action        TYPE char6,
        lt_messages      TYPE rs_t_msg,
        ls_messages      TYPE bal_s_msg,
        lv_msg_txt       TYPE string,
        lt_rsbasidoc     TYPE STANDARD TABLE OF rsbasidoc,
        ls_rsbasidoc     TYPE rsbasidoc,
        ls_odp           TYPE rslogsysodp,
        ls_objnm         TYPE rsawbnobjnm,
        ls_obj           TYPE rso_s_tlogo_asc,
        ls_tree          TYPE rsawbn_s_tree,
        lo_r_obj_factory TYPE REF TO cl_rsawbn_obj_factory,
        lv_context       TYPE rslogsysodp-context.

  " Clear all variables before use
  CLEAR: ls_input,
         lv_action.

  FREE: lt_output.
  " Title
  CLEAR: ls_output.
  ls_output = lc_msg.
  APPEND ls_output TO lt_output.

  " Read input values from Python
  READ TABLE lt_input INTO ls_input INDEX 1.
  IF sy-subrc EQ 0.
    lv_action = ls_input.
  ELSE.
    " No input given
    ls_output = lc_no_input.
    APPEND ls_output TO lt_output.
    CLEAR ls_output.
    RETURN.
  ENDIF.

  CASE lv_action.

    WHEN lc_act_exp. "EXPORT

* Under the pre-migration activities, the data
* related to RSA1 connections created in the system is
* exported to Python.The table RSBASIDOC holds this data. This is read
* to determine the number of logical system connections in system
      FREE: lt_rsbasidoc.
      " Get all logical systems in RSA1

      CALL FUNCTION 'RSA_RSBASIDOC_READ'
        EXPORTING
          i_am_receiver = lc_receiver
        TABLES
          basidoc       = lt_rsbasidoc.

      IF lt_rsbasidoc[] IS INITIAL.
        " No logical systems present in RSA1
        ls_output = lc_msg1.
        APPEND ls_output TO lt_output.
        CLEAR: ls_output.
        RETURN.
      ENDIF.

      " Heading column
      CONCATENATE lc_conn_typ lc_source_sys lc_tech_name
      lc_status INTO ls_output SEPARATED BY lc_sep.
      APPEND ls_output TO lt_output.
      CLEAR: ls_output.

      CREATE OBJECT lo_r_obj_factory.

      " Display the logical systems present in transaction RSA1
      CLEAR: ls_rsbasidoc.
      LOOP AT lt_rsbasidoc INTO ls_rsbasidoc.
        FREE: lt_messages[].
        " To check the logical systems status
        CALL FUNCTION 'RSAR_LOGICAL_SYSTEM_CHECK'
          EXPORTING
            i_logsys              = ls_rsbasidoc-slogsys
          IMPORTING
            e_t_messages          = lt_messages
          EXCEPTIONS
            logical_system_exists = 1
            OTHERS                = 2.
        IF sy-subrc EQ 0.
          " Display message as whether logical system
          " exists or no
          CLEAR: lv_msg_txt,ls_messages.
          READ TABLE lt_messages INTO ls_messages INDEX 1.
          IF sy-subrc EQ 0.
            MESSAGE ID ls_messages-msgid TYPE ls_messages-msgty
            NUMBER ls_messages-msgno
            WITH ls_rsbasidoc-slogsys INTO lv_msg_txt.
          ENDIF.
        ELSEIF sy-subrc EQ 1.
          " Display message as whether logical system
          " is active or no
          CLEAR: lv_msg_txt,ls_messages.
          READ TABLE lt_messages INTO ls_messages INDEX 1.
          IF sy-subrc EQ 0.
            MESSAGE ID ls_messages-msgid TYPE ls_messages-msgty
            NUMBER ls_messages-msgno
            WITH ls_rsbasidoc-slogsys INTO lv_msg_txt.
          ENDIF.
        ELSE.
          CLEAR: lv_msg_txt.
          " Error during logical system check
          lv_msg_txt = lc_msg2.
        ENDIF.
        " Read the ODP context for source systems
        CLEAR: ls_odp.
        CALL METHOD cl_rsds_access_odp=>odp_context_get
          EXPORTING
            i_logsys      = ls_rsbasidoc-slogsys
          IMPORTING
            es_odp        = ls_odp
          EXCEPTIONS
            no_odp_logsys = 1
            failed        = 2
            OTHERS        = 3.
        IF sy-subrc NE 0.
          CLEAR ls_odp-context.
        ENDIF.
        CLEAR: lv_context,ls_objnm.
        lv_context = ls_odp-context. "ODP context

        " Get the source systems folder names of RSA1
        ls_objnm = cl_rsawbn_ssys_folder=>get_name_by_type_and_context(
                   i_srctype = ls_rsbasidoc-srctype
                   i_context = lv_context ).

        "Create awbobj and get text and icon
        CLEAR: ls_obj.
        ls_obj-tlogo   = lc_logsys.
        ls_obj-objnm   = ls_rsbasidoc-slogsys.

        " Instantiate a class CL_RSAWBN_OBJ_FACTORY to read
        " source system text
        CLEAR: ls_tree.
        ls_tree-r_awbobj = lo_r_obj_factory->get_instance(
                                             i_tlogo = ls_obj-tlogo
                                             i_objnm = ls_obj-objnm ).

        TRY.
            " Source system text
            ls_tree-text = ls_tree-r_awbobj->get_txt(  ).
          CATCH cx_rsawbn_awb_object_not_found.
            " Source system text
            ls_tree-text = ls_tree-objnm.
        ENDTRY.

* Begin of changes in V001
        IF lv_msg_txt IS INITIAL.
          lv_msg_txt = lc_null.
        ENDIF.
* End of changes in V001
        " Pass the source system related data as output
        CONCATENATE ls_objnm ls_tree-text ls_rsbasidoc-slogsys
                    lv_msg_txt INTO ls_output SEPARATED BY lc_sep.
        APPEND ls_output TO lt_output.

        CLEAR: ls_rsbasidoc,ls_output.
      ENDLOOP.

* Begin of changes in V001
      "Adding NULL values in between
      DO.
        REPLACE ALL OCCURRENCES OF SUBSTRING '||'
        IN TABLE lt_output WITH '|NULL|'.
        FIND '||' IN TABLE lt_output.
        IF sy-subrc <> 0.
          EXIT .
        ENDIF.
      ENDDO.
* End of changes in V001
    WHEN OTHERS.

      " Incorrect input
      ls_output = lc_inc_input.
      APPEND ls_output TO lt_output.
      CLEAR ls_output.
      RETURN.

  ENDCASE.

ENDFORM.