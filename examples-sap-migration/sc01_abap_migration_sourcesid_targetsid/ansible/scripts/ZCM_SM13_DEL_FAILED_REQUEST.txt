*---------------------------------------------------------------------*
* Program Name        :  ZCM_SM13_DEL_FAILED_REQUEST                  *
* Title               :  To delete failed update request in SM13      *
* Purpose             :  This report is used to delete failed update  *
*                        request in SM13 and check data in VBDATA     *
*---------------------------------------------------------------------*
* Related Transaction OR Standard Program References                  *
* SM13                                                                *
*---------------------------------------------------------------------*
* Tables              :   SELECT    UPDATE      INSERT      DELETE    *
* VBHDR                     X                                         *
* VBDATA                    X
*---------------------------------------------------------------------*
* Program Change History                                              *
*---------------------------------------------------------------------*
*Date        Version   Author       TR#/Local     Description         *
*---------------------------------------------------------------------*
*09-22-2020  Initial   Soumya Ray   Local      To delete failed update*
*                                              request in SM13 & check*
*                                              data in VBDATA         *
*03-30-2022  V001      Soumya Ray   Local      To correct the message *
*                                            in case of no data, wrong*
*                                              input and remove inline*
*                                              declarations           *
*---------------------------------------------------------------------*

REPORT zcm_sm13_del_failed_request.

FORM get_config
               TABLES lt_input  STRUCTURE tab512
                      lt_output STRUCTURE tab512.

  DATA: th_vb_state TYPE x,
        th_vb_rc    LIKE sy-index,
        ls_output   TYPE tab512,
        lv_rec      TYPE int4,
        lv_vbmodcnt TYPE char10,
        lv_vbblkno  TYPE char10,
        lv_vblen    TYPE char5,
        lv_count    TYPE char4,
        lv_bstatefr LIKE vbhdr-vbstate,
        lv_bstateto LIKE vbhdr-vbstate,
        lv_vbrcfr   LIKE vbhdr-vbrc VALUE 0,
        lv_vbrcto   LIKE vbhdr-vbrc VALUE 255,
        lv_flag     TYPE c,
        lv_head     TYPE string,
*  Begin of changes in V001
        ls_input    TYPE tab512,
        lv_action   TYPE string,
        ls_vbhdr    TYPE vbhdr,
        ls_vbdata   TYPE vbdata,
        lt_vbhdr    TYPE STANDARD TABLE OF vbhdr,
        lt_vbdata   TYPE STANDARD TABLE OF vbdata.
* End of changes in V001

  CONSTANTS: lc_sep         TYPE c           VALUE '|'       LENGTH 1,
             lc_cancel      TYPE char20      VALUE 'CANCEL',
             lc_init        TYPE char20      VALUE 'INITIAL',
             lc_v1          TYPE char20      VALUE 'V1',
             lc_v2          TYPE char20      VALUE 'V2',
             lc_all         TYPE char20      VALUE 'ALL',
             lc_msg_nodata  TYPE string
                              VALUE 'No data found', "+V001
             lc_del_msg     TYPE string      VALUE 'No.deleted',
             lc_tabname     TYPE string      VALUE 'VBDATA',
             lc_vbkey       TYPE char10      VALUE 'Vbkey',
             lc_vbmodcnt    TYPE char10      VALUE 'Vbmodcnt',
             lc_vbblkno     TYPE char10      VALUE 'Vbblkno',
             lc_vblen       TYPE char10      VALUE 'Vblen',
             lc_initial     LIKE th_vb_state VALUE 255,
             lc_processed   LIKE th_vb_state VALUE 1,
             lc_prepared    LIKE th_vb_state VALUE 254,
             lc_insert      LIKE th_vb_state VALUE 2,
             lc_autodiaexec LIKE th_vb_rc    VALUE 253,
             lc_error       LIKE th_vb_rc    VALUE 201,
             lc_notexecuted LIKE th_vb_rc    VALUE 255,
             lc_hdrinsert   LIKE th_vb_rc    VALUE 2,
*   Begin of changes in V001
             lc_null        TYPE c           VALUE 'NULL'   LENGTH 4,
             lc_noinput     TYPE c           VALUE
             'No input passed'                              LENGTH 15,
             lc_inc_input   TYPE c           VALUE
             'Incorrect Input'                              LENGTH 20,
             lc_title       TYPE c           VALUE
             'SM13 delete status of failed requests'        LENGTH 50.
*   End of changes in V001

*  Begin of changes in V001
  CLEAR: th_vb_state, th_vb_rc, ls_output, lv_rec, lv_vbmodcnt,
         lv_vbblkno, lv_vblen, lv_count, lv_bstatefr, lv_bstateto,
         lv_vbrcfr, lv_vbrcto, lv_flag, lv_head, ls_input, lv_action,
         ls_vbhdr, ls_vbdata.
  FREE:  lt_vbhdr, lt_vbdata.

*   Begin of changes in V001
  ls_output = lc_title.
  APPEND ls_output TO lt_output.
  CLEAR: ls_output.
*   End of changes in V001

  " Read action required from Python interface
  READ TABLE lt_input INTO ls_input INDEX 1.
* Begin of changes in V001
  IF sy-subrc NE 0.
    ls_output = lc_noinput.
    APPEND ls_output TO lt_output.
    CLEAR ls_output.
    RETURN.
  ENDIF.
* End of changes in V001
  lv_action = ls_input.

  CASE lv_action.

    WHEN lc_cancel. " Action code "CANCEL"
      lv_bstatefr = lc_processed.
      lv_bstateto  = lc_initial.
      lv_vbrcfr = lc_hdrinsert.
      lv_vbrcto = lc_error.
      lv_flag = 'X'.
      lv_head = 'Cancelledupdaterequest'.
    WHEN lc_init. " Action code "INITIAL"
      lv_bstatefr = lc_prepared.
      lv_bstateto  = lc_initial.
      lv_vbrcfr = lc_autodiaexec.
      lv_vbrcto = lc_notexecuted.
      lv_flag = 'X'.
      lv_head = 'Initialupdaterequest'.
    WHEN lc_v1. " Action code "V1"
      lv_bstatefr = lc_processed.
      lv_bstateto  = lc_processed.
      lv_flag = 'X'.
      lv_head = 'V1updaterequest'.
    WHEN lc_v2.   " Action code "V2"
      lv_bstatefr = lc_insert.
      lv_bstateto  = lc_insert.
      lv_flag = 'X'.
      lv_head = 'V2updaterequest'.
    WHEN lc_all. " Action code "ALL"
      lv_bstatefr = lc_processed.
      lv_bstateto  = lc_initial.
      lv_flag = 'X'.
      lv_head = 'Allupdaterequest'.
    WHEN OTHERS.
*  Begin of changes in V001
      ls_output = lc_inc_input. "Incorrect input
      APPEND ls_output TO lt_output.
      CLEAR ls_output.
      RETURN.
*  End of changes in V001
  ENDCASE.
  IF lv_flag EQ 'X'.
    SELECT * FROM vbhdr
    INTO TABLE  lt_vbhdr
          WHERE vbstate BETWEEN lv_bstatefr AND lv_bstateto
          AND vbrc BETWEEN lv_vbrcfr AND lv_vbrcto.
    IF sy-subrc EQ 0.
      LOOP AT lt_vbhdr INTO ls_vbhdr.
        DELETE FROM vbhdr  WHERE vbkey = ls_vbhdr-vbkey.
        DELETE FROM vbmod  WHERE vbkey = ls_vbhdr-vbkey.
        DELETE FROM vbdata WHERE vbkey = ls_vbhdr-vbkey.
        lv_rec = lv_rec + 1.
      ENDLOOP.
      COMMIT WORK.
    ENDIF.

    FREE: lt_output. "+V001

    ls_output = lv_head.
    APPEND ls_output TO lt_output.
    CLEAR: ls_output.

    ls_output = lc_del_msg. "Sub heading
    APPEND ls_output TO lt_output.
    CLEAR: ls_output.
    lv_count = lv_rec.
    ls_output = lv_count.  " No of records deleted
    CONDENSE ls_output.
    APPEND ls_output TO lt_output.
    CLEAR: ls_output.
    APPEND ls_output TO lt_output.

    ls_output = lc_tabname.   "Name of the table
    APPEND ls_output TO lt_output.
    CLEAR: ls_output.

    IF NOT lt_vbhdr IS INITIAL.
      SELECT vbkey
      vbmodcnt
      vbblkno
      vblen
      FROM vbdata
      INTO TABLE lt_vbdata
      FOR ALL ENTRIES IN lt_vbhdr
      WHERE vbkey = lt_vbhdr-vbkey
      ORDER BY PRIMARY KEY. " Data in VBDATA is checked

      IF sy-subrc EQ 0.
        CONCATENATE lc_vbkey lc_sep
        lc_vbmodcnt lc_sep
        lc_vbblkno   lc_sep
        lc_vblen INTO ls_output.  "Table heading
        APPEND ls_output TO lt_output.
        LOOP AT lt_vbdata INTO ls_vbdata.
          lv_vbmodcnt = ls_vbdata-vbmodcnt.
          lv_vbblkno = ls_vbdata-vbblkno.
          lv_vblen = ls_vbdata-vblen.
*  Begin of changes in V001
          IF lv_vblen IS INITIAL.
            lv_vblen = lc_null.
          ENDIF.
*  End of changes in V001
          CONCATENATE ls_vbdata-vbkey lc_sep
                      lv_vbmodcnt lc_sep
                      lv_vbblkno   lc_sep
                      lv_vblen INTO ls_output.  "Table data
          CONDENSE ls_output.
          APPEND ls_output TO lt_output.
          CLEAR: ls_output, lv_vblen, lv_vbblkno, lv_vbmodcnt.
        ENDLOOP.
      ELSE.
        ls_output = lc_msg_nodata.
        APPEND ls_output TO lt_output.
      ENDIF.
    ELSE.
      ls_output = lc_msg_nodata. "+V001
      APPEND ls_output TO lt_output.
      CLEAR ls_output.
    ENDIF.
    PERFORM null_check TABLES  lt_output.
    CLEAR: lv_rec, lv_count.
  ENDIF.

* Begin of changes in V001
  CLEAR: th_vb_state, th_vb_rc, ls_output, lv_rec, lv_vbmodcnt,
  lv_vbblkno, lv_vblen, lv_count, lv_bstatefr, lv_bstateto,
  lv_vbrcfr, lv_vbrcto, lv_flag, lv_head, ls_input, lv_action,
  ls_vbhdr, ls_vbdata.
  FREE:  lt_vbhdr, lt_vbdata.
* End of changes in V001

ENDFORM.
FORM null_check  TABLES   lt_table TYPE table.

  DO .
    REPLACE ALL OCCURRENCES OF SUBSTRING '||'
    IN TABLE lt_table WITH '|NULL|'.
    FIND '||' IN TABLE lt_table.
    IF sy-subrc <> 0.
      EXIT .
    ENDIF.
  ENDDO.

ENDFORM.